/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	window["Uxcore"] = {
	  "Alert": __webpack_require__(1),
	  "Button": __webpack_require__(6),
	  "Calendar": __webpack_require__(9),
	  "CheckboxGroup": __webpack_require__(216),
	  "Collapse": __webpack_require__(220),
	  "Const": __webpack_require__(223),
	  "Crumb": __webpack_require__(225),
	  "Dialog": __webpack_require__(228),
	  "Dropdown": __webpack_require__(277),
	  "Form": __webpack_require__(329),
	  "Formatter": __webpack_require__(155),
	  "Grid": __webpack_require__(447),
	  "Layout": __webpack_require__(454),
	  "Mention": __webpack_require__(460),
	  "Menu": __webpack_require__(467),
	  "MultiSelect": __webpack_require__(513),
	  "Pagination": __webpack_require__(518),
	  "Popover": __webpack_require__(594),
	  "Progress": __webpack_require__(648),
	  "Radiogroup": __webpack_require__(353),
	  "Select2": __webpack_require__(362),
	  "Steps": __webpack_require__(652),
	  "Table": __webpack_require__(655),
	  "Tabs": __webpack_require__(677),
	  "Tinymce": __webpack_require__(440),
	  "Tooltip": __webpack_require__(157),
	  "Totop": __webpack_require__(696),
	  "Transfer": __webpack_require__(698),
	  "Tree": __webpack_require__(701),
	  "Uploader": __webpack_require__(717),
	  "Validator": __webpack_require__(339),
	  "Message": __webpack_require__(728),
	  "Pickable": __webpack_require__(758),
	  "PrimaryNav": __webpack_require__(760)
		};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Alert Component for uxcore
	 * @author eternaslky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(2);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Alert Component for uxcore
	 * @author eternaslky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var classnames = __webpack_require__(5);

	var Alert = function (_React$Component) {
	    _inherits(Alert, _React$Component);

	    function Alert(props) {
	        _classCallCheck(this, Alert);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            closed: false
	        };
	        return _this;
	    }

	    Alert.prototype.toggleShow = function toggleShow() {
	        this.setState({
	            closed: !this.state.closed
	        });
	    };

	    Alert.prototype.handleClose = function handleClose(e) {

	        this.setState({
	            closed: true
	        });
	        this.props.onClose.call(this, e);
	    };

	    Alert.prototype.renderContent = function renderContent() {
	        var _classnames;

	        var me = this;
	        var iconMap = {
	            message: 'information',
	            error: 'error',
	            warning: 'caution',
	            success: 'success',
	            question: 'query',
	            stop: 'prohibition',
	            wait: 'wait'
	        };
	        var _me$props = me.props;
	        var prefixCls = _me$props.prefixCls;
	        var iconPrefixCls = _me$props.iconPrefixCls;
	        var type = _me$props.type;
	        var closable = _me$props.closable;
	        var description = _me$props.description;
	        var hasContainer = _me$props.hasContainer;
	        var className = _me$props.className;

	        var iconType = type;
	        if (iconPrefixCls == 'kuma-icon') {
	            iconType = iconMap[iconType];
	        }
	        // 保证 className 加在最外层容器上
	        return React.createElement('p', { className: classnames((_classnames = {}, _classnames[prefixCls + ' ' + prefixCls + '-' + type] = true, _classnames[className] = !!className && !closable && !description && !hasContainer, _classnames)) }, React.createElement('i', { className: prefixCls + '-icon ' + iconPrefixCls + ' ' + iconPrefixCls + '-' + iconType }), React.createElement('span', null, me.props.message));
	    };

	    Alert.prototype.renderDes = function renderDes() {
	        var me = this;
	        var _me$props2 = me.props;
	        var description = _me$props2.description;
	        var prefixCls = _me$props2.prefixCls;

	        if (!!description) {
	            return React.createElement('p', { className: prefixCls + ' ' + prefixCls + '-follow' }, description);
	        }
	    };

	    Alert.prototype.renderClose = function renderClose() {
	        var me = this;
	        var _me$props3 = me.props;
	        var prefixCls = _me$props3.prefixCls;
	        var iconPrefixCls = _me$props3.iconPrefixCls;

	        if (me.props.closable) {
	            if (me.props.closeText) {
	                return React.createElement('span', { className: prefixCls + '-close', onClick: me.handleClose.bind(me) }, me.props.closeText);
	            } else {
	                return React.createElement('i', { className: prefixCls + '-close ' + iconPrefixCls + ' ' + iconPrefixCls + '-close', onClick: me.handleClose.bind(me) });
	            }
	        }
	    };

	    Alert.prototype.render = function render() {
	        var me = this;
	        var _me$props4 = me.props;
	        var prefixCls = _me$props4.prefixCls;
	        var type = _me$props4.type;
	        var closable = _me$props4.closable;
	        var hasContainer = _me$props4.hasContainer;
	        var description = _me$props4.description;
	        var className = _me$props4.className;
	        var size = _me$props4.size;

	        var html = void 0;
	        var content = me.renderContent();
	        if (hasContainer || closable || !!description) {
	            var _classnames2;

	            html = React.createElement('div', { className: classnames((_classnames2 = {}, _classnames2[prefixCls + '-container ' + prefixCls + '-container-' + type] = true, _classnames2[prefixCls + '-container-closable'] = closable, _classnames2[className] = !!className, _classnames2[prefixCls + '-size-large'] = size === 'large', _classnames2)) }, content, me.renderDes(), me.renderClose());
	        } else {
	            html = content;
	        }
	        return this.state.closed ? null : html;
	    };

	    return Alert;
	}(React.Component);

	Alert.defaultProps = {
	    prefixCls: 'kuma-alert',
	    iconPrefixCls: 'kuma-icon',
	    type: 'message',
	    onClose: function onClose() {},
	    hasContainer: false,
	    size: 'normal'
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	Alert.propTypes = {
	    prefixCls: React.PropTypes.string,
	    iconPrefixCls: React.PropTypes.string,
	    type: React.PropTypes.oneOf(['message', 'error', 'warning', 'success', 'question', 'stop', 'wait']),
	    closable: React.PropTypes.bool,
	    hasContainer: React.PropTypes.bool,
	    closeText: React.PropTypes.oneOfType([React.PropTypes.element, React.PropTypes.string]),
	    message: React.PropTypes.oneOfType([React.PropTypes.element, React.PropTypes.string]),
	    description: React.PropTypes.oneOfType([React.PropTypes.element, React.PropTypes.string]),
	    onClose: React.PropTypes.func,
	    size: React.PropTypes.oneOf(['normal', 'large'])

	};

	Alert.displayName = "Alert";

	module.exports = Alert;

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = window.React;

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = window.ReactDOM || window.React;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _Button = __webpack_require__(7);

	var _Button2 = _interopRequireDefault(_Button);

	var _ButtonGroup = __webpack_require__(8);

	var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	/**
	 * Button Component for uxcore
	 * @author
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	_Button2["default"].ButtonGroup = _ButtonGroup2["default"];
	module.exports = _Button2["default"];

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];for (var key in source) {
	            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }return target;
	};

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var sizeMap = {
	    small: 'sm',
	    medium: '',
	    large: 'lg'
	},
	    typeMap = {
	    primary: 'primary',
	    secondary: 'secondary',
	    outline: 'outline',
	    disabled: 'disabled'
	},
	    clsPrefix = 'kuma-button';

	var Button = function (_React$Component) {
	    _inherits(Button, _React$Component);

	    function Button(props) {
	        _classCallCheck(this, Button);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    Button.prototype.render = function render() {
	        var props = this.props;
	        var type = props.disabled ? 'disabled' : props.type;
	        var clsObj = {};
	        if (props.className) {
	            clsObj[props.className] = true;
	        }
	        if (sizeMap[props.size]) {
	            clsObj[clsPrefix + '-' + sizeMap[props.size]] = true;
	        }
	        var className = (0, _classnames2["default"])(clsPrefix, clsPrefix + '-' + typeMap[type], clsObj);
	        var propEvents = {};
	        Object.keys(props).forEach(function (key) {
	            if (key.indexOf('on') === 0) {
	                propEvents[key] = props[key];
	            }
	        });
	        return _react2["default"].createElement('button', _extends({ className: className, disabled: props.disabled }, propEvents), props.children);
	    };

	    return Button;
	}(_react2["default"].Component);

	Button.displayName = 'uxcore-button';
	Button.propTypes = {
	    /**
	     * @title 尺寸
	     */
	    size: _react2["default"].PropTypes.oneOf(['small', 'medium', 'large']),
	    /**
	     * @title 类型
	     */
	    type: _react2["default"].PropTypes.oneOf(['primary', 'secondary', 'outline', 'disabled']),
	    /**
	     * @title 是否禁用
	     * @veIgnore
	     */
	    disabled: _react2["default"].PropTypes.bool,
	    /**
	     * @title 类名
	     * @veIgnore
	     */
	    className: _react2["default"].PropTypes.string,
	    /**
	     * @title 内容
	     */
	    children: _react2["default"].PropTypes.oneOfType([_react2["default"].PropTypes.element, _react2["default"].PropTypes.string])
	};
	Button.defaultProps = {
	    size: 'medium',
	    type: 'primary',
	    disabled: false,
	    className: '',
	    children: 'Button'
	};

		module.exports = Button;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var ButtonGroup = function (_React$Component) {
		_inherits(ButtonGroup, _React$Component);

		function ButtonGroup(props) {
			_classCallCheck(this, ButtonGroup);

			return _possibleConstructorReturn(this, _React$Component.call(this, props));
		}

		ButtonGroup.prototype.render = function render() {
			return _react2["default"].createElement('div', { className: 'kuma-button-group' }, this.props.children);
		};

		return ButtonGroup;
	}(_react2["default"].Component);

	ButtonGroup.displayName = 'ButtonGroup';
	ButtonGroup.propTypes = {};
	ButtonGroup.defaultProps = {};

	module.exports = ButtonGroup;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Calendar Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(10);

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];for (var key in source) {
	            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }return target;
	};

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var RcCalendar = __webpack_require__(11);
	var GregorianCalendar = __webpack_require__(12);
	var DateTimeFormat = __webpack_require__(43);
	var Datepicker = __webpack_require__(59);
	var RcMonthCalendar = __webpack_require__(87);
	var RcYearCalendar = __webpack_require__(88);
	var TimePicker = __webpack_require__(89);
	var util = __webpack_require__(154);
	var React = __webpack_require__(3);

	var defaultValueLocale = {};
	var CalendarLocale = {};
	var TimePickerLocale = {};
	defaultValueLocale['zh-cn'] = __webpack_require__(210);
	defaultValueLocale['en-us'] = __webpack_require__(15);
	CalendarLocale['zh-cn'] = __webpack_require__(211);
	CalendarLocale['en-us'] = __webpack_require__(57);
	TimePickerLocale['zh-cn'] = __webpack_require__(213);
	TimePickerLocale['en-us'] = __webpack_require__(140);

	function getGregorianCalendarDate(date, locale) {
	    defaultValueLocale[locale].timezoneOffset = -new Date().getTimezoneOffset();
	    var value = new GregorianCalendar(defaultValueLocale[locale]);
	    value.setTime(new Date(date).valueOf());
	    return value;
	}

	function getCalendarContainer() {
	    var c = document.createElement('div');
	    c.className = 'uxcore';
	    document.body.appendChild(c);
	    return c;
	}

	var Calendar = function (_React$Component) {
	    _inherits(Calendar, _React$Component);

	    function Calendar(props) {
	        _classCallCheck(this, Calendar);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {};
	        return _this;
	    }

	    Calendar.prototype.componentWillMount = function componentWillMount() {
	        var me = this;
	        me.TimePickerElement = React.createElement(TimePicker, { prefixCls: 'kuma-time-picker', locale: TimePickerLocale[me.props.locale] });
	    };

	    Calendar.prototype.render = function render() {
	        var _this2 = this;

	        var me = this;
	        var p = me.props;
	        var formatter = new DateTimeFormat(p.format);
	        var calendarOptions = {
	            className: p.className,
	            style: p.style,
	            contentRender: p.contentRender,
	            disabledDate: p.disabledDate,
	            showWeekNumber: p.showWeekNumber,
	            showToday: p.showToday,
	            timePicker: p.timePicker ? p.timePicker : p.showTime ? me.TimePickerElement : null,
	            showDateInput: p.showDateInput,
	            locale: CalendarLocale[p.locale],
	            prefixCls: 'kuma-calendar'
	        };
	        var pickerOptions = {
	            disabled: p.disabled,
	            formatter: formatter,
	            transitionName: p.transitionName,
	            adjustOrientOnCalendarOverflow: false,
	            prefixCls: 'kuma-calendar-picker',
	            placement: 'bottomLeft',
	            getCalendarContainer: getCalendarContainer
	        };

	        if (p.value) {
	            var value = getGregorianCalendarDate(p.value, p.locale);
	            pickerOptions.value = calendarOptions.defaultValue = value;
	        } else {
	            pickerOptions.value = calendarOptions.defaultValue = null;
	        }

	        if (p.defaultValue) {
	            var value = getGregorianCalendarDate(p.defaultValue, p.locale);
	            calendarOptions.defaultValue = value;
	            pickerOptions.defaultValue = value;
	        } else {
	            var value = getGregorianCalendarDate(new Date().getTime(), p.locale);
	            calendarOptions.defaultValue = value;
	        }
	        if (p.hasTrigger) {
	            pickerOptions.trigger = React.createElement('i', { className: 'kuma-icon kuma-icon-calender' });
	        }

	        var calendar = React.createElement(RcCalendar, calendarOptions);

	        function _onChange(v) {
	            var date = v.getTime();
	            var value = getGregorianCalendarDate(date, p.locale);
	            this.props.onSelect(new Date(date), formatter.format(value));
	        }

	        return React.createElement(Datepicker, _extends({
	            calendar: calendar,
	            onChange: _onChange.bind(me)
	        }, pickerOptions), function (_ref) {
	            var value = _ref.value;

	            return React.createElement('input', { value: value && formatter.format(value), readOnly: true, disabled: me.props.disabled, placeholder: _this2.props.placeholder, className: 'kuma-calendar-picker-input kuma-input' });
	        });
	    };

	    return Calendar;
	}(React.Component);

	Calendar.displayName = 'Calendar';
	Calendar.defaultProps = {
	    format: 'yyyy-MM-dd',
	    placeholder: '请选择日期',
	    onSelect: function onSelect() {},
	    locale: 'zh-cn',
	    showDateInput: false,
	    hasTrigger: false,
	    transitionName: 'slideUp'
	};
	Calendar.propTypes = {
	    format: React.PropTypes.string,
	    placeholder: React.PropTypes.string,
	    onSelect: React.PropTypes.func,
	    locale: React.PropTypes.string,
	    hasTrigger: React.PropTypes.bool
	};

	var MonthCalendar = function (_React$Component2) {
	    _inherits(MonthCalendar, _React$Component2);

	    function MonthCalendar(props) {
	        _classCallCheck(this, MonthCalendar);

	        var _this3 = _possibleConstructorReturn(this, _React$Component2.call(this, props));

	        _this3.state = {};
	        return _this3;
	    }

	    MonthCalendar.prototype.render = function render() {
	        var _this4 = this;

	        var me = this;
	        var p = me.props;
	        var formatter = new DateTimeFormat(p.format);
	        var calendarOptions = {
	            className: p.className,
	            style: p.style,
	            locale: CalendarLocale[p.locale],
	            orient: ['top', 'left'],
	            prefixCls: 'kuma-calendar'
	        };
	        var pickerOptions = {
	            disabled: p.disabled,
	            transitionName: p.transitionName,
	            formatter: formatter,
	            adjustOrientOnCalendarOverflow: false,
	            prefixCls: 'kuma-calendar-picker',
	            getCalendarContainer: getCalendarContainer
	        };

	        if (p.value) {
	            var value = getGregorianCalendarDate(p.value, p.locale);
	            pickerOptions.value = calendarOptions.defaultValue = value;
	        } else {
	            pickerOptions.value = calendarOptions.defaultValue = null;
	        }

	        if (p.defaultValue) {
	            var value = getGregorianCalendarDate(p.defaultValue, p.locale);
	            calendarOptions.defaultValue = value;
	        }
	        var calendar = React.createElement(RcMonthCalendar, calendarOptions);

	        function _onChange(v) {
	            var date = v.getTime();
	            var value = getGregorianCalendarDate(date, p.locale);
	            this.props.onSelect(new Date(date), formatter.format(value));
	        }

	        return React.createElement(Datepicker, _extends({
	            calendar: calendar,
	            onChange: _onChange.bind(me)
	        }, pickerOptions), function (_ref2) {
	            var value = _ref2.value;

	            return React.createElement('input', { readOnly: true, value: value && formatter.format(value), disabled: me.props.disabled, placeholder: _this4.props.placeholder, className: 'kuma-calendar-picker-input kuma-input' });
	        });
	    };

	    return MonthCalendar;
	}(React.Component);

	MonthCalendar.displayName = 'MonthCalendar';
	MonthCalendar.defaultProps = {
	    format: 'yyyy-MM',
	    placeholder: '请选择月份',
	    onSelect: function onSelect() {},
	    locale: 'zh-cn',
	    transitionName: 'slideUp'
	};
	MonthCalendar.propTypes = {
	    format: React.PropTypes.string,
	    placeholder: React.PropTypes.string,
	    onSelect: React.PropTypes.func,
	    locale: React.PropTypes.string
	};

	var YearCalendar = function (_React$Component3) {
	    _inherits(YearCalendar, _React$Component3);

	    function YearCalendar(props) {
	        _classCallCheck(this, YearCalendar);

	        var _this5 = _possibleConstructorReturn(this, _React$Component3.call(this, props));

	        _this5.state = {};
	        return _this5;
	    }

	    YearCalendar.prototype.render = function render() {
	        var _this6 = this;

	        var me = this;
	        var p = me.props;
	        var formatter = new DateTimeFormat(p.format);
	        var calendarOptions = {
	            className: p.className,
	            style: p.style,
	            locale: CalendarLocale[p.locale],
	            orient: ['top', 'left'],
	            prefixCls: 'kuma-calendar'
	        };
	        var pickerOptions = {
	            disabled: p.disabled,
	            formatter: formatter,
	            transitionName: p.transitionName,
	            adjustOrientOnCalendarOverflow: false,
	            prefixCls: 'kuma-calendar-picker',
	            getCalendarContainer: getCalendarContainer
	        };

	        if (p.value) {
	            var value = getGregorianCalendarDate(p.value, p.locale);
	            pickerOptions.value = calendarOptions.defaultValue = value;
	        } else {
	            pickerOptions.value = calendarOptions.defaultValue = null;
	        }

	        if (p.defaultValue) {
	            var value = getGregorianCalendarDate(p.defaultValue, p.locale);
	            calendarOptions.defaultValue = value;
	        }
	        var calendar = React.createElement(RcYearCalendar, calendarOptions);

	        function _onChange(v) {
	            var date = v.getTime();
	            var value = getGregorianCalendarDate(date, p.locale);
	            this.props.onSelect(new Date(date), formatter.format(value));
	        }

	        return React.createElement(Datepicker, _extends({
	            calendar: calendar,
	            onChange: _onChange.bind(me)
	        }, pickerOptions), function (_ref3) {
	            var value = _ref3.value;

	            return React.createElement('input', { value: value && formatter.format(value), readOnly: true, disabled: me.props.disabled, placeholder: _this6.props.placeholder, className: 'kuma-calendar-picker-input kuma-input' });
	        });
	    };

	    return YearCalendar;
	}(React.Component);

	YearCalendar.displayName = 'YearCalendar';
	YearCalendar.defaultProps = {
	    format: 'yyyy',
	    placeholder: '请选择年份',
	    onSelect: function onSelect() {},
	    locale: 'zh-cn',
	    transitionName: 'slideUp'
	};
	YearCalendar.propTypes = {
	    format: React.PropTypes.string,
	    placeholder: React.PropTypes.string,
	    onSelect: React.PropTypes.func,
	    locale: React.PropTypes.string
	};

	Calendar.MonthCalendar = MonthCalendar;
	Calendar.YearCalendar = YearCalendar;
	Calendar.CalendarPanel = RcCalendar;
	Calendar.util = util;

	module.exports = Calendar;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _gregorianCalendar = __webpack_require__(12);

	var _gregorianCalendar2 = _interopRequireDefault(_gregorianCalendar);

	var _rcUtil = __webpack_require__(16);

	var _DateTable = __webpack_require__(37);

	var _DateTable2 = _interopRequireDefault(_DateTable);

	var _CalendarHeader = __webpack_require__(47);

	var _CalendarHeader2 = _interopRequireDefault(_CalendarHeader);

	var _CalendarFooter = __webpack_require__(52);

	var _CalendarFooter2 = _interopRequireDefault(_CalendarFooter);

	var _CalendarMixin = __webpack_require__(55);

	var _CalendarMixin2 = _interopRequireDefault(_CalendarMixin);

	var _CommonMixin = __webpack_require__(56);

	var _CommonMixin2 = _interopRequireDefault(_CommonMixin);

	var _DateInput = __webpack_require__(58);

	var _DateInput2 = _interopRequireDefault(_DateInput);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function noop() {} // customized rc-calendar https://github.com/react-component/calendar/blob/master/src/Calendar.jsx

	function goStartMonth() {
	  var next = this.state.value.clone();
	  next.setDayOfMonth(1);
	  this.setValue(next);
	}

	function goEndMonth() {
	  var next = this.state.value.clone();
	  next.setDayOfMonth(next.getActualMaximum(_gregorianCalendar2["default"].MONTH));
	  this.setValue(next);
	}

	function goMonth(direction) {
	  var next = this.state.value.clone();
	  next.addMonth(direction);
	  this.setValue(next);
	}

	function goYear(direction) {
	  var next = this.state.value.clone();
	  next.addYear(direction);
	  this.setValue(next);
	}

	function goWeek(direction) {
	  var next = this.state.value.clone();
	  next.addWeekOfYear(direction);
	  this.setValue(next);
	}

	function goDay(direction) {
	  var next = this.state.value.clone();
	  next.addDayOfMonth(direction);
	  this.setValue(next);
	}

	var Calendar = _react2["default"].createClass({
	  displayName: 'Calendar',

	  propTypes: {
	    disabledDate: _react.PropTypes.func,
	    disabledTime: _react.PropTypes.any,
	    value: _react.PropTypes.object,
	    selectedValue: _react.PropTypes.object,
	    defaultValue: _react.PropTypes.object,
	    className: _react.PropTypes.string,
	    locale: _react.PropTypes.object,
	    showWeekNumber: _react.PropTypes.bool,
	    style: _react.PropTypes.object,
	    showToday: _react.PropTypes.bool,
	    showDateInput: _react.PropTypes.bool,
	    visible: _react.PropTypes.bool,
	    onSelect: _react.PropTypes.func,
	    onOk: _react.PropTypes.func,
	    showOk: _react.PropTypes.bool,
	    prefixCls: _react.PropTypes.string,
	    onKeyDown: _react.PropTypes.func,
	    timePicker: _react.PropTypes.element,
	    dateInputPlaceholder: _react.PropTypes.any,
	    onClear: _react.PropTypes.func,
	    onChange: _react.PropTypes.func
	  },

	  mixins: [_CommonMixin2["default"], _CalendarMixin2["default"]],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      showToday: true,
	      showDateInput: true,
	      timePicker: null,
	      onOk: noop
	    };
	  },
	  getInitialState: function getInitialState() {
	    // bind methods
	    this.nextMonth = goMonth.bind(this, 1);
	    this.previousMonth = goMonth.bind(this, -1);
	    this.nextYear = goYear.bind(this, 1);
	    this.previousYear = goYear.bind(this, -1);
	    return {};
	  },
	  onKeyDown: function onKeyDown(event) {
	    if (event.target.nodeName.toLowerCase() === 'input') {
	      return undefined;
	    }
	    var keyCode = event.keyCode;
	    // mac
	    var ctrlKey = event.ctrlKey || event.metaKey;
	    switch (keyCode) {
	      case _rcUtil.KeyCode.DOWN:
	        goWeek.call(this, 1);
	        event.preventDefault();
	        return 1;
	      case _rcUtil.KeyCode.UP:
	        goWeek.call(this, -1);
	        event.preventDefault();
	        return 1;
	      case _rcUtil.KeyCode.LEFT:
	        if (ctrlKey) {
	          this.previousYear();
	        } else {
	          goDay.call(this, -1);
	        }
	        event.preventDefault();
	        return 1;
	      case _rcUtil.KeyCode.RIGHT:
	        if (ctrlKey) {
	          this.nextYear();
	        } else {
	          goDay.call(this, 1);
	        }
	        event.preventDefault();
	        return 1;
	      case _rcUtil.KeyCode.HOME:
	        goStartMonth.call(this);
	        event.preventDefault();
	        return 1;
	      case _rcUtil.KeyCode.END:
	        goEndMonth.call(this);
	        event.preventDefault();
	        return 1;
	      case _rcUtil.KeyCode.PAGE_DOWN:
	        this.nextMonth();
	        event.preventDefault();
	        return 1;
	      case _rcUtil.KeyCode.PAGE_UP:
	        this.previousMonth();
	        event.preventDefault();
	        return 1;
	      case _rcUtil.KeyCode.ENTER:
	        this.onSelect(this.state.value);
	        event.preventDefault();
	        return 1;
	      default:
	        this.props.onKeyDown(event);
	        return 1;
	    }
	  },
	  onClear: function onClear() {
	    this.onSelect(null);
	    this.props.onClear();
	  },
	  onOk: function onOk() {
	    var selectedValue = this.state.selectedValue;

	    if (this.isAllowedDate(selectedValue)) {
	      this.props.onOk(selectedValue);
	    }
	  },
	  onDateInputChange: function onDateInputChange(value) {
	    this.onSelect(value, {
	      source: 'dateInput'
	    });
	  },
	  onDateTableSelect: function onDateTableSelect(value) {
	    this.onSelect(value);
	  },
	  chooseToday: function chooseToday() {
	    var today = this.state.value.clone();
	    today.setTime(Date.now());
	    this.onSelect(today);
	  },
	  render: function render() {
	    var props = this.props;
	    var locale = props.locale;
	    var prefixCls = props.prefixCls;
	    var disabledDate = props.disabledDate;
	    var dateInputPlaceholder = props.dateInputPlaceholder;
	    var timePicker = props.timePicker;
	    var disabledTime = props.disabledTime;

	    var state = this.state;
	    var value = state.value;
	    var selectedValue = state.selectedValue;

	    var dateInputElement = props.showDateInput ? _react2["default"].createElement(_DateInput2["default"], {
	      formatter: this.getFormatter(),
	      key: 'date-input',
	      timePicker: timePicker,
	      gregorianCalendarLocale: value.locale,
	      locale: locale,
	      placeholder: dateInputPlaceholder,
	      showClear: true,
	      disabledTime: disabledTime,
	      disabledDate: disabledDate,
	      onClear: this.onClear,
	      prefixCls: prefixCls,
	      selectedValue: selectedValue,
	      onChange: this.onDateInputChange
	    }) : null;
	    var children = [dateInputElement, _react2["default"].createElement('div', {
	      key: 'date-panel',
	      className: prefixCls + '-date-panel'
	    }, _react2["default"].createElement(_CalendarHeader2["default"], {
	      locale: locale,
	      onValueChange: this.setValue,
	      value: value,
	      prefixCls: prefixCls
	    }), _react2["default"].createElement('div', { className: prefixCls + '-calendar-body' }, _react2["default"].createElement(_DateTable2["default"], {
	      locale: locale,
	      value: value,
	      selectedValue: selectedValue,
	      prefixCls: prefixCls,
	      dateRender: props.dateRender,
	      contentRender: props.contentRender,
	      onSelect: this.onDateTableSelect,
	      disabledDate: disabledDate,
	      showWeekNumber: props.showWeekNumber
	    })), _react2["default"].createElement(_CalendarFooter2["default"], {
	      showOk: props.showOk,
	      locale: locale,
	      prefixCls: prefixCls,
	      showToday: props.showToday,
	      disabledTime: disabledTime,
	      gregorianCalendarLocale: value.locale,
	      showDateInput: props.showDateInput,
	      timePicker: timePicker,
	      selectedValue: selectedValue,
	      value: value,
	      disabledDate: disabledDate,
	      onOk: this.onOk,
	      onSelect: this.onSelect,
	      onToday: this.chooseToday
	    }))];

	    return this.renderRoot({
	      children: children,
	      className: props.showWeekNumber ? prefixCls + '-week-number' : ''
	    });
	  }
	});

	exports["default"] = Calendar;
	module.exports = exports['default'];

/***/ },
/* 12 */
[808, 13, 15, 14],
/* 13 */
[809, 14],
/* 14 */
/***/ function(module, exports) {

	/*
	 * @ignore
	 * const for gregorian date
	 * @author yiminghe@gmail.com
	 */

	"use strict";

	module.exports = {
	  /*
	   * Enum indicating sunday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  SUNDAY: 0,
	  /*
	   * Enum indicating monday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  MONDAY: 1,
	  /*
	   * Enum indicating tuesday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  TUESDAY: 2,
	  /*
	   * Enum indicating wednesday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  WEDNESDAY: 3,
	  /*
	   * Enum indicating thursday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  THURSDAY: 4,
	  /*
	   * Enum indicating friday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  FRIDAY: 5,
	  /*
	   * Enum indicating saturday
	   * @type Number
	   * @member Date.Gregorian
	   */
	  SATURDAY: 6,
	  /*
	   * Enum indicating january
	   * @type Number
	   * @member Date.Gregorian
	   */
	  JANUARY: 0,
	  /*
	   * Enum indicating february
	   * @type Number
	   * @member Date.Gregorian
	   */
	  FEBRUARY: 1,
	  /*
	   * Enum indicating march
	   * @type Number
	   * @member Date.Gregorian
	   */
	  MARCH: 2,
	  /*
	   * Enum indicating april
	   * @type Number
	   * @member Date.Gregorian
	   */
	  APRIL: 3,
	  /*
	   * Enum indicating may
	   * @type Number
	   * @member Date.Gregorian
	   */
	  MAY: 4,
	  /*
	   * Enum indicating june
	   * @type Number
	   * @member Date.Gregorian
	   */
	  JUNE: 5,
	  /*
	   * Enum indicating july
	   * @type Number
	   * @member Date.Gregorian
	   */
	  JULY: 6,
	  /*
	   * Enum indicating august
	   * @type Number
	   * @member Date.Gregorian
	   */
	  AUGUST: 7,
	  /*
	   * Enum indicating september
	   * @type Number
	   * @member Date.Gregorian
	   */
	  SEPTEMBER: 8,
	  /*
	   * Enum indicating october
	   * @type Number
	   * @member Date.Gregorian
	   */
	  OCTOBER: 9,
	  /*
	   * Enum indicating november
	   * @type Number
	   * @member Date.Gregorian
	   */
	  NOVEMBER: 10,
	  /*
	   * Enum indicating december
	   * @type Number
	   * @member Date.Gregorian
	   */
	  DECEMBER: 11
		};

/***/ },
/* 15 */
/***/ function(module, exports) {

	/*
	 * en-us locale
	 * @ignore
	 * @author yiminghe@gmail.com
	 */
	"use strict";

	module.exports = {
	  // in minutes
	  timezoneOffset: -8 * 60,
	  firstDayOfWeek: 0,
	  minimalDaysInFirstWeek: 1
		};

/***/ },
/* 16 */
[810, 17, 18, 20, 21, 22, 23, 28, 29, 34, 35, 36],
/* 17 */
/***/ function(module, exports) {

	'use strict';

	var seed = 0;
	module.exports = function guid() {
	  return Date.now() + '_' + seed++;
		};

/***/ },
/* 18 */
[811, 19],
/* 19 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate(fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config(name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
		}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 20 */
[812, 19],
/* 21 */
/***/ function(module, exports) {

	/**
	 * @ignore
	 * some key-codes definition and utils from closure-library
	 * @author yiminghe@gmail.com
	 */

	'use strict';

	var KeyCode = {
	  /**
	   * MAC_ENTER
	   */
	  MAC_ENTER: 3,
	  /**
	   * BACKSPACE
	   */
	  BACKSPACE: 8,
	  /**
	   * TAB
	   */
	  TAB: 9,
	  /**
	   * NUMLOCK on FF/Safari Mac
	   */
	  NUM_CENTER: 12, // NUMLOCK on FF/Safari Mac
	  /**
	   * ENTER
	   */
	  ENTER: 13,
	  /**
	   * SHIFT
	   */
	  SHIFT: 16,
	  /**
	   * CTRL
	   */
	  CTRL: 17,
	  /**
	   * ALT
	   */
	  ALT: 18,
	  /**
	   * PAUSE
	   */
	  PAUSE: 19,
	  /**
	   * CAPS_LOCK
	   */
	  CAPS_LOCK: 20,
	  /**
	   * ESC
	   */
	  ESC: 27,
	  /**
	   * SPACE
	   */
	  SPACE: 32,
	  /**
	   * PAGE_UP
	   */
	  PAGE_UP: 33, // also NUM_NORTH_EAST
	  /**
	   * PAGE_DOWN
	   */
	  PAGE_DOWN: 34, // also NUM_SOUTH_EAST
	  /**
	   * END
	   */
	  END: 35, // also NUM_SOUTH_WEST
	  /**
	   * HOME
	   */
	  HOME: 36, // also NUM_NORTH_WEST
	  /**
	   * LEFT
	   */
	  LEFT: 37, // also NUM_WEST
	  /**
	   * UP
	   */
	  UP: 38, // also NUM_NORTH
	  /**
	   * RIGHT
	   */
	  RIGHT: 39, // also NUM_EAST
	  /**
	   * DOWN
	   */
	  DOWN: 40, // also NUM_SOUTH
	  /**
	   * PRINT_SCREEN
	   */
	  PRINT_SCREEN: 44,
	  /**
	   * INSERT
	   */
	  INSERT: 45, // also NUM_INSERT
	  /**
	   * DELETE
	   */
	  DELETE: 46, // also NUM_DELETE
	  /**
	   * ZERO
	   */
	  ZERO: 48,
	  /**
	   * ONE
	   */
	  ONE: 49,
	  /**
	   * TWO
	   */
	  TWO: 50,
	  /**
	   * THREE
	   */
	  THREE: 51,
	  /**
	   * FOUR
	   */
	  FOUR: 52,
	  /**
	   * FIVE
	   */
	  FIVE: 53,
	  /**
	   * SIX
	   */
	  SIX: 54,
	  /**
	   * SEVEN
	   */
	  SEVEN: 55,
	  /**
	   * EIGHT
	   */
	  EIGHT: 56,
	  /**
	   * NINE
	   */
	  NINE: 57,
	  /**
	   * QUESTION_MARK
	   */
	  QUESTION_MARK: 63, // needs localization
	  /**
	   * A
	   */
	  A: 65,
	  /**
	   * B
	   */
	  B: 66,
	  /**
	   * C
	   */
	  C: 67,
	  /**
	   * D
	   */
	  D: 68,
	  /**
	   * E
	   */
	  E: 69,
	  /**
	   * F
	   */
	  F: 70,
	  /**
	   * G
	   */
	  G: 71,
	  /**
	   * H
	   */
	  H: 72,
	  /**
	   * I
	   */
	  I: 73,
	  /**
	   * J
	   */
	  J: 74,
	  /**
	   * K
	   */
	  K: 75,
	  /**
	   * L
	   */
	  L: 76,
	  /**
	   * M
	   */
	  M: 77,
	  /**
	   * N
	   */
	  N: 78,
	  /**
	   * O
	   */
	  O: 79,
	  /**
	   * P
	   */
	  P: 80,
	  /**
	   * Q
	   */
	  Q: 81,
	  /**
	   * R
	   */
	  R: 82,
	  /**
	   * S
	   */
	  S: 83,
	  /**
	   * T
	   */
	  T: 84,
	  /**
	   * U
	   */
	  U: 85,
	  /**
	   * V
	   */
	  V: 86,
	  /**
	   * W
	   */
	  W: 87,
	  /**
	   * X
	   */
	  X: 88,
	  /**
	   * Y
	   */
	  Y: 89,
	  /**
	   * Z
	   */
	  Z: 90,
	  /**
	   * META
	   */
	  META: 91, // WIN_KEY_LEFT
	  /**
	   * WIN_KEY_RIGHT
	   */
	  WIN_KEY_RIGHT: 92,
	  /**
	   * CONTEXT_MENU
	   */
	  CONTEXT_MENU: 93,
	  /**
	   * NUM_ZERO
	   */
	  NUM_ZERO: 96,
	  /**
	   * NUM_ONE
	   */
	  NUM_ONE: 97,
	  /**
	   * NUM_TWO
	   */
	  NUM_TWO: 98,
	  /**
	   * NUM_THREE
	   */
	  NUM_THREE: 99,
	  /**
	   * NUM_FOUR
	   */
	  NUM_FOUR: 100,
	  /**
	   * NUM_FIVE
	   */
	  NUM_FIVE: 101,
	  /**
	   * NUM_SIX
	   */
	  NUM_SIX: 102,
	  /**
	   * NUM_SEVEN
	   */
	  NUM_SEVEN: 103,
	  /**
	   * NUM_EIGHT
	   */
	  NUM_EIGHT: 104,
	  /**
	   * NUM_NINE
	   */
	  NUM_NINE: 105,
	  /**
	   * NUM_MULTIPLY
	   */
	  NUM_MULTIPLY: 106,
	  /**
	   * NUM_PLUS
	   */
	  NUM_PLUS: 107,
	  /**
	   * NUM_MINUS
	   */
	  NUM_MINUS: 109,
	  /**
	   * NUM_PERIOD
	   */
	  NUM_PERIOD: 110,
	  /**
	   * NUM_DIVISION
	   */
	  NUM_DIVISION: 111,
	  /**
	   * F1
	   */
	  F1: 112,
	  /**
	   * F2
	   */
	  F2: 113,
	  /**
	   * F3
	   */
	  F3: 114,
	  /**
	   * F4
	   */
	  F4: 115,
	  /**
	   * F5
	   */
	  F5: 116,
	  /**
	   * F6
	   */
	  F6: 117,
	  /**
	   * F7
	   */
	  F7: 118,
	  /**
	   * F8
	   */
	  F8: 119,
	  /**
	   * F9
	   */
	  F9: 120,
	  /**
	   * F10
	   */
	  F10: 121,
	  /**
	   * F11
	   */
	  F11: 122,
	  /**
	   * F12
	   */
	  F12: 123,
	  /**
	   * NUMLOCK
	   */
	  NUMLOCK: 144,
	  /**
	   * SEMICOLON
	   */
	  SEMICOLON: 186, // needs localization
	  /**
	   * DASH
	   */
	  DASH: 189, // needs localization
	  /**
	   * EQUALS
	   */
	  EQUALS: 187, // needs localization
	  /**
	   * COMMA
	   */
	  COMMA: 188, // needs localization
	  /**
	   * PERIOD
	   */
	  PERIOD: 190, // needs localization
	  /**
	   * SLASH
	   */
	  SLASH: 191, // needs localization
	  /**
	   * APOSTROPHE
	   */
	  APOSTROPHE: 192, // needs localization
	  /**
	   * SINGLE_QUOTE
	   */
	  SINGLE_QUOTE: 222, // needs localization
	  /**
	   * OPEN_SQUARE_BRACKET
	   */
	  OPEN_SQUARE_BRACKET: 219, // needs localization
	  /**
	   * BACKSLASH
	   */
	  BACKSLASH: 220, // needs localization
	  /**
	   * CLOSE_SQUARE_BRACKET
	   */
	  CLOSE_SQUARE_BRACKET: 221, // needs localization
	  /**
	   * WIN_KEY
	   */
	  WIN_KEY: 224,
	  /**
	   * MAC_FF_META
	   */
	  MAC_FF_META: 224, // Firefox (Gecko) fires this for the meta key instead of 91
	  /**
	   * WIN_IME
	   */
	  WIN_IME: 229
	};

	/*
	 whether text and modified key is entered at the same time.
	 */
	KeyCode.isTextModifyingKeyEvent = function isTextModifyingKeyEvent(e) {
	  var keyCode = e.keyCode;
	  if (e.altKey && !e.ctrlKey || e.metaKey ||
	  // Function keys don't generate text
	  keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
	    return false;
	  }

	  // The following keys are quite harmless, even in combination with
	  // CTRL, ALT or SHIFT.
	  switch (keyCode) {
	    case KeyCode.ALT:
	    case KeyCode.CAPS_LOCK:
	    case KeyCode.CONTEXT_MENU:
	    case KeyCode.CTRL:
	    case KeyCode.DOWN:
	    case KeyCode.END:
	    case KeyCode.ESC:
	    case KeyCode.HOME:
	    case KeyCode.INSERT:
	    case KeyCode.LEFT:
	    case KeyCode.MAC_FF_META:
	    case KeyCode.META:
	    case KeyCode.NUMLOCK:
	    case KeyCode.NUM_CENTER:
	    case KeyCode.PAGE_DOWN:
	    case KeyCode.PAGE_UP:
	    case KeyCode.PAUSE:
	    case KeyCode.PRINT_SCREEN:
	    case KeyCode.RIGHT:
	    case KeyCode.SHIFT:
	    case KeyCode.UP:
	    case KeyCode.WIN_KEY:
	    case KeyCode.WIN_KEY_RIGHT:
	      return false;
	    default:
	      return true;
	  }
	};

	/*
	 whether character is entered.
	 */
	KeyCode.isCharacterKey = function isCharacterKey(keyCode) {
	  if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
	    return true;
	  }

	  if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
	    return true;
	  }

	  if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
	    return true;
	  }

	  // Safari sends zero key code for non-latin characters.
	  if (window.navigation.userAgent.indexOf('WebKit') !== -1 && keyCode === 0) {
	    return true;
	  }

	  switch (keyCode) {
	    case KeyCode.SPACE:
	    case KeyCode.QUESTION_MARK:
	    case KeyCode.NUM_PLUS:
	    case KeyCode.NUM_MINUS:
	    case KeyCode.NUM_PERIOD:
	    case KeyCode.NUM_DIVISION:
	    case KeyCode.SEMICOLON:
	    case KeyCode.DASH:
	    case KeyCode.EQUALS:
	    case KeyCode.COMMA:
	    case KeyCode.PERIOD:
	    case KeyCode.SLASH:
	    case KeyCode.APOSTROPHE:
	    case KeyCode.SINGLE_QUOTE:
	    case KeyCode.OPEN_SQUARE_BRACKET:
	    case KeyCode.BACKSLASH:
	    case KeyCode.CLOSE_SQUARE_BRACKET:
	      return true;
	    default:
	      return false;
	  }
	};

		module.exports = KeyCode;

/***/ },
/* 22 */
[813, 23],
/* 23 */
[814, 24],
/* 24 */
[815, 25, 26, 27],
/* 25 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	/**
	 * lodash 3.9.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	}

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

		module.exports = getNative;

/***/ },
/* 26 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	/**
	 * lodash 3.0.8 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function (object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value)) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8 which returns 'object' for typed array and weak map constructors,
	  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	}

		module.exports = isArguments;

/***/ },
/* 27 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	/**
	 * lodash 3.0.4 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]',
	    funcTag = '[object Function]';

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	}

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function (value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

		module.exports = isArray;

/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @returns {function|null}
	 */
	"use strict";

	function createChainedFunction() {
	  var args = arguments;
	  return function chainedFunction() {
	    for (var i = 0; i < args.length; i++) {
	      if (args[i] && args[i].apply) {
	        args[i].apply(this, arguments);
	      }
	    }
	  };
	}

		module.exports = createChainedFunction;

/***/ },
/* 29 */
[816, 30],
/* 30 */
[817, 31],
/* 31 */
[818, 32, 33],
/* 32 */
/***/ function(module, exports) {

	/**
	 * @ignore
	 * base event object for custom and dom event.
	 * @author yiminghe@gmail.com
	 */

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	function returnFalse() {
	  return false;
	}

	function returnTrue() {
	  return true;
	}

	function EventBaseObject() {
	  this.timeStamp = Date.now();
	  this.target = undefined;
	  this.currentTarget = undefined;
	}

	EventBaseObject.prototype = {
	  isEventObject: 1,

	  constructor: EventBaseObject,

	  isDefaultPrevented: returnFalse,

	  isPropagationStopped: returnFalse,

	  isImmediatePropagationStopped: returnFalse,

	  preventDefault: function preventDefault() {
	    this.isDefaultPrevented = returnTrue;
	  },

	  stopPropagation: function stopPropagation() {
	    this.isPropagationStopped = returnTrue;
	  },

	  stopImmediatePropagation: function stopImmediatePropagation() {
	    this.isImmediatePropagationStopped = returnTrue;
	    // fixed 1.2
	    // call stopPropagation implicitly
	    this.stopPropagation();
	  },

	  halt: function halt(immediate) {
	    if (immediate) {
	      this.stopImmediatePropagation();
	    } else {
	      this.stopPropagation();
	    }
	    this.preventDefault();
	  }
	};

	exports["default"] = EventBaseObject;
	module.exports = exports["default"];

/***/ },
/* 33 */
/***/ function(module, exports) {

	/* eslint-disable no-unused-vars */
	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
		};

/***/ },
/* 34 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function contains(root, n) {
	  var node = n;
	  while (node) {
	    if (node === root) {
	      return true;
	    }
	    node = node.parentNode;
	  }

	  return false;
		};

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(3);

	module.exports = function toArray(children) {
	  var ret = [];
	  React.Children.forEach(children, function each(c) {
	    ret.push(c);
	  });
	  return ret;
		};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(3);

	function mirror(o) {
	  return o;
	}

	module.exports = function mapSelf(children) {
	  // return ReactFragment
	  return React.Children.map(children, mirror);
		};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _DateTHead = __webpack_require__(38);

	var _DateTHead2 = _interopRequireDefault(_DateTHead);

	var _DateTBody = __webpack_require__(40);

	var _DateTBody2 = _interopRequireDefault(_DateTBody);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} // customized rc-calendar https://github.com/react-component/calendar/blob/master/

	var DateTable = function (_React$Component) {
	  _inherits(DateTable, _React$Component);

	  function DateTable() {
	    _classCallCheck(this, DateTable);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DateTable.prototype.render = function render() {
	    var props = this.props;
	    var prefixCls = props.prefixCls;
	    return _react2["default"].createElement('table', { className: prefixCls + '-table', cellSpacing: '0', role: 'grid' }, _react2["default"].createElement(_DateTHead2["default"], props), _react2["default"].createElement(_DateTBody2["default"], props));
	  };

	  return DateTable;
	}(_react2["default"].Component);

	exports["default"] = DateTable;
	module.exports = exports['default'];

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _DateConstants = __webpack_require__(39);

	var _DateConstants2 = _interopRequireDefault(_DateConstants);

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var DateTHead = function (_React$Component) {
	  _inherits(DateTHead, _React$Component);

	  function DateTHead() {
	    _classCallCheck(this, DateTHead);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DateTHead.prototype.render = function render() {
	    var props = this.props;
	    var value = props.value;
	    var locale = props.locale;
	    var prefixCls = props.prefixCls;
	    var veryShortWeekdays = [];
	    var weekDays = [];
	    var firstDayOfWeek = value.getFirstDayOfWeek();
	    var showWeekNumberEl = undefined;

	    for (var dateColIndex = 0; dateColIndex < _DateConstants2["default"].DATE_COL_COUNT; dateColIndex++) {
	      var index = (firstDayOfWeek + dateColIndex) % _DateConstants2["default"].DATE_COL_COUNT;
	      veryShortWeekdays[dateColIndex] = locale.format.veryShortWeekdays[index];
	      weekDays[dateColIndex] = locale.format.weekdays[index];
	    }

	    if (props.showWeekNumber) {
	      showWeekNumberEl = _react2["default"].createElement('th', {
	        role: 'columnheader',
	        className: prefixCls + '-column-header ' + prefixCls + '-week-number-header'
	      }, _react2["default"].createElement('span', { className: prefixCls + '-column-header-inner' }, 'x'));
	    }
	    var weekDaysEls = weekDays.map(function (day, xindex) {
	      var _classnames;

	      var spanCls = (0, _classnames3["default"])((_classnames = {}, _classnames[prefixCls + '-column-header-inner'] = true, _classnames.weekend = xindex === 0 || xindex === 6, _classnames));
	      return _react2["default"].createElement('th', {
	        key: xindex,
	        role: 'columnheader',
	        title: day,
	        className: prefixCls + '-column-header'
	      }, _react2["default"].createElement('span', { className: spanCls }, veryShortWeekdays[xindex]));
	    });
	    return _react2["default"].createElement('thead', null, _react2["default"].createElement('tr', { role: 'row' }, showWeekNumberEl, weekDaysEls));
	  };

	  return DateTHead;
	}(_react2["default"].Component);

	exports["default"] = DateTHead;
	module.exports = exports['default'];

/***/ },
/* 39 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = {
	  DATE_ROW_COUNT: 6,
	  DATE_COL_COUNT: 7
	};
		module.exports = exports['default'];

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _DateConstants = __webpack_require__(41);

	var _DateConstants2 = _interopRequireDefault(_DateConstants);

	var _util = __webpack_require__(42);

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	// customized rc-calendar https://github.com/react-component/calendar/blob/master/

	function isSameDay(one, two) {
	  return one && two && one.compareToDay(two) === 0;
	}

	function beforeCurrentMonthYear(current, today) {
	  if (current.getYear() < today.getYear()) {
	    return 1;
	  }
	  return current.getYear() === today.getYear() && current.getMonth() < today.getMonth();
	}

	function afterCurrentMonthYear(current, today) {
	  if (current.getYear() > today.getYear()) {
	    return 1;
	  }
	  return current.getYear() === today.getYear() && current.getMonth() > today.getMonth();
	}

	function getIdFromDate(date) {
	  return 'rc-calendar-' + date.getYear() + '-' + date.getMonth() + '-' + date.getDayOfMonth();
	}

	function noop() {}

	function handleDayClick(current) {
	  this.props.onSelect(current);
	}

	function handleCellMouseEnter(current) {
	  this.props.onDayHover(current);
	}

	var DateTBody = _react2["default"].createClass({
	  displayName: 'DateTBody',

	  propTypes: {
	    contentRender: _react.PropTypes.func,
	    dateRender: _react.PropTypes.func,
	    disabledDate: _react.PropTypes.func,
	    prefixCls: _react.PropTypes.string,
	    selectedValue: _react.PropTypes.object,
	    value: _react.PropTypes.object,
	    showWeekNumber: _react.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onDayHover: noop
	    };
	  },
	  render: function render() {
	    var props = this.props;
	    var contentRender = props.contentRender;
	    var prefixCls = props.prefixCls;
	    var selectedValue = props.selectedValue;
	    var value = props.value;
	    var showWeekNumber = props.showWeekNumber;
	    var dateRender = props.dateRender;
	    var disabledDate = props.disabledDate;

	    var iIndex = undefined;
	    var jIndex = undefined;
	    var current = undefined;
	    var dateTable = [];
	    var today = value.clone();
	    var cellClass = prefixCls + '-cell';
	    var weekNumberCellClass = prefixCls + '-week-number-cell';
	    var dateClass = prefixCls + '-date';
	    var todayClass = prefixCls + '-today';
	    var selectedClass = prefixCls + '-selected-day';
	    var inRangeClass = prefixCls + '-in-range-cell';
	    var lastMonthDayClass = prefixCls + '-last-month-cell';
	    var nextMonthDayClass = prefixCls + '-next-month-btn-day';
	    var disabledClass = prefixCls + '-disabled-cell';
	    var firstDisableClass = prefixCls + '-disabled-cell-first-of-row';
	    var lastDisableClass = prefixCls + '-disabled-cell-last-of-row';
	    today.setTime(Date.now());
	    var month1 = value.clone();
	    month1.set(value.getYear(), value.getMonth(), 1);
	    var day = month1.getDayOfWeek();
	    var lastMonthDiffDay = (day + 7 - value.getFirstDayOfWeek()) % 7;
	    // calculate last month
	    var lastMonth1 = month1.clone();
	    lastMonth1.addDayOfMonth(0 - lastMonthDiffDay);
	    var passed = 0;
	    for (iIndex = 0; iIndex < _DateConstants2["default"].DATE_ROW_COUNT; iIndex++) {
	      for (jIndex = 0; jIndex < _DateConstants2["default"].DATE_COL_COUNT; jIndex++) {
	        current = lastMonth1;
	        if (passed) {
	          current = current.clone();
	          current.addDayOfMonth(passed);
	        }
	        dateTable.push(current);
	        passed++;
	      }
	    }
	    var tableHtml = [];
	    passed = 0;
	    for (iIndex = 0; iIndex < _DateConstants2["default"].DATE_ROW_COUNT; iIndex++) {
	      var weekNumberCell = undefined;
	      var dateCells = [];
	      if (showWeekNumber) {
	        weekNumberCell = _react2["default"].createElement('td', {
	          key: dateTable[passed].getWeekOfYear(),
	          role: 'gridcell',
	          className: weekNumberCellClass
	        }, dateTable[passed].getWeekOfYear());
	      }
	      for (jIndex = 0; jIndex < _DateConstants2["default"].DATE_COL_COUNT; jIndex++) {
	        var next = null;
	        var last = null;
	        current = dateTable[passed];
	        if (jIndex < _DateConstants2["default"].DATE_COL_COUNT - 1) {
	          next = dateTable[passed + 1];
	        }
	        if (jIndex > 0) {
	          last = dateTable[passed - 1];
	        }
	        var cls = cellClass;
	        var disabled = false;
	        var selected = false;

	        if (isSameDay(current, today)) {
	          cls += ' ' + todayClass;
	        }

	        var isBeforeCurrentMonthYear = beforeCurrentMonthYear(current, value);
	        var isAfterCurrentMonthYear = afterCurrentMonthYear(current, value);

	        if (selectedValue && Array.isArray(selectedValue)) {
	          if (!isBeforeCurrentMonthYear && !isAfterCurrentMonthYear) {
	            var startValue = selectedValue[0];
	            var endValue = selectedValue[1];
	            if (startValue) {
	              if (isSameDay(current, startValue)) {
	                selected = true;
	              }
	            }
	            if (startValue && endValue) {
	              if (isSameDay(current, endValue) && !selectedValue.hovering) {
	                selected = true;
	              } else if (current.compareToDay(startValue) > 0 && current.compareToDay(endValue) < 0) {
	                cls += ' ' + inRangeClass;
	              }
	            }
	          }
	        } else if (isSameDay(current, selectedValue)) {
	          selected = true;
	        }
	        if (isBeforeCurrentMonthYear) {
	          cls += ' ' + lastMonthDayClass;
	        }
	        if (isAfterCurrentMonthYear) {
	          cls += ' ' + nextMonthDayClass;
	        }

	        if (disabledDate) {
	          if (disabledDate(current, value)) {
	            disabled = true;

	            if (!last || !disabledDate(last, value)) {
	              cls += ' ' + firstDisableClass;
	            }

	            if (!next || !disabledDate(next, value)) {
	              cls += ' ' + lastDisableClass;
	            }
	          }
	        }

	        if (selected) {
	          cls += ' ' + selectedClass;
	        }

	        if (disabled) {
	          cls += ' ' + disabledClass;
	        }

	        var dateHtml = undefined;
	        if (dateRender) {
	          dateHtml = dateRender(current, value);
	        } else {
	          var _classnames;

	          var content = contentRender ? contentRender(current, value) : current.getDayOfMonth();
	          var dayOfWeek = current.getDayOfWeek();
	          dateHtml = _react2["default"].createElement('div', {
	            key: getIdFromDate(current),
	            className: (0, _classnames3["default"])((_classnames = {}, _classnames[dateClass] = true, _classnames.weekend = dayOfWeek == 0 || dayOfWeek == 6, _classnames)),
	            'aria-selected': selected,
	            'aria-disabled': disabled
	          }, content);
	        }

	        dateCells.push(_react2["default"].createElement('td', {
	          key: passed,
	          onClick: disabled ? noop : handleDayClick.bind(this, current),
	          onMouseEnter: disabled ? noop : handleCellMouseEnter.bind(this, current),
	          role: 'gridcell',
	          title: (0, _util.getTitleString)(current), className: cls
	        }, dateHtml));

	        passed++;
	      }
	      tableHtml.push(_react2["default"].createElement('tr', {
	        key: iIndex,
	        role: 'row'
	      }, weekNumberCell, dateCells));
	    }
	    return _react2["default"].createElement('tbody', { className: prefixCls + 'tbody' }, tableHtml);
	  }
	});

	exports["default"] = DateTBody;
	module.exports = exports['default'];

/***/ },
/* 41 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  DATE_ROW_COUNT: 6,
	  DATE_COL_COUNT: 7
	};
		module.exports = exports['default'];

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	exports.getTodayTime = getTodayTime;
	exports.getTitleString = getTitleString;
	exports.getTodayTimeStr = getTodayTimeStr;
	exports.getFormatter = getFormatter;
	exports.syncTime = syncTime;
	exports.getTimeConfig = getTimeConfig;
	exports.isTimeValidByConfig = isTimeValidByConfig;
	exports.isTimeValid = isTimeValid;
	exports.isAllowedDate = isAllowedDate;

	var _gregorianCalendarFormat = __webpack_require__(43);

	var _gregorianCalendarFormat2 = _interopRequireDefault(_gregorianCalendarFormat);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	var defaultDisabledTime = {
	  disabledHours: function disabledHours() {
	    return [];
	  },
	  disabledMinutes: function disabledMinutes() {
	    return [];
	  },
	  disabledSeconds: function disabledSeconds() {
	    return [];
	  }
	};

	function getTodayTime(value) {
	  var today = value.clone();
	  today.setTime(Date.now());
	  return today;
	}

	function getTitleString(value) {
	  return value.getYear() + '-' + (value.getMonth() + 1) + '-' + value.getDayOfMonth();
	}

	function getTodayTimeStr(value) {
	  var today = getTodayTime(value);
	  return getTitleString(today);
	}

	function getFormatter(format, locale) {
	  if (typeof format === 'string') {
	    return new _gregorianCalendarFormat2["default"](format, locale.format);
	  }
	  return format;
	}

	function syncTime(from, to) {
	  to.setHourOfDay(from.getHourOfDay());
	  to.setMinutes(from.getMinutes());
	  to.setSeconds(from.getSeconds());
	}

	function getTimeConfig(value, disabledTime) {
	  var disabledTimeConfig = disabledTime ? disabledTime(value) : {};
	  disabledTimeConfig = _extends({}, defaultDisabledTime, disabledTimeConfig);
	  return disabledTimeConfig;
	}

	function isTimeValidByConfig(value, disabledTimeConfig) {
	  var invalidTime = false;
	  if (value) {
	    var hour = value.getHourOfDay();
	    var minutes = value.getMinutes();
	    var seconds = value.getSeconds();
	    var disabledHours = disabledTimeConfig.disabledHours();
	    if (disabledHours.indexOf(hour) === -1) {
	      var disabledMinutes = disabledTimeConfig.disabledMinutes(hour);
	      if (disabledMinutes.indexOf(minutes) === -1) {
	        var disabledSeconds = disabledTimeConfig.disabledSeconds(hour, minutes);
	        invalidTime = disabledSeconds.indexOf(seconds) !== -1;
	      } else {
	        invalidTime = true;
	      }
	    } else {
	      invalidTime = true;
	    }
	  }
	  return !invalidTime;
	}

	function isTimeValid(value, disabledTime) {
	  var disabledTimeConfig = getTimeConfig(value, disabledTime);
	  return isTimeValidByConfig(value, disabledTimeConfig);
	}

	function isAllowedDate(value, disabledDate, disabledTime) {
	  if (disabledDate) {
	    if (disabledDate(value)) {
	      return false;
	    }
	  }
	  if (disabledTime) {
	    if (!isTimeValid(value, disabledTime)) {
	      return false;
	    }
	  }
	  return true;
		}

/***/ },
/* 43 */
[819, 12, 44, 45],
/* 44 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  eras: ['BC', 'AD'],
	  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
	  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
	  weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
	  shortWeekdays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
	  veryShortWeekdays: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
	  ampms: ['AM', 'PM'],
	  datePatterns: ['EEEE, MMMM d, yyyy', 'MMMM d, yyyy', 'MMM d, yyyy', 'M/d/yy'],
	  timePatterns: ['h:mm:ss a \'GMT\'Z', 'h:mm:ss a', 'h:mm:ss a', 'h:mm a'],
	  dateTimePattern: '{date} {time}'
		};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function warning() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function warning(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error('The warning format should be able to uniquely identify this ' + 'warning. Please, use a more descriptive format than: ' + format);
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

		module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(46)))

/***/ },
/* 46 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _MonthPanel = __webpack_require__(48);

	var _MonthPanel2 = _interopRequireDefault(_MonthPanel);

	var _index = __webpack_require__(42);

	var _YearPanel = __webpack_require__(49);

	var _YearPanel2 = _interopRequireDefault(_YearPanel);

	var _rcUtil = __webpack_require__(16);

	var _rcUtil2 = _interopRequireDefault(_rcUtil);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	var toFragment = _rcUtil2["default"].Children.mapSelf;

	function goMonth(direction) {
	  var next = this.props.value.clone();
	  next.addMonth(direction);
	  this.props.onValueChange(next);
	}

	function goYear(direction) {
	  var next = this.props.value.clone();
	  next.addYear(direction);
	  this.props.onValueChange(next);
	}

	var CalendarHeader = _react2["default"].createClass({
	  displayName: 'CalendarHeader',

	  propTypes: {
	    enablePrev: _react.PropTypes.any,
	    enableNext: _react.PropTypes.any,
	    prefixCls: _react.PropTypes.string,
	    locale: _react.PropTypes.object,
	    value: _react.PropTypes.object,
	    onValueChange: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      enableNext: 1,
	      enablePrev: 1
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    this.yearFormatter = (0, _index.getFormatter)(props.locale.yearFormat, props.locale);
	    this.monthFormatter = (0, _index.getFormatter)(props.locale.monthFormat, props.locale);
	    this.nextMonth = goMonth.bind(this, 1);
	    this.previousMonth = goMonth.bind(this, -1);
	    this.nextYear = goYear.bind(this, 1);
	    this.previousYear = goYear.bind(this, -1);
	    return {};
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var locale = this.props.locale;
	    var nextLocale = nextProps.locale;

	    if (nextLocale !== locale) {
	      this.yearFormatter = (0, _index.getFormatter)(nextLocale.yearFormat, nextLocale);
	      this.monthFormatter = (0, _index.getFormatter)(nextLocale.monthFormat, nextLocale);
	    }
	  },
	  onSelect: function onSelect(value) {
	    this.setState({
	      showMonthPanel: 0,
	      showYearPanel: 0
	    });
	    this.props.onValueChange(value);
	  },
	  getMonthYearElement: function getMonthYearElement() {
	    var props = this.props;
	    var prefixCls = props.prefixCls;
	    var locale = props.locale;
	    var value = this.props.value;
	    var monthBeforeYear = locale.monthBeforeYear;
	    var selectClassName = prefixCls + '-' + (monthBeforeYear ? 'my-select' : 'ym-select');
	    var year = _react2["default"].createElement('a', {
	      className: prefixCls + '-year-select',
	      role: 'button',
	      onClick: this.showYearPanel,
	      title: locale.monthSelect
	    }, this.yearFormatter.format(value));
	    var month = _react2["default"].createElement('a', {
	      className: prefixCls + '-month-select',
	      role: 'button',
	      onClick: this.showMonthPanel,
	      title: locale.monthSelect
	    }, this.monthFormatter.format(value));
	    var my = [];
	    if (monthBeforeYear) {
	      my = [month, year];
	    } else {
	      my = [year, month];
	    }
	    return _react2["default"].createElement('span', { className: selectClassName }, toFragment(my));
	  },
	  showIf: function showIf(condition, el) {
	    return condition ? el : null;
	  },
	  showMonthPanel: function showMonthPanel() {
	    this.setState({
	      showMonthPanel: 1,
	      showYearPanel: 0
	    });
	  },
	  showYearPanel: function showYearPanel() {
	    this.setState({
	      showMonthPanel: 0,
	      showYearPanel: 1
	    });
	  },
	  render: function render() {
	    var props = this.props;
	    var enableNext = props.enableNext;
	    var enablePrev = props.enablePrev;
	    var prefixCls = props.prefixCls;
	    var locale = props.locale;
	    var value = props.value;

	    var state = this.state;
	    var PanelClass = null;
	    if (state.showMonthPanel) {
	      PanelClass = _MonthPanel2["default"];
	    } else if (state.showYearPanel) {
	      PanelClass = _YearPanel2["default"];
	    }
	    var panel = undefined;
	    if (PanelClass) {
	      panel = _react2["default"].createElement(PanelClass, {
	        locale: locale,
	        defaultValue: value,
	        rootPrefixCls: prefixCls,
	        onSelect: this.onSelect
	      });
	    }
	    return _react2["default"].createElement('div', { className: prefixCls + '-header' }, _react2["default"].createElement('div', { style: { position: 'relative' } }, this.showIf(enablePrev, _react2["default"].createElement('a', {
	      className: prefixCls + '-prev-year-btn',
	      role: 'button',
	      onClick: this.previousYear,
	      title: locale.previousYear
	    }, '«')), this.showIf(enablePrev, _react2["default"].createElement('a', {
	      className: prefixCls + '-prev-month-btn',
	      role: 'button',
	      onClick: this.previousMonth,
	      title: locale.previousMonth
	    }, '‹')), this.getMonthYearElement(), this.showIf(enableNext, _react2["default"].createElement('a', {
	      className: prefixCls + '-next-month-btn',
	      onClick: this.nextMonth,
	      title: locale.nextMonth
	    }, '›')), this.showIf(enableNext, _react2["default"].createElement('a', {
	      className: prefixCls + '-next-year-btn',
	      onClick: this.nextYear,
	      title: locale.nextYear
	    }, '»'))), panel);
	  }
	});

	exports["default"] = CalendarHeader;
	module.exports = exports['default'];

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _YearPanel = __webpack_require__(49);

	var _YearPanel2 = _interopRequireDefault(_YearPanel);

	var _MonthTable = __webpack_require__(51);

	var _MonthTable2 = _interopRequireDefault(_MonthTable);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function goYear(direction) {
	  var next = this.state.value.clone();
	  next.addYear(direction);
	  this.setAndChangeValue(next);
	}

	function noop() {}

	var MonthPanel = _react2["default"].createClass({
	  displayName: 'MonthPanel',

	  propTypes: {
	    onChange: _react.PropTypes.func,
	    disabledDate: _react.PropTypes.func,
	    onSelect: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onChange: noop,
	      onSelect: noop
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    // bind methods
	    this.nextYear = goYear.bind(this, 1);
	    this.previousYear = goYear.bind(this, -1);
	    this.prefixCls = props.rootPrefixCls + '-month-panel';
	    return {
	      value: props.value || props.defaultValue
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ('value' in nextProps) {
	      this.setState({
	        value: nextProps.value
	      });
	    }
	  },
	  onYearPanelSelect: function onYearPanelSelect(current) {
	    this.setState({
	      showYearPanel: 0
	    });
	    this.setAndChangeValue(current);
	  },
	  setAndChangeValue: function setAndChangeValue(value) {
	    this.setValue(value);
	    this.props.onChange(value);
	  },
	  setAndSelectValue: function setAndSelectValue(value) {
	    this.setValue(value);
	    this.props.onSelect(value);
	  },
	  setValue: function setValue(value) {
	    if (!('value' in this.props)) {
	      this.setState({
	        value: value
	      });
	    }
	  },
	  showYearPanel: function showYearPanel() {
	    this.setState({
	      showYearPanel: 1
	    });
	  },
	  render: function render() {
	    var props = this.props;
	    var value = this.state.value;
	    var locale = props.locale;
	    var year = value.getYear();
	    var prefixCls = this.prefixCls;
	    var yearPanel = undefined;
	    if (this.state.showYearPanel) {
	      yearPanel = _react2["default"].createElement(_YearPanel2["default"], {
	        locale: locale,
	        value: value,
	        rootPrefixCls: props.rootPrefixCls,
	        onSelect: this.onYearPanelSelect
	      });
	    }
	    return _react2["default"].createElement('div', { className: prefixCls, style: props.style }, _react2["default"].createElement('div', null, _react2["default"].createElement('div', { className: prefixCls + '-header' }, _react2["default"].createElement('a', {
	      className: prefixCls + '-prev-year-btn',
	      role: 'button',
	      onClick: this.previousYear,
	      title: locale.previousYear
	    }, '«'), _react2["default"].createElement('a', {
	      className: prefixCls + '-year-select',
	      role: 'button',
	      onClick: this.showYearPanel,
	      title: locale.yearSelect
	    }, _react2["default"].createElement('span', { className: prefixCls + '-year-select-content' }, year), _react2["default"].createElement('span', { className: prefixCls + '-year-select-arrow' }, 'x')), _react2["default"].createElement('a', {
	      className: prefixCls + '-next-year-btn',
	      role: 'button',
	      onClick: this.nextYear,
	      title: locale.nextYear
	    }, '»')), _react2["default"].createElement('div', { className: prefixCls + '-body' }, _react2["default"].createElement(_MonthTable2["default"], {
	      disabledDate: props.disabledDate,
	      onSelect: this.setAndSelectValue,
	      locale: locale,
	      value: value,
	      prefixCls: prefixCls
	    }))), yearPanel);
	  }
	});

	exports["default"] = MonthPanel;
	module.exports = exports['default'];

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _DecadePanel = __webpack_require__(50);

	var _DecadePanel2 = _interopRequireDefault(_DecadePanel);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var ROW = 4;
	var COL = 3;

	function goYear(direction) {
	  var value = this.state.value.clone();
	  value.addYear(direction);
	  this.setState({
	    value: value
	  });
	}

	function chooseYear(year) {
	  var value = this.state.value.clone();
	  value.setYear(year);
	  value.rollSetMonth(this.state.value.getMonth());
	  this.props.onSelect(value);
	}

	var YearPanel = function (_React$Component) {
	  _inherits(YearPanel, _React$Component);

	  function YearPanel(props) {
	    _classCallCheck(this, YearPanel);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(YearPanel).call(this, props));

	    _this.prefixCls = props.rootPrefixCls + '-year-panel';
	    _this.state = {
	      value: props.value || props.defaultValue
	    };
	    _this.nextDecade = goYear.bind(_this, 10);
	    _this.previousDecade = goYear.bind(_this, -10);
	    ['showDecadePanel', 'onDecadePanelSelect'].forEach(function (method) {
	      _this[method] = _this[method].bind(_this);
	    });
	    return _this;
	  }

	  _createClass(YearPanel, [{
	    key: 'onDecadePanelSelect',
	    value: function onDecadePanelSelect(current) {
	      this.setState({
	        value: current,
	        showDecadePanel: 0
	      });
	    }
	  }, {
	    key: 'getYears',
	    value: function getYears() {
	      var value = this.state.value;
	      var currentYear = value.getYear();
	      var startYear = parseInt(currentYear / 10, 10) * 10;
	      var previousYear = startYear - 1;
	      var endYear = startYear + 9;
	      var years = [];
	      var index = 0;
	      for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
	        years[rowIndex] = [];
	        for (var colIndex = 0; colIndex < COL; colIndex++) {
	          var year = previousYear + index;
	          var content = undefined;
	          if (year < startYear) {
	            content = '';
	          } else if (year > endYear) {
	            content = '';
	          } else {
	            content = String(year);
	          }
	          years[rowIndex][colIndex] = {
	            content: content,
	            year: year,
	            title: content
	          };
	          index++;
	        }
	      }
	      return years;
	    }
	  }, {
	    key: 'showDecadePanel',
	    value: function showDecadePanel() {
	      this.setState({
	        showDecadePanel: 1
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var props = this.props;
	      var value = this.state.value;
	      var locale = props.locale;
	      var years = this.getYears();
	      var currentYear = value.getYear();
	      var startYear = parseInt(currentYear / 10, 10) * 10;
	      var endYear = startYear + 9;
	      var prefixCls = this.prefixCls;

	      var yeasEls = years.map(function (row, index) {
	        var tds = row.map(function (yearData) {
	          var _classNameMap;

	          var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, prefixCls + '-cell', 1), _defineProperty(_classNameMap, prefixCls + '-selected-cell', yearData.year === currentYear), _defineProperty(_classNameMap, prefixCls + '-last-decade-cell', yearData.year < startYear), _defineProperty(_classNameMap, prefixCls + '-next-decade-cell', yearData.year > endYear), _classNameMap);
	          var clickHandler = undefined;
	          if (yearData.year < startYear) {
	            clickHandler = _this2.previousDecade;
	          } else if (yearData.year > endYear) {
	            clickHandler = _this2.nextDecade;
	          } else {
	            clickHandler = chooseYear.bind(_this2, yearData.year);
	          }
	          return _react2["default"].createElement('td', {
	            role: 'gridcell',
	            title: yearData.title,
	            key: yearData.content,
	            onClick: clickHandler,
	            className: (0, _classnames2["default"])(classNameMap)
	          }, _react2["default"].createElement('a', {
	            className: prefixCls + '-year'
	          }, yearData.content));
	        });
	        return _react2["default"].createElement('tr', { key: index, role: 'row' }, tds);
	      });

	      var decadePanel = undefined;
	      if (this.state.showDecadePanel) {
	        decadePanel = _react2["default"].createElement(_DecadePanel2["default"], {
	          locale: locale,
	          value: value,
	          rootPrefixCls: props.rootPrefixCls,
	          onSelect: this.onDecadePanelSelect
	        });
	      }

	      return _react2["default"].createElement('div', { className: this.prefixCls }, _react2["default"].createElement('div', null, _react2["default"].createElement('div', { className: prefixCls + '-header' }, _react2["default"].createElement('a', {
	        className: prefixCls + '-prev-decade-btn',
	        role: 'button',
	        onClick: this.previousDecade,
	        title: locale.previousDecade
	      }, '«'), _react2["default"].createElement('a', {
	        className: prefixCls + '-decade-select',
	        role: 'button',
	        onClick: this.showDecadePanel,
	        title: locale.decadeSelect
	      }, _react2["default"].createElement('span', { className: prefixCls + '-decade-select-content' }, startYear, '-', endYear), _react2["default"].createElement('span', { className: prefixCls + '-decade-select-arrow' }, 'x')), _react2["default"].createElement('a', {
	        className: prefixCls + '-next-decade-btn',
	        role: 'button',
	        onClick: this.nextDecade,
	        title: locale.nextDecade
	      }, '»')), _react2["default"].createElement('div', { className: prefixCls + '-body' }, _react2["default"].createElement('table', { className: prefixCls + '-table', cellSpacing: '0', role: 'grid' }, _react2["default"].createElement('tbody', { className: prefixCls + '-tbody' }, yeasEls)))), decadePanel);
	    }
	  }]);

	  return YearPanel;
	}(_react2["default"].Component);

	exports["default"] = YearPanel;

	YearPanel.propTypes = {
	  rootPrefixCls: _react.PropTypes.string,
	  value: _react.PropTypes.object,
	  defaultValue: _react.PropTypes.object
	};

	YearPanel.defaultProps = {
	  onSelect: function onSelect() {}
	};
		module.exports = exports['default'];

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var ROW = 4;
	var COL = 3;

	function goYear(direction) {
	  var next = this.state.value.clone();
	  next.addYear(direction);
	  this.setState({
	    value: next
	  });
	}

	function chooseDecade(year, event) {
	  var next = this.state.value.clone();
	  next.setYear(year);
	  next.rollSetMonth(this.state.value.getMonth());
	  this.props.onSelect(next);
	  event.preventDefault();
	}

	var DecadePanel = function (_React$Component) {
	  _inherits(DecadePanel, _React$Component);

	  function DecadePanel(props) {
	    _classCallCheck(this, DecadePanel);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DecadePanel).call(this, props));

	    _this.state = {
	      value: props.value || props.defaultValue
	    };

	    // bind methods
	    _this.prefixCls = props.rootPrefixCls + '-decade-panel';
	    _this.nextCentury = goYear.bind(_this, 100);
	    _this.previousCentury = goYear.bind(_this, -100);
	    return _this;
	  }

	  _createClass(DecadePanel, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var value = this.state.value;
	      var locale = this.props.locale;
	      var currentYear = value.getYear();
	      var startYear = parseInt(currentYear / 100, 10) * 100;
	      var preYear = startYear - 10;
	      var endYear = startYear + 99;
	      var decades = [];
	      var index = 0;
	      var prefixCls = this.prefixCls;

	      for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
	        decades[rowIndex] = [];
	        for (var colIndex = 0; colIndex < COL; colIndex++) {
	          var startDecade = preYear + index * 10;
	          var endDecade = preYear + index * 10 + 9;
	          decades[rowIndex][colIndex] = {
	            startDecade: startDecade,
	            endDecade: endDecade
	          };
	          index++;
	        }
	      }

	      var decadesEls = decades.map(function (row, decadeIndex) {
	        var tds = row.map(function (decadeData) {
	          var _classNameMap;

	          var dStartDecade = decadeData.startDecade;
	          var dEndDecade = decadeData.endDecade;
	          var isLast = dStartDecade < startYear;
	          var isNext = dEndDecade > endYear;
	          var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, prefixCls + '-cell', 1), _defineProperty(_classNameMap, prefixCls + '-selected-cell', dStartDecade <= currentYear && currentYear <= dEndDecade), _defineProperty(_classNameMap, prefixCls + '-last-century-cell', isLast), _defineProperty(_classNameMap, prefixCls + '-next-century-cell', isNext), _classNameMap);
	          var content = undefined;
	          var clickHandler = undefined;
	          if (isLast) {
	            clickHandler = _this2.previousCentury;
	          } else if (isNext) {
	            clickHandler = _this2.nextCentury;
	          } else {
	            content = dStartDecade + '-' + dEndDecade;
	            clickHandler = chooseDecade.bind(_this2, dStartDecade);
	          }
	          return _react2["default"].createElement('td', {
	            key: dStartDecade,
	            onClick: clickHandler,
	            role: 'gridcell',
	            className: (0, _classnames2["default"])(classNameMap)
	          }, _react2["default"].createElement('a', {
	            className: prefixCls + '-decade'
	          }, content));
	        });
	        return _react2["default"].createElement('tr', { key: decadeIndex, role: 'row' }, tds);
	      });

	      return _react2["default"].createElement('div', { className: this.prefixCls }, _react2["default"].createElement('div', { className: prefixCls + '-header' }, _react2["default"].createElement('a', {
	        className: prefixCls + '-prev-century-btn',
	        role: 'button',
	        onClick: this.previousCentury,
	        title: locale.previousCentury
	      }, '«'), _react2["default"].createElement('div', { className: prefixCls + '-century' }, startYear, '-', endYear), _react2["default"].createElement('a', {
	        className: prefixCls + '-next-century-btn',
	        role: 'button',
	        onClick: this.nextCentury,
	        title: locale.nextCentury
	      }, '»')), _react2["default"].createElement('div', { className: prefixCls + '-body' }, _react2["default"].createElement('table', { className: prefixCls + '-table', cellSpacing: '0', role: 'grid' }, _react2["default"].createElement('tbody', { className: prefixCls + '-tbody' }, decadesEls))));
	    }
	  }]);

	  return DecadePanel;
	}(_react2["default"].Component);

	exports["default"] = DecadePanel;

	DecadePanel.propTypes = {
	  locale: _react.PropTypes.object,
	  value: _react.PropTypes.object,
	  defaultValue: _react.PropTypes.object,
	  rootPrefixCls: _react.PropTypes.string
	};

	DecadePanel.defaultProps = {
	  onSelect: function onSelect() {}
	};
		module.exports = exports['default'];

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var ROW = 4;
	var COL = 3;

	function chooseMonth(month) {
	  var next = this.state.value.clone();
	  next.rollSetMonth(month);
	  this.setAndSelectValue(next);
	}

	function noop() {}

	var MonthTable = function (_Component) {
	  _inherits(MonthTable, _Component);

	  function MonthTable(props) {
	    _classCallCheck(this, MonthTable);

	    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(MonthTable).call(this, props));

	    _this.state = {
	      value: props.value
	    };
	    return _this;
	  }

	  _createClass(MonthTable, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if ('value' in nextProps) {
	        this.setState({
	          value: nextProps.value
	        });
	      }
	    }
	  }, {
	    key: 'getMonths',
	    value: function getMonths() {
	      var props = this.props;
	      var value = this.state.value;
	      var current = value.clone();
	      var locale = props.locale;
	      var months = [];
	      var shortMonths = locale.format.shortMonths;
	      var index = 0;
	      for (var rowIndex = 0; rowIndex < ROW; rowIndex++) {
	        months[rowIndex] = [];
	        for (var colIndex = 0; colIndex < COL; colIndex++) {
	          current.rollSetMonth(index);
	          months[rowIndex][colIndex] = {
	            value: index,
	            content: shortMonths[index],
	            title: shortMonths[index]
	          };
	          index++;
	        }
	      }
	      return months;
	    }
	  }, {
	    key: 'setAndSelectValue',
	    value: function setAndSelectValue(value) {
	      this.setState({
	        value: value
	      });
	      this.props.onSelect(value);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var props = this.props;
	      var value = this.state.value;
	      var today = value.clone();
	      today.setTime(Date.now());
	      var months = this.getMonths();
	      var currentMonth = value.getMonth();
	      var prefixCls = props.prefixCls;
	      var locale = props.locale;
	      var contentRender = props.contentRender;
	      var cellRender = props.cellRender;

	      var monthsEls = months.map(function (month, index) {
	        var tds = month.map(function (monthData) {
	          var _classNameMap;

	          var disabled = false;
	          if (props.disabledDate) {
	            var testValue = value.clone();
	            testValue.rollSetMonth(monthData.value);
	            disabled = props.disabledDate(testValue);
	          }
	          var classNameMap = (_classNameMap = {}, _defineProperty(_classNameMap, prefixCls + '-cell', 1), _defineProperty(_classNameMap, prefixCls + '-cell-disabled', disabled), _defineProperty(_classNameMap, prefixCls + '-selected-cell', monthData.value === currentMonth), _defineProperty(_classNameMap, prefixCls + '-current-cell', today.getYear() === value.getYear() && monthData.value === today.getMonth()), _classNameMap);
	          var cellEl = undefined;
	          if (cellRender) {
	            var currentValue = value.clone();
	            currentValue.rollSetMonth(monthData.value);
	            cellEl = cellRender(currentValue, locale);
	          } else {
	            var content = undefined;
	            if (contentRender) {
	              var _currentValue = value.clone();
	              _currentValue.rollSetMonth(monthData.value);
	              content = contentRender(_currentValue, locale);
	            } else {
	              content = monthData.content;
	            }
	            cellEl = _react2["default"].createElement('div', { className: prefixCls + '-month' }, content);
	          }
	          return _react2["default"].createElement('td', {
	            role: 'gridcell',
	            key: monthData.value,
	            onClick: disabled ? null : chooseMonth.bind(_this2, monthData.value),
	            title: monthData.title,
	            className: (0, _classnames2["default"])(classNameMap)
	          }, cellEl);
	        });
	        return _react2["default"].createElement('tr', { key: index, role: 'row' }, tds);
	      });

	      return _react2["default"].createElement('table', { className: prefixCls + '-table', cellSpacing: '0', role: 'grid' }, _react2["default"].createElement('tbody', { className: prefixCls + '-tbody' }, monthsEls));
	    }
	  }]);

	  return MonthTable;
	}(_react.Component);

	MonthTable.defaultProps = {
	  onSelect: noop
	};
	MonthTable.propTypes = {
	  onSelect: _react.PropTypes.func,
	  cellRender: _react.PropTypes.func,
	  prefixCls: _react.PropTypes.string,
	  value: _react.PropTypes.object
	};
	exports["default"] = MonthTable;
	module.exports = exports['default'];

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcUtil = __webpack_require__(16);

	var _rcUtil2 = _interopRequireDefault(_rcUtil);

	var _TodayButton = __webpack_require__(53);

	var _TodayButton2 = _interopRequireDefault(_TodayButton);

	var _OkButton = __webpack_require__(54);

	var _OkButton2 = _interopRequireDefault(_OkButton);

	var _index = __webpack_require__(42);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	var toFragment = _rcUtil2["default"].Children.mapSelf;

	var CalendarFooter = _react2["default"].createClass({
	  displayName: 'CalendarFooter',

	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    showDateInput: _react.PropTypes.bool,
	    disabledTime: _react.PropTypes.any,
	    gregorianCalendarLocale: _react.PropTypes.object,
	    selectedValue: _react.PropTypes.any,
	    showOk: _react.PropTypes.bool,
	    onSelect: _react.PropTypes.func,
	    value: _react.PropTypes.object,
	    defaultValue: _react.PropTypes.object
	  },

	  onSelect: function onSelect(value) {
	    this.props.onSelect(value);
	  },
	  getRootDOMNode: function getRootDOMNode() {
	    return _reactDom2["default"].findDOMNode(this);
	  },
	  render: function render() {
	    var props = this.props;
	    var value = props.value;
	    var prefixCls = props.prefixCls;
	    var showDateInput = props.showDateInput;
	    var disabledTime = props.disabledTime;
	    var gregorianCalendarLocale = props.gregorianCalendarLocale;
	    var selectedValue = props.selectedValue;
	    var showOk = props.showOk;

	    var timePicker = !showDateInput && props.timePicker || null;
	    var disabledTimeConfig = disabledTime && timePicker ? (0, _index.getTimeConfig)(selectedValue, disabledTime) : null;
	    var footerEl = null;
	    if (props.showToday || timePicker) {
	      var nowEl = undefined;
	      if (props.showToday) {
	        nowEl = _react2["default"].createElement(_TodayButton2["default"], _extends({}, props, { value: value }));
	      }
	      var okBtn = undefined;
	      if (showOk === true || showOk !== false && !!props.timePicker) {
	        okBtn = _react2["default"].createElement(_OkButton2["default"], props);
	      }
	      var footerBtn = undefined;
	      if (nowEl || okBtn) {
	        footerBtn = _react2["default"].createElement('span', { className: prefixCls + '-footer-btn' }, toFragment([nowEl, okBtn]));
	      }
	      if (timePicker) {
	        timePicker = _react2["default"].cloneElement(timePicker, _extends({
	          onChange: this.onSelect,
	          allowEmpty: false,
	          gregorianCalendarLocale: gregorianCalendarLocale
	        }, disabledTimeConfig, {
	          getPopupContainer: this.getRootDOMNode,
	          value: selectedValue
	        }));
	      }
	      footerEl = _react2["default"].createElement('div', { className: prefixCls + '-footer' }, timePicker, footerBtn);
	    }

	    return footerEl;
	  }
	});

	exports["default"] = CalendarFooter;
	module.exports = exports['default'];

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = TodayButton;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _util = __webpack_require__(42);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function TodayButton(_ref) {
	  var prefixCls = _ref.prefixCls;
	  var locale = _ref.locale;
	  var value = _ref.value;
	  var timePicker = _ref.timePicker;
	  var disabledDate = _ref.disabledDate;
	  var disabledTime = _ref.disabledTime;
	  var onToday = _ref.onToday;

	  var disabledToday = false;
	  var localeNow = locale.today;
	  if (timePicker) {
	    localeNow = locale.now || locale.today;
	  }
	  var disabledTodayClass = '';
	  if (disabledDate) {
	    disabledToday = !(0, _util.isAllowedDate)((0, _util.getTodayTime)(value), disabledDate, disabledTime);
	    if (disabledToday) {
	      disabledTodayClass = prefixCls + '-today-btn-disabled';
	    }
	  }
	  return _react2["default"].createElement('a', {
	    className: prefixCls + '-today-btn ' + disabledTodayClass,
	    role: 'button',
	    onClick: disabledToday ? null : onToday,
	    title: (0, _util.getTodayTimeStr)(value)
	  }, localeNow);
	}
		module.exports = exports['default'];

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = OkButton;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function OkButton(_ref) {
	  var prefixCls = _ref.prefixCls;
	  var locale = _ref.locale;
	  var okDisabled = _ref.okDisabled;
	  var onOk = _ref.onOk;

	  var className = prefixCls + "-ok-btn";
	  if (okDisabled) {
	    className += " " + prefixCls + "-ok-btn-disabled";
	  }
	  return _react2["default"].createElement("a", {
	    className: className,
	    role: "button",
	    onClick: okDisabled ? null : onOk
	  }, locale.ok);
	}
		module.exports = exports['default'];

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _gregorianCalendar = __webpack_require__(12);

	var _gregorianCalendar2 = _interopRequireDefault(_gregorianCalendar);

	var _index = __webpack_require__(42);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function noop() {}

	function getNow() {
	  var value = new _gregorianCalendar2["default"]();
	  value.setTime(Date.now());
	  return value;
	}

	function getNowByCurrentStateValue(value) {
	  var ret = undefined;
	  if (value) {
	    ret = value.clone();
	    ret.setTime(Date.now());
	  } else {
	    ret = getNow();
	  }
	  return ret;
	}

	var CalendarMixin = {
	  propTypes: {
	    value: _react.PropTypes.object,
	    defaultValue: _react.PropTypes.object,
	    onKeyDown: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onKeyDown: noop
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var value = props.value || props.defaultValue || getNow();
	    return {
	      value: value,
	      selectedValue: props.selectedValue || props.defaultSelectedValue
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var value = nextProps.value;
	    var selectedValue = nextProps.selectedValue;

	    if ('value' in nextProps) {
	      value = value || nextProps.defaultValue || getNowByCurrentStateValue(this.state.value);
	      this.setState({
	        value: value
	      });
	    }
	    if ('selectedValue' in nextProps) {
	      this.setState({
	        selectedValue: selectedValue
	      });
	    }
	  },
	  onSelect: function onSelect(value, cause) {
	    if (value) {
	      this.setValue(value);
	    }
	    this.setSelectedValue(value, cause);
	  },
	  renderRoot: function renderRoot(newProps) {
	    var _className;

	    var props = this.props;
	    var prefixCls = props.prefixCls;

	    var className = (_className = {}, _defineProperty(_className, prefixCls, 1), _defineProperty(_className, prefixCls + '-hidden', !props.visible), _defineProperty(_className, props.className, !!props.className), _defineProperty(_className, newProps.className, !!newProps.className), _className);

	    return _react2["default"].createElement('div', {
	      className: '' + (0, _classnames2["default"])(className),
	      style: this.props.style,
	      tabIndex: '0', onKeyDown: this.onKeyDown
	    }, newProps.children);
	  },
	  setSelectedValue: function setSelectedValue(selectedValue, cause) {
	    if (this.isAllowedDate(selectedValue)) {
	      if (!('selectedValue' in this.props)) {
	        this.setState({
	          selectedValue: selectedValue
	        });
	      }
	      this.props.onSelect(selectedValue, cause);
	    }
	  },
	  setValue: function setValue(value) {
	    var originalValue = this.state.value;
	    if (!('value' in this.props)) {
	      this.setState({
	        value: value
	      });
	    }
	    if (originalValue && value && originalValue.getTime() !== value.getTime() || !originalValue && value || originalValue && !value) {
	      this.props.onChange(value);
	    }
	  },
	  isAllowedDate: function isAllowedDate(value) {
	    var disabledDate = this.props.disabledDate;
	    var disabledTime = this.props.disabledTime;
	    return (0, _index.isAllowedDate)(value, disabledDate, disabledTime);
	  }
	};

	exports["default"] = CalendarMixin;
	module.exports = exports['default'];

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _en_US = __webpack_require__(57);

	var _en_US2 = _interopRequireDefault(_en_US);

	var _index = __webpack_require__(42);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function noop() {}

	exports["default"] = {
	  propTypes: {
	    className: _react.PropTypes.string,
	    locale: _react.PropTypes.object,
	    style: _react.PropTypes.object,
	    visible: _react.PropTypes.bool,
	    onSelect: _react.PropTypes.func,
	    prefixCls: _react.PropTypes.string,
	    onChange: _react.PropTypes.func,
	    onOk: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      locale: _en_US2["default"],
	      style: {},
	      visible: true,
	      prefixCls: 'rc-calendar',
	      formatter: 'yyyy-MM-dd',
	      className: '',
	      onSelect: noop,
	      onChange: noop,
	      onClear: noop
	    };
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    return this.props.visible || nextProps.visible;
	  },
	  getFormatter: function getFormatter() {
	    var formatter = this.props.formatter;
	    var locale = this.props.locale;
	    if (this.normalFormatter && formatter === this.lastFormatter) {
	      return this.normalFormatter;
	    }
	    this.normalFormatter = (0, _index.getFormatter)(formatter, locale);
	    this.lastFormatter = formatter;
	    return this.normalFormatter;
	  }
	};
		module.exports = exports['default'];

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _en_US = __webpack_require__(44);

	var _en_US2 = _interopRequireDefault(_en_US);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	exports["default"] = {
	  today: 'Today',
	  now: 'Now',
	  ok: 'Ok',
	  clear: 'Clear',
	  month: 'Month',
	  year: 'Year',
	  monthSelect: 'Choose a month',
	  yearSelect: 'Choose a year',
	  decadeSelect: 'Choose a decade',
	  yearFormat: 'yyyy',
	  dateFormat: 'M/d/yyyy',
	  monthFormat: 'MMMM',
	  monthBeforeYear: true,
	  previousMonth: 'Previous month (PageUp)',
	  nextMonth: 'Next month (PageDown)',
	  previousYear: 'Last year (Control + left)',
	  nextYear: 'Next year (Control + right)',
	  previousDecade: 'Last decade',
	  nextDecade: 'Next decade',
	  previousCentury: 'Last century',
	  nextCentury: 'Next century',
	  format: _en_US2["default"]
	};
		module.exports = exports['default'];

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _index = __webpack_require__(42);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function copyTime(target, source) {
	  if (source) {
	    target.setHourOfDay(source.getHourOfDay());
	    target.setMinutes(source.getMinutes());
	    target.setSeconds(source.getSeconds());
	  }
	  return target;
	}

	var DateInput = _react2["default"].createClass({
	  displayName: 'DateInput',

	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    timePicker: _react.PropTypes.object,
	    disabledTime: _react.PropTypes.any,
	    formatter: _react.PropTypes.object,
	    locale: _react.PropTypes.object,
	    gregorianCalendarLocale: _react.PropTypes.object,
	    disabledDate: _react.PropTypes.func,
	    onChange: _react.PropTypes.func,
	    onClear: _react.PropTypes.func,
	    placeholder: _react.PropTypes.string,
	    onSelect: _react.PropTypes.func,
	    selectedValue: _react.PropTypes.object
	  },

	  getInitialState: function getInitialState() {
	    var selectedValue = this.props.selectedValue;
	    return {
	      str: selectedValue && this.props.formatter.format(selectedValue) || '',
	      invalid: false
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    // when popup show, click body will call this, bug!
	    var selectedValue = nextProps.selectedValue;
	    this.setState({
	      str: selectedValue && nextProps.formatter.format(selectedValue) || '',
	      invalid: false
	    });
	  },
	  onInputChange: function onInputChange(event) {
	    var str = event.target.value;
	    this.setState({
	      str: str
	    });
	    var value = undefined;
	    var _props = this.props;
	    var disabledDate = _props.disabledDate;
	    var formatter = _props.formatter;
	    var gregorianCalendarLocale = _props.gregorianCalendarLocale;
	    var onChange = _props.onChange;

	    if (str) {
	      try {
	        value = copyTime(formatter.parse(str, {
	          locale: gregorianCalendarLocale,
	          obeyCount: true
	        }), this.props.selectedValue);
	      } catch (ex) {
	        this.setState({
	          invalid: true
	        });
	        return;
	      }
	      if (value && (!disabledDate || !disabledDate(value))) {
	        var originalValue = this.props.selectedValue;
	        if (originalValue && value) {
	          if (originalValue.getTime() !== value.getTime()) {
	            onChange(value);
	          }
	        } else if (originalValue !== value) {
	          onChange(value);
	        }
	      } else {
	        this.setState({
	          invalid: true
	        });
	        return;
	      }
	    } else {
	      onChange(null);
	    }
	    this.setState({
	      invalid: false
	    });
	  },
	  onClear: function onClear() {
	    this.setState({
	      str: ''
	    });
	    this.props.onClear(null);
	  },
	  getRootDOMNode: function getRootDOMNode() {
	    return _reactDom2["default"].findDOMNode(this);
	  },
	  render: function render() {
	    var props = this.props;
	    var _state = this.state;
	    var invalid = _state.invalid;
	    var str = _state.str;
	    var selectedValue = props.selectedValue;
	    var locale = props.locale;
	    var prefixCls = props.prefixCls;
	    var placeholder = props.placeholder;
	    var onChange = props.onChange;
	    var timePicker = props.timePicker;
	    var disabledTime = props.disabledTime;
	    var gregorianCalendarLocale = props.gregorianCalendarLocale;

	    var invalidClass = invalid ? prefixCls + '-input-invalid' : '';
	    var disabledTimeConfig = disabledTime && timePicker ? (0, _index.getTimeConfig)(selectedValue, disabledTime) : null;
	    return _react2["default"].createElement('div', { className: prefixCls + '-input-wrap' }, _react2["default"].createElement('div', { className: prefixCls + '-time-picker-wrap' }, timePicker ? _react2["default"].cloneElement(timePicker, _extends({
	      showClear: false,
	      allowEmpty: false,
	      getPopupContainer: this.getRootDOMNode,
	      gregorianCalendarLocale: gregorianCalendarLocale,
	      value: selectedValue,
	      onChange: onChange
	    }, disabledTimeConfig)) : null), _react2["default"].createElement('div', { className: prefixCls + '-date-input-wrap' }, _react2["default"].createElement('input', {
	      className: prefixCls + '-input  ' + invalidClass,
	      value: str,
	      placeholder: placeholder,
	      onChange: this.onInputChange
	    })), props.showClear ? _react2["default"].createElement('a', {
	      className: prefixCls + '-clear-btn',
	      role: 'button',
	      title: locale.clear,
	      onClick: this.onClear
	    }) : null);
	  }
	});

	exports["default"] = DateInput;
	module.exports = exports['default'];

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcUtil = __webpack_require__(16);

	var _placements = __webpack_require__(60);

	var _placements2 = _interopRequireDefault(_placements);

	var _rcTrigger = __webpack_require__(61);

	var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function noop() {}

	function refFn(field, component) {
	  this[field] = component;
	}

	var Picker = _react2["default"].createClass({
	  displayName: 'Picker',

	  propTypes: {
	    animation: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
	    disabled: _react.PropTypes.bool,
	    transitionName: _react.PropTypes.string,
	    onChange: _react.PropTypes.func,
	    onOpen: _react.PropTypes.func,
	    onClose: _react.PropTypes.func,
	    children: _react.PropTypes.func,
	    getCalendarContainer: _react.PropTypes.func,
	    calendar: _react.PropTypes.element,
	    style: _react.PropTypes.object,
	    open: _react.PropTypes.bool,
	    defaultOpen: _react.PropTypes.bool,
	    prefixCls: _react.PropTypes.string,
	    placement: _react.PropTypes.any,
	    value: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.array]),
	    defaultValue: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.array]),
	    align: _react.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-calendar-picker',
	      style: {},
	      align: {},
	      placement: 'bottomLeft',
	      defaultOpen: false,
	      onChange: noop,
	      onOpen: noop,
	      onClose: noop
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var open = undefined;
	    if ('open' in props) {
	      open = props.open;
	    } else {
	      open = props.defaultOpen;
	    }
	    var value = props.value || props.defaultValue;
	    this.saveCalendarRef = refFn.bind(this, 'calendarInstance');
	    return {
	      open: open,
	      value: value
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var value = nextProps.value;
	    var open = nextProps.open;

	    if ('value' in nextProps) {
	      this.setState({
	        value: value
	      });
	    }
	    if (open !== undefined) {
	      this.setState({
	        open: open
	      });
	    }
	  },
	  onCalendarKeyDown: function onCalendarKeyDown(event) {
	    if (event.keyCode === _rcUtil.KeyCode.ESC) {
	      event.stopPropagation();
	      this.close(this.focus);
	    }
	  },
	  onCalendarSelect: function onCalendarSelect(value) {
	    var cause = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var props = this.props;
	    if (!('value' in props)) {
	      this.setState({
	        value: value
	      });
	    }
	    if (!props.calendar.props.timePicker && cause.source !== 'dateInput') {
	      this.close(this.focus);
	    }
	    props.onChange(value);
	  },
	  onCalendarOk: function onCalendarOk() {
	    this.close(this.focus);
	  },
	  onCalendarClear: function onCalendarClear() {
	    this.close(this.focus);
	  },
	  onVisibleChange: function onVisibleChange(open) {
	    var _this = this;

	    this.setOpen(open, function () {
	      if (open) {
	        _reactDom2["default"].findDOMNode(_this.calendarInstance).focus();
	      }
	    });
	  },
	  getCalendarElement: function getCalendarElement() {
	    var props = this.props;
	    var state = this.state;
	    var calendarProp = props.calendar;
	    var value = state.value;

	    var defaultValue = undefined;
	    // RangeCalendar
	    if (Array.isArray(value)) {
	      defaultValue = value[0];
	    } else {
	      defaultValue = value;
	    }
	    var extraProps = {
	      ref: this.saveCalendarRef,
	      defaultValue: defaultValue || calendarProp.props.defaultValue,
	      defaultSelectedValue: value,
	      onKeyDown: this.onCalendarKeyDown,
	      onOk: (0, _rcUtil.createChainedFunction)(calendarProp.props.onOk, this.onCalendarOk),
	      onSelect: (0, _rcUtil.createChainedFunction)(calendarProp.props.onSelect, this.onCalendarSelect),
	      onClear: (0, _rcUtil.createChainedFunction)(calendarProp.props.onClear, this.onCalendarClear)
	    };

	    return _react2["default"].cloneElement(calendarProp, extraProps);
	  },
	  setOpen: function setOpen(open, callback) {
	    var _props = this.props;
	    var onOpen = _props.onOpen;
	    var onClose = _props.onClose;

	    if (this.state.open !== open) {
	      this.setState({
	        open: open
	      }, callback);
	      var event = {
	        open: open
	      };
	      if (open) {
	        onOpen(event);
	      } else {
	        onClose(event);
	      }
	    }
	  },
	  open: function open(callback) {
	    this.setOpen(true, callback);
	  },
	  close: function close(callback) {
	    this.setOpen(false, callback);
	  },
	  focus: function focus() {
	    if (!this.state.open) {
	      _reactDom2["default"].findDOMNode(this).focus();
	    }
	  },
	  render: function render() {
	    var props = this.props;
	    var prefixCls = props.prefixCls;
	    var placement = props.placement;
	    var style = props.style;
	    var getCalendarContainer = props.getCalendarContainer;
	    var align = props.align;
	    var animation = props.animation;
	    var disabled = props.disabled;
	    var transitionName = props.transitionName;
	    var children = props.children;

	    var state = this.state;
	    return _react2["default"].createElement(_rcTrigger2["default"], {
	      popup: this.getCalendarElement(),
	      popupAlign: align,
	      builtinPlacements: _placements2["default"],
	      popupPlacement: placement,
	      action: disabled ? [] : ['click'],
	      destroyPopupOnHide: true,
	      getPopupContainer: getCalendarContainer,
	      popupStyle: style,
	      popupAnimation: animation,
	      popupTransitionName: transitionName,
	      popupVisible: state.open,
	      onPopupVisibleChange: this.onVisibleChange,
	      prefixCls: prefixCls
	    }, children(state, props));
	  }
	});

	exports["default"] = Picker;
	module.exports = exports['default'];

/***/ },
/* 60 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var autoAdjustOverflow = {
	  adjustX: 1,
	  adjustY: 1
	};

	var targetOffset = [0, 0];

	var placements = {
	  bottomLeft: {
	    points: ['tl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -3],
	    targetOffset: targetOffset
	  },
	  bottomRight: {
	    points: ['tr', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -3],
	    targetOffset: targetOffset
	  },
	  topRight: {
	    points: ['br', 'br'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 3],
	    targetOffset: targetOffset
	  },
	  topLeft: {
	    points: ['bl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 3],
	    targetOffset: targetOffset
	  }
	};

	exports["default"] = placements;
	module.exports = exports['default'];

/***/ },
/* 61 */
[820, 62],
/* 62 */
[821, 16, 63, 86],
/* 63 */
[822, 64, 75, 84, 85],
/* 64 */
[823, 65],
/* 65 */
[824, 66, 16, 74],
/* 66 */
[825, 67, 68, 69, 70, 71, 72],
/* 67 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;

	var getComputedStyleX = undefined;

	function css(el, name, v) {
	  var value = v;
	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	    for (var i in name) {
	      if (name.hasOwnProperty(i)) {
	        css(el, i, name[i]);
	      }
	    }
	    return undefined;
	  }
	  if (typeof value !== 'undefined') {
	    if (typeof value === 'number') {
	      value = value + 'px';
	    }
	    el.style[name] = value;
	    return undefined;
	  }
	  return getComputedStyleX(el, name);
	}

	function getClientPosition(elem) {
	  var box = undefined;
	  var x = undefined;
	  var y = undefined;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
	  box = elem.getBoundingClientRect();

	  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
	  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
	  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

	  x = box.left;
	  y = box.top;

	  // In IE, most of the time, 2 extra pixels are added to the top and left
	  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
	  // IE6 standards mode, this border can be overridden by setting the
	  // document element's border to zero -- thus, we cannot rely on the
	  // offset always being 2 pixels.

	  // In quirks mode, the offset can be determined by querying the body's
	  // clientLeft/clientTop, but in standards mode, it is found by querying
	  // the document element's clientLeft/clientTop.  Since we already called
	  // getClientBoundingRect we have already forced a reflow, so it is not
	  // too expensive just to query them all.

	  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
	  // 窗口边框标准是设 documentElement ,quirks 时设置 body
	  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
	  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
	  // 标准 ie 下 docElem.clientTop 就是 border-top
	  // ie7 html 即窗口边框改变不了。永远为 2
	  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;

	  return { left: x, top: y };
	}

	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}

	function getScrollLeft(w) {
	  return getScroll(w);
	}

	function getScrollTop(w) {
	  return getScroll(w, true);
	}

	function getOffset(el) {
	  var pos = getClientPosition(el);
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScrollLeft(w);
	  pos.top += getScrollTop(w);
	  return pos;
	}
	function _getComputedStyle(elem, name, cs) {
	  var computedStyle = cs;
	  var val = '';
	  var d = elem.ownerDocument;
	  computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null);

	  // https://github.com/kissyteam/kissy/issues/61
	  if (computedStyle) {
	    val = computedStyle.getPropertyValue(name) || computedStyle[name];
	  }

	  return val;
	}

	var _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');
	var RE_POS = /^(top|right|bottom|left)$/;
	var CURRENT_STYLE = 'currentStyle';
	var RUNTIME_STYLE = 'runtimeStyle';
	var LEFT = 'left';
	var PX = 'px';

	function _getComputedStyleIE(elem, name) {
	  // currentStyle maybe null
	  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
	  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];

	  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
	  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
	  // 在 ie 下不对，需要直接用 offset 方式
	  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了

	  // From the awesome hack by Dean Edwards
	  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	  // If we're not dealing with a regular pixel number
	  // but a number that has a weird ending, we need to convert it to pixels
	  // exclude left right for relativity
	  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
	    // Remember the original values
	    var style = elem.style;
	    var left = style[LEFT];
	    var rsLeft = elem[RUNTIME_STYLE][LEFT];

	    // prevent flashing of content
	    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];

	    // Put in the new values to get a computed value out
	    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
	    ret = style.pixelLeft + PX;

	    // Revert the changed values
	    style[LEFT] = left;

	    elem[RUNTIME_STYLE][LEFT] = rsLeft;
	  }
	  return ret === '' ? 'auto' : ret;
	}

	if (typeof window !== 'undefined') {
	  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
	}

	function getOffsetDirection(dir, option) {
	  if (dir === 'left') {
	    return option.useCssRight ? 'right' : dir;
	  }
	  return option.useCssBottom ? 'bottom' : dir;
	}

	function oppositeOffsetDirection(dir) {
	  if (dir === 'left') {
	    return 'right';
	  } else if (dir === 'right') {
	    return 'left';
	  } else if (dir === 'top') {
	    return 'bottom';
	  } else if (dir === 'bottom') {
	    return 'top';
	  }
	}

	// 设置 elem 相对 elem.ownerDocument 的坐标
	function setOffset(elem, offset, option) {
	  // set position first, in-case top/left are set even on static elem
	  if (css(elem, 'position') === 'static') {
	    elem.style.position = 'relative';
	  }
	  var presetH = -999;
	  var presetV = -999;
	  var horizontalProperty = getOffsetDirection('left', option);
	  var verticalProperty = getOffsetDirection('top', option);
	  var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
	  var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);

	  if (horizontalProperty !== 'left') {
	    presetH = 999;
	  }

	  if (verticalProperty !== 'top') {
	    presetV = 999;
	  }

	  if ('left' in offset) {
	    elem.style[oppositeHorizontalProperty] = '';
	    elem.style[horizontalProperty] = presetH + 'px';
	  }
	  if ('top' in offset) {
	    elem.style[oppositeVerticalProperty] = '';
	    elem.style[verticalProperty] = presetV + 'px';
	  }
	  var old = getOffset(elem);
	  var ret = {};
	  var key = undefined;
	  for (key in offset) {
	    if (offset.hasOwnProperty(key)) {
	      var dir = getOffsetDirection(key, option);
	      var preset = key === 'left' ? presetH : presetV;
	      if (dir === key) {
	        ret[dir] = preset + offset[key] - old[key];
	      } else {
	        ret[dir] = preset + old[key] - offset[key];
	      }
	    }
	  }
	  css(elem, ret);
	}

	function each(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(arr[i]);
	  }
	}

	function isBorderBoxFn(elem) {
	  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
	}

	var BOX_MODELS = ['margin', 'border', 'padding'];
	var CONTENT_INDEX = -1;
	var PADDING_INDEX = 2;
	var BORDER_INDEX = 1;
	var MARGIN_INDEX = 0;

	function swap(elem, options, callback) {
	  var old = {};
	  var style = elem.style;
	  var name = undefined;

	  // Remember the old values, and insert the new ones
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      old[name] = style[name];
	      style[name] = options[name];
	    }
	  }

	  callback.call(elem);

	  // Revert the old values
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      style[name] = old[name];
	    }
	  }
	}

	function getPBMWidth(elem, props, which) {
	  var value = 0;
	  var prop = undefined;
	  var j = undefined;
	  var i = undefined;
	  for (j = 0; j < props.length; j++) {
	    prop = props[j];
	    if (prop) {
	      for (i = 0; i < which.length; i++) {
	        var cssProp = undefined;
	        if (prop === 'border') {
	          cssProp = prop + which[i] + 'Width';
	        } else {
	          cssProp = prop + which[i];
	        }
	        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
	      }
	    }
	  }
	  return value;
	}

	/**
	 * A crude way of determining if an object is a window
	 * @member util
	 */
	function isWindow(obj) {
	  // must use == for ie8
	  /* eslint eqeqeq:0 */
	  return obj !== null && obj !== undefined && obj == obj.window;
	}

	var domUtils = {};

	each(['Width', 'Height'], function (name) {
	  domUtils['doc' + name] = function (refWin) {
	    var d = refWin.document;
	    return Math.max(
	    // firefox chrome documentElement.scrollHeight< body.scrollHeight
	    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
	    d.documentElement['scroll' + name],
	    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
	    d.body['scroll' + name], domUtils['viewport' + name](d));
	  };

	  domUtils['viewport' + name] = function (win) {
	    // pc browser includes scrollbar in window.innerWidth
	    var prop = 'client' + name;
	    var doc = win.document;
	    var body = doc.body;
	    var documentElement = doc.documentElement;
	    var documentElementProp = documentElement[prop];
	    // 标准模式取 documentElement
	    // backcompat 取 body
	    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
	  };
	});

	/*
	 得到元素的大小信息
	 @param elem
	 @param name
	 @param {String} [extra]  'padding' : (css width) + padding
	 'border' : (css width) + padding + border
	 'margin' : (css width) + padding + border + margin
	 */
	function getWH(elem, name, ex) {
	  var extra = ex;
	  if (isWindow(elem)) {
	    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
	  } else if (elem.nodeType === 9) {
	    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
	  }
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	  var borderBoxValue = name === 'width' ? elem.offsetWidth : elem.offsetHeight;
	  var computedStyle = getComputedStyleX(elem);
	  var isBorderBox = isBorderBoxFn(elem, computedStyle);
	  var cssBoxValue = 0;
	  if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {
	    borderBoxValue = undefined;
	    // Fall back to computed then un computed css if necessary
	    cssBoxValue = getComputedStyleX(elem, name);
	    if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) {
	      cssBoxValue = elem.style[name] || 0;
	    }
	    // Normalize '', auto, and prepare for extra
	    cssBoxValue = parseFloat(cssBoxValue) || 0;
	  }
	  if (extra === undefined) {
	    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
	  }
	  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
	  var val = borderBoxValue || cssBoxValue;
	  if (extra === CONTENT_INDEX) {
	    if (borderBoxValueOrIsBorderBox) {
	      return val - getPBMWidth(elem, ['border', 'padding'], which, computedStyle);
	    }
	    return cssBoxValue;
	  } else if (borderBoxValueOrIsBorderBox) {
	    if (extra === BORDER_INDEX) {
	      return val;
	    }
	    return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which, computedStyle) : getPBMWidth(elem, ['margin'], which, computedStyle));
	  }
	  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which, computedStyle);
	}

	var cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' };

	// fix #119 : https://github.com/kissyteam/kissy/issues/119
	function getWHIgnoreDisplay() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  var val = undefined;
	  var elem = args[0];
	  // in case elem is window
	  // elem.offsetWidth === undefined
	  if (elem.offsetWidth !== 0) {
	    val = getWH.apply(undefined, args);
	  } else {
	    swap(elem, cssShow, function () {
	      val = getWH.apply(undefined, args);
	    });
	  }
	  return val;
	}

	each(['width', 'height'], function (name) {
	  var first = name.charAt(0).toUpperCase() + name.slice(1);
	  domUtils['outer' + first] = function (el, includeMargin) {
	    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
	  };
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

	  domUtils[name] = function (elem, v) {
	    var val = v;
	    if (val !== undefined) {
	      if (elem) {
	        var computedStyle = getComputedStyleX(elem);
	        var isBorderBox = isBorderBoxFn(elem);
	        if (isBorderBox) {
	          val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);
	        }
	        return css(elem, name, val);
	      }
	      return undefined;
	    }
	    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
	  };
	});

	function mix(to, from) {
	  for (var i in from) {
	    if (from.hasOwnProperty(i)) {
	      to[i] = from[i];
	    }
	  }
	  return to;
	}

	var utils = {
	  getWindow: function getWindow(node) {
	    if (node && node.document && node.setTimeout) {
	      return node;
	    }
	    var doc = node.ownerDocument || node;
	    return doc.defaultView || doc.parentWindow;
	  },
	  offset: function offset(el, value, option) {
	    if (typeof value !== 'undefined') {
	      setOffset(el, value, option || {});
	    } else {
	      return getOffset(el);
	    }
	  },
	  isWindow: isWindow,
	  each: each,
	  css: css,
	  clone: function clone(obj) {
	    var i = undefined;
	    var ret = {};
	    for (i in obj) {
	      if (obj.hasOwnProperty(i)) {
	        ret[i] = obj[i];
	      }
	    }
	    var overflow = obj.overflow;
	    if (overflow) {
	      for (i in obj) {
	        if (obj.hasOwnProperty(i)) {
	          ret.overflow[i] = obj.overflow[i];
	        }
	      }
	    }
	    return ret;
	  },
	  mix: mix,
	  getWindowScrollLeft: function getWindowScrollLeft(w) {
	    return getScrollLeft(w);
	  },
	  getWindowScrollTop: function getWindowScrollTop(w) {
	    return getScrollTop(w);
	  },
	  merge: function merge() {
	    var ret = {};

	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    for (var i = 0; i < args.length; i++) {
	      utils.mix(ret, args[i]);
	    }
	    return ret;
	  },
	  viewportWidth: 0,
	  viewportHeight: 0
	};

	mix(utils, domUtils);

	exports['default'] = utils;
	module.exports = exports['default'];

/***/ },
/* 68 */
[826, 67],
/* 69 */
[827, 67, 68],
/* 70 */
[828, 67],
/* 71 */
[829, 67],
/* 72 */
[830, 73],
/* 73 */
/***/ function(module, exports) {

	/**
	 * 获取 node 上的 align 对齐点 相对于页面的坐标
	 */

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	function getAlignOffset(region, align) {
	  var V = align.charAt(0);
	  var H = align.charAt(1);
	  var w = region.width;
	  var h = region.height;
	  var x = undefined;
	  var y = undefined;

	  x = region.left;
	  y = region.top;

	  if (V === 'c') {
	    y += h / 2;
	  } else if (V === 'b') {
	    y += h;
	  }

	  if (H === 'c') {
	    x += w / 2;
	  } else if (H === 'r') {
	    x += w;
	  }

	  return {
	    left: x,
	    top: y
	  };
	}

	exports['default'] = getAlignOffset;
	module.exports = exports['default'];

/***/ },
/* 74 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = isWindow;

	function isWindow(obj) {
	  /* eslint no-eq-null: 0 */
	  /* eslint eqeqeq: 0 */
	  return obj != null && obj == obj.window;
	}

		module.exports = exports["default"];

/***/ },
/* 75 */
[831, 76],
/* 76 */
[832, 77, 78, 83],
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.toArrayChildren = toArrayChildren;
	exports.findChildInChildrenByKey = findChildInChildrenByKey;
	exports.findShownChildInChildrenByKey = findShownChildInChildrenByKey;
	exports.findHiddenChildInChildrenByKey = findHiddenChildInChildrenByKey;
	exports.isSameChildren = isSameChildren;
	exports.mergeChildren = mergeChildren;

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function toArrayChildren(children) {
	  var ret = [];
	  _react2['default'].Children.forEach(children, function (child) {
	    ret.push(child);
	  });
	  return ret;
	}

	function findChildInChildrenByKey(children, key) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (ret) {
	        return;
	      }
	      if (child.key === key) {
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findShownChildInChildrenByKey(children, key, showProp) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (child.key === key && child.props[showProp]) {
	        if (ret) {
	          throw new Error('two child with same key for <rc-animate> children');
	        }
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findHiddenChildInChildrenByKey(children, key, showProp) {
	  var found = 0;
	  if (children) {
	    children.forEach(function (child) {
	      if (found) {
	        return;
	      }
	      found = child.key === key && !child.props[showProp];
	    });
	  }
	  return found;
	}

	function isSameChildren(c1, c2, showProp) {
	  var same = c1.length === c2.length;
	  if (same) {
	    c1.forEach(function (child, index) {
	      var child2 = c2[index];
	      if (child.key !== child2.key) {
	        same = false;
	      } else if (showProp && child.props[showProp] !== child2.props[showProp]) {
	        same = false;
	      }
	    });
	  }
	  return same;
	}

	function mergeChildren(prev, next) {
	  var ret = [];

	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextChildrenPending = {};
	  var pendingChildren = [];
	  prev.forEach(function (child) {
	    if (findChildInChildrenByKey(next, child.key)) {
	      if (pendingChildren.length) {
	        nextChildrenPending[child.key] = pendingChildren;
	        pendingChildren = [];
	      }
	    } else {
	      pendingChildren.push(child);
	    }
	  });

	  next.forEach(function (child) {
	    if (nextChildrenPending.hasOwnProperty(child.key)) {
	      ret = ret.concat(nextChildrenPending[child.key]);
	    }
	    ret.push(child);
	  });

	  ret = ret.concat(pendingChildren);

	  return ret;
		}

/***/ },
/* 78 */
[833, 79, 83],
/* 79 */
[834, 80, 81],
/* 80 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var EVENT_NAME_MAP = {
	  transitionend: {
	    transition: 'transitionend',
	    WebkitTransition: 'webkitTransitionEnd',
	    MozTransition: 'mozTransitionEnd',
	    OTransition: 'oTransitionEnd',
	    msTransition: 'MSTransitionEnd'
	  },

	  animationend: {
	    animation: 'animationend',
	    WebkitAnimation: 'webkitAnimationEnd',
	    MozAnimation: 'mozAnimationEnd',
	    OAnimation: 'oAnimationEnd',
	    msAnimation: 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
	      var baseEvents = EVENT_NAME_MAP[baseEventName];
	      for (var styleName in baseEvents) {
	        if (styleName in style) {
	          endEvents.push(baseEvents[styleName]);
	          break;
	        }
	      }
	    }
	  }
	}

	if (typeof window !== 'undefined' && typeof document !== 'undefined') {
	  detectEvents();
	}

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var TransitionEvents = {
	  addEndEventListener: function addEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },

	  endEvents: endEvents,

	  removeEndEventListener: function removeEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	exports["default"] = TransitionEvents;
	module.exports = exports['default'];

/***/ },
/* 81 */
[835, 82, 82],
/* 82 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (arr, obj) {
	  if (arr.indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
		};

/***/ },
/* 83 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var util = {
	  isAppearSupported: function isAppearSupported(props) {
	    return props.transitionName && props.transitionAppear || props.animation.appear;
	  },
	  isEnterSupported: function isEnterSupported(props) {
	    return props.transitionName && props.transitionEnter || props.animation.enter;
	  },
	  isLeaveSupported: function isLeaveSupported(props) {
	    return props.transitionName && props.transitionLeave || props.animation.leave;
	  },

	  allowAppearCallback: function allowAppearCallback(props) {
	    return props.transitionAppear || props.animation.appear;
	  },
	  allowEnterCallback: function allowEnterCallback(props) {
	    return props.transitionEnter || props.animation.enter;
	  },
	  allowLeaveCallback: function allowLeaveCallback(props) {
	    return props.transitionLeave || props.animation.leave;
	  }
	};
	exports["default"] = util;
	module.exports = exports["default"];

/***/ },
/* 84 */
[836, 85],
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	var LazyRenderBox = _react2["default"].createClass({
	  displayName: 'LazyRenderBox',

	  propTypes: {
	    children: _react.PropTypes.any,
	    className: _react.PropTypes.string,
	    visible: _react.PropTypes.bool,
	    hiddenClassName: _react.PropTypes.string
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    return nextProps.hiddenClassName || nextProps.visible;
	  },
	  render: function render() {
	    if (this.props.hiddenClassName) {
	      var className = this.props.className;
	      if (!this.props.visible) {
	        className += ' ' + this.props.hiddenClassName;
	      }
	      return _react2["default"].createElement('div', _extends({}, this.props, { className: className }));
	    }
	    if (_react2["default"].Children.count(this.props.children) > 1) {
	      return _react2["default"].createElement('div', this.props);
	    }
	    return _react2["default"].Children.only(this.props.children);
	  }
	});

	exports["default"] = LazyRenderBox;
	module.exports = exports['default'];

/***/ },
/* 86 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	exports.getAlignFromPlacement = getAlignFromPlacement;
	exports.getPopupClassNameFromAlign = getPopupClassNameFromAlign;
	function isPointsEq(a1, a2) {
	  return a1[0] === a2[0] && a1[1] === a2[1];
	}

	function getAlignFromPlacement(builtinPlacements, placementStr, align) {
	  var baseAlign = builtinPlacements[placementStr] || {};
	  return _extends({}, baseAlign, align);
	}

	function getPopupClassNameFromAlign(builtinPlacements, prefixCls, align) {
	  var points = align.points;
	  for (var placement in builtinPlacements) {
	    if (builtinPlacements.hasOwnProperty(placement)) {
	      if (isPointsEq(builtinPlacements[placement].points, points)) {
	        return prefixCls + '-placement-' + placement;
	      }
	    }
	  }
	  return '';
		}

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _MonthPanel = __webpack_require__(48);

	var _MonthPanel2 = _interopRequireDefault(_MonthPanel);

	var _CalendarMixin = __webpack_require__(55);

	var _CalendarMixin2 = _interopRequireDefault(_CalendarMixin);

	var _CommonMixin = __webpack_require__(56);

	var _CommonMixin2 = _interopRequireDefault(_CommonMixin);

	var _rcUtil = __webpack_require__(16);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	var MonthCalendar = _react2["default"].createClass({
	  displayName: 'MonthCalendar',

	  mixins: [_CommonMixin2["default"], _CalendarMixin2["default"]],

	  onKeyDown: function onKeyDown(event) {
	    var keyCode = event.keyCode;
	    var ctrlKey = event.ctrlKey || event.metaKey;
	    var stateValue = this.state.value;
	    var value = stateValue;
	    switch (keyCode) {
	      case _rcUtil.KeyCode.DOWN:
	        value = stateValue.clone();
	        value.addMonth(3);
	        break;
	      case _rcUtil.KeyCode.UP:
	        value = stateValue.clone();
	        value.addMonth(-3);
	        break;
	      case _rcUtil.KeyCode.LEFT:
	        value = stateValue.clone();
	        if (ctrlKey) {
	          value.addYear(-1);
	        } else {
	          value.addMonth(-1);
	        }
	        break;
	      case _rcUtil.KeyCode.RIGHT:
	        value = stateValue.clone();
	        if (ctrlKey) {
	          value.addYear(1);
	        } else {
	          value.addMonth(1);
	        }
	        break;
	      case _rcUtil.KeyCode.ENTER:
	        this.onSelect(stateValue);
	        event.preventDefault();
	        return 1;
	      default:
	        return undefined;
	    }
	    if (value !== stateValue) {
	      this.setValue(value);
	      event.preventDefault();
	      return 1;
	    }
	  },
	  render: function render() {
	    var props = this.props;
	    var children = _react2["default"].createElement(_MonthPanel2["default"], {
	      locale: props.locale,
	      disabledDate: props.disabledDate,
	      style: { position: 'relative' },
	      value: this.state.value,
	      rootPrefixCls: props.prefixCls,
	      onChange: this.setValue,
	      onSelect: this.onSelect
	    });
	    return this.renderRoot({
	      children: children
	    });
	  }
	});

	exports["default"] = MonthCalendar;
	module.exports = exports['default'];

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _YearPanel = __webpack_require__(49);

	var _YearPanel2 = _interopRequireDefault(_YearPanel);

	var _CalendarMixin = __webpack_require__(55);

	var _CalendarMixin2 = _interopRequireDefault(_CalendarMixin);

	var _CommonMixin = __webpack_require__(56);

	var _CommonMixin2 = _interopRequireDefault(_CommonMixin);

	var _rcUtil = __webpack_require__(16);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { "default": obj };
	}

	var YearCalendar = _react2["default"].createClass({
	    displayName: 'YearCalendar',

	    mixins: [_CalendarMixin2["default"], _CommonMixin2["default"]],

	    onKeyDown: function onKeyDown(e) {
	        var keyCode = e.keyCode;
	        var ctrlKey = e.ctrlKey || e.metaKey;
	        var stateValue = this.state.value;
	        var value = stateValue;
	        switch (keyCode) {
	            case _rcUtil.KeyCode.DOWN:
	                value = stateValue.clone();
	                value.addMonth(3);
	                break;
	            case _rcUtil.KeyCode.UP:
	                value = stateValue.clone();
	                value.addMonth(-3);
	                break;
	            case _rcUtil.KeyCode.LEFT:
	                value = stateValue.clone();
	                if (ctrlKey) {
	                    value.addYear(-1);
	                } else {
	                    value.addMonth(-1);
	                }
	                break;
	            case _rcUtil.KeyCode.RIGHT:
	                value = stateValue.clone();
	                if (ctrlKey) {
	                    value.addYear(1);
	                } else {
	                    value.addMonth(1);
	                }
	                break;
	            case _rcUtil.KeyCode.ENTER:
	                this.onSelect(stateValue);
	                e.preventDefault();
	                return 1;
	            default:
	                return undefined;
	        }
	        if (value !== stateValue) {
	            this.setValue(value);
	            e.preventDefault();
	            return 1;
	        }
	    },
	    render: function render() {
	        var props = this.props;
	        var children = _react2["default"].createElement(_YearPanel2["default"], { locale: props.locale,
	            disabledDate: props.disabledDate,
	            value: this.state.value,
	            rootPrefixCls: props.prefixCls,
	            onChange: this.setValue,
	            onSelect: this.onSelect });
	        return this.renderRoot({
	            children: children,
	            className: props.prefixCls + '-year-calendar-container'

	        });
	    }
	});

	exports["default"] = YearCalendar;
	module.exports = exports['default'];

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _TimePicker = __webpack_require__(90);

	var _TimePicker2 = _interopRequireDefault(_TimePicker);

	exports['default'] = _TimePicker2['default'];
	module.exports = exports['default'];

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _rcTrigger = __webpack_require__(91);

	var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

	var _modulePanel = __webpack_require__(138);

	var _modulePanel2 = _interopRequireDefault(_modulePanel);

	var _utilPlacements = __webpack_require__(150);

	var _utilPlacements2 = _interopRequireDefault(_utilPlacements);

	var _mixinCommonMixin = __webpack_require__(139);

	var _mixinCommonMixin2 = _interopRequireDefault(_mixinCommonMixin);

	var _utilIndex = __webpack_require__(151);

	function noop() {}

	function refFn(field, component) {
	  this[field] = component;
	}

	var Picker = _react2['default'].createClass({
	  displayName: 'Picker',

	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    locale: _react.PropTypes.object,
	    value: _react.PropTypes.object,
	    disabled: _react.PropTypes.bool,
	    allowEmpty: _react.PropTypes.bool,
	    defaultValue: _react.PropTypes.object,
	    open: _react.PropTypes.bool,
	    defaultOpen: _react.PropTypes.bool,
	    align: _react.PropTypes.object,
	    placement: _react.PropTypes.any,
	    transitionName: _react.PropTypes.string,
	    getPopupContainer: _react.PropTypes.func,
	    placeholder: _react.PropTypes.string,
	    formatter: _react.PropTypes.any,
	    showHour: _react.PropTypes.bool,
	    style: _react.PropTypes.object,
	    className: _react.PropTypes.string,
	    showSecond: _react.PropTypes.bool,
	    disabledHours: _react.PropTypes.func,
	    disabledMinutes: _react.PropTypes.func,
	    disabledSeconds: _react.PropTypes.func,
	    hideDisabledOptions: _react.PropTypes.bool,
	    onChange: _react.PropTypes.func,
	    onOpen: _react.PropTypes.func,
	    onClose: _react.PropTypes.func
	  },

	  mixins: [_mixinCommonMixin2['default']],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      defaultOpen: false,
	      style: {},
	      className: '',
	      align: {},
	      allowEmpty: true,
	      showHour: true,
	      showSecond: true,
	      disabledHours: noop,
	      disabledMinutes: noop,
	      disabledSeconds: noop,
	      hideDisabledOptions: false,
	      placement: 'bottomLeft',
	      onChange: noop,
	      onOpen: noop,
	      onClose: noop
	    };
	  },

	  getInitialState: function getInitialState() {
	    this.savePanelRef = refFn.bind(this, 'panelInstance');
	    var _props = this.props;
	    var defaultOpen = _props.defaultOpen;
	    var defaultValue = _props.defaultValue;
	    var _props$open = _props.open;
	    var open = _props$open === undefined ? defaultOpen : _props$open;
	    var _props$value = _props.value;
	    var value = _props$value === undefined ? defaultValue : _props$value;

	    return {
	      open: open,
	      value: value
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var value = nextProps.value;
	    var open = nextProps.open;

	    if ('value' in nextProps) {
	      this.setState({
	        value: value
	      });
	    }
	    if (open !== undefined) {
	      this.setState({ open: open });
	    }
	  },

	  onPanelChange: function onPanelChange(value) {
	    this.setValue(value);
	  },

	  onPanelClear: function onPanelClear() {
	    this.setValue(null);
	    this.setOpen(false);
	  },

	  onVisibleChange: function onVisibleChange(open) {
	    this.setOpen(open);
	  },

	  onEsc: function onEsc() {
	    this.setOpen(false);
	    this.refs.picker.focus();
	  },

	  onKeyDown: function onKeyDown(e) {
	    if (e.keyCode === 40) {
	      this.setOpen(true);
	    }
	  },

	  setValue: function setValue(value) {
	    if (!('value' in this.props)) {
	      this.setState({
	        value: value
	      });
	    }
	    this.props.onChange(value);
	  },

	  getFormatter: function getFormatter() {
	    var formatter = this.props.formatter;
	    var locale = this.props.locale;
	    if (formatter) {
	      if (formatter === this.lastFormatter) {
	        return this.normalFormatter;
	      }
	      this.normalFormatter = (0, _utilIndex.getFormatter)(formatter, locale);
	      this.lastFormatter = formatter;
	      return this.normalFormatter;
	    }
	    if (!this.props.showSecond) {
	      if (!this.notShowSecondFormatter) {
	        this.notShowSecondFormatter = (0, _utilIndex.getFormatter)('HH:mm', locale);
	      }
	      return this.notShowSecondFormatter;
	    }
	    if (!this.props.showHour) {
	      if (!this.notShowHourFormatter) {
	        this.notShowHourFormatter = (0, _utilIndex.getFormatter)('mm:ss', locale);
	      }
	      return this.notShowHourFormatter;
	    }
	    if (!this.normalFormatter) {
	      this.normalFormatter = (0, _utilIndex.getFormatter)('HH:mm:ss', locale);
	    }
	    return this.normalFormatter;
	  },

	  getPanelElement: function getPanelElement() {
	    var _props2 = this.props;
	    var prefixCls = _props2.prefixCls;
	    var defaultValue = _props2.defaultValue;
	    var locale = _props2.locale;
	    var placeholder = _props2.placeholder;
	    var disabledHours = _props2.disabledHours;
	    var disabledMinutes = _props2.disabledMinutes;
	    var disabledSeconds = _props2.disabledSeconds;
	    var hideDisabledOptions = _props2.hideDisabledOptions;
	    var allowEmpty = _props2.allowEmpty;
	    var showHour = _props2.showHour;
	    var showSecond = _props2.showSecond;

	    return _react2['default'].createElement(_modulePanel2['default'], {
	      prefixCls: prefixCls + '-panel',
	      ref: this.savePanelRef,
	      value: this.state.value,
	      onChange: this.onPanelChange,
	      gregorianCalendarLocale: locale.calendar,
	      onClear: this.onPanelClear,
	      defaultValue: defaultValue,
	      showHour: showHour,
	      onEsc: this.onEsc,
	      showSecond: showSecond,
	      locale: locale,
	      allowEmpty: allowEmpty,
	      formatter: this.getFormatter(),
	      placeholder: placeholder,
	      disabledHours: disabledHours,
	      disabledMinutes: disabledMinutes,
	      disabledSeconds: disabledSeconds,
	      hideDisabledOptions: hideDisabledOptions
	    });
	  },

	  setOpen: function setOpen(open, callback) {
	    var _props3 = this.props;
	    var onOpen = _props3.onOpen;
	    var onClose = _props3.onClose;

	    if (this.state.open !== open) {
	      this.setState({
	        open: open
	      }, callback);
	      var _event = {
	        open: open
	      };
	      if (open) {
	        onOpen(_event);
	      } else {
	        onClose(_event);
	      }
	    }
	  },

	  render: function render() {
	    var _props4 = this.props;
	    var prefixCls = _props4.prefixCls;
	    var placeholder = _props4.placeholder;
	    var placement = _props4.placement;
	    var align = _props4.align;
	    var disabled = _props4.disabled;
	    var transitionName = _props4.transitionName;
	    var style = _props4.style;
	    var className = _props4.className;
	    var showHour = _props4.showHour;
	    var showSecond = _props4.showSecond;
	    var getPopupContainer = _props4.getPopupContainer;
	    var _state = this.state;
	    var open = _state.open;
	    var value = _state.value;

	    var popupClassName = undefined;
	    if (!showHour || !showSecond) {
	      popupClassName = prefixCls + '-panel-narrow';
	    }
	    return _react2['default'].createElement(
	      _rcTrigger2['default'],
	      {
	        prefixCls: prefixCls + '-panel',
	        popupClassName: popupClassName,
	        popup: this.getPanelElement(),
	        popupAlign: align,
	        builtinPlacements: _utilPlacements2['default'],
	        popupPlacement: placement,
	        action: disabled ? [] : ['click'],
	        destroyPopupOnHide: true,
	        getPopupContainer: getPopupContainer,
	        popupTransitionName: transitionName,
	        popupVisible: open,
	        onPopupVisibleChange: this.onVisibleChange
	      },
	      _react2['default'].createElement(
	        'span',
	        { className: prefixCls + ' ' + className, style: style },
	        _react2['default'].createElement('input', {
	          className: prefixCls + '-input',
	          ref: 'picker', type: 'text', placeholder: placeholder,
	          readOnly: true,
	          onKeyDown: this.onKeyDown,
	          disabled: disabled, value: value && this.getFormatter().format(value) || ''
	        }),
	        _react2['default'].createElement('span', { className: prefixCls + '-icon' })
	      )
	    );
	  }
	});

	exports['default'] = Picker;
	module.exports = exports['default'];

/***/ },
/* 91 */
[820, 92],
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcUtil = __webpack_require__(93);

	var _Popup = __webpack_require__(114);

	var _Popup2 = _interopRequireDefault(_Popup);

	var _utils = __webpack_require__(137);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function noop() {}

	function returnEmptyString() {
	  return '';
	}

	var ALL_HANDLERS = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur'];

	var Trigger = _react2["default"].createClass({
	  displayName: 'Trigger',

	  propTypes: {
	    action: _react.PropTypes.any,
	    showAction: _react.PropTypes.any,
	    hideAction: _react.PropTypes.any,
	    getPopupClassNameFromAlign: _react.PropTypes.any,
	    onPopupVisibleChange: _react.PropTypes.func,
	    afterPopupVisibleChange: _react.PropTypes.func,
	    popup: _react.PropTypes.node.isRequired,
	    popupStyle: _react.PropTypes.object,
	    prefixCls: _react.PropTypes.string,
	    popupClassName: _react.PropTypes.string,
	    popupPlacement: _react.PropTypes.string,
	    builtinPlacements: _react.PropTypes.object,
	    popupTransitionName: _react.PropTypes.string,
	    popupAnimation: _react.PropTypes.any,
	    mouseEnterDelay: _react.PropTypes.number,
	    mouseLeaveDelay: _react.PropTypes.number,
	    zIndex: _react.PropTypes.number,
	    focusDelay: _react.PropTypes.number,
	    blurDelay: _react.PropTypes.number,
	    getPopupContainer: _react.PropTypes.func,
	    destroyPopupOnHide: _react.PropTypes.bool,
	    mask: _react.PropTypes.bool,
	    onPopupAlign: _react.PropTypes.func,
	    popupAlign: _react.PropTypes.object,
	    popupVisible: _react.PropTypes.bool,
	    maskTransitionName: _react.PropTypes.string,
	    maskAnimation: _react.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-trigger-popup',
	      getPopupClassNameFromAlign: returnEmptyString,
	      onPopupVisibleChange: noop,
	      afterPopupVisibleChange: noop,
	      onPopupAlign: noop,
	      popupClassName: '',
	      mouseEnterDelay: 0,
	      mouseLeaveDelay: 0.1,
	      focusDelay: 0,
	      blurDelay: 0.15,
	      popupStyle: {},
	      destroyPopupOnHide: false,
	      popupAlign: {},
	      defaultPopupVisible: false,
	      mask: false,
	      action: [],
	      showAction: [],
	      hideAction: []
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var popupVisible = void 0;
	    if ('popupVisible' in props) {
	      popupVisible = !!props.popupVisible;
	    } else {
	      popupVisible = !!props.defaultPopupVisible;
	    }
	    return {
	      popupVisible: popupVisible
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    this.componentDidUpdate({}, {
	      popupVisible: this.state.popupVisible
	    });
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ('popupVisible' in nextProps) {
	      this.setState({
	        popupVisible: !!nextProps.popupVisible
	      });
	    }
	  },
	  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	    var _this = this;

	    var props = this.props;
	    var state = this.state;
	    if (this.popupRendered) {
	      var _ret = function () {
	        var self = _this;
	        _reactDom2["default"].unstable_renderSubtreeIntoContainer(_this, _this.getPopupElement(), _this.getPopupContainer(), function renderPopup() {
	          /* eslint react/no-is-mounted:0 */
	          if (this.isMounted()) {
	            self.popupDomNode = this.getPopupDomNode();
	          } else {
	            self.popupDomNode = null;
	          }
	          if (prevState.popupVisible !== state.popupVisible) {
	            props.afterPopupVisibleChange(state.popupVisible);
	          }
	        });
	        if (props.action.indexOf('click') !== -1) {
	          if (state.popupVisible) {
	            if (!_this.clickOutsideHandler) {
	              _this.clickOutsideHandler = _rcUtil.Dom.addEventListener(document, 'mousedown', _this.onDocumentClick);
	              _this.touchOutsideHandler = _rcUtil.Dom.addEventListener(document, 'touchstart', _this.onDocumentClick);
	            }
	            return {
	              v: void 0
	            };
	          }
	        }
	        if (_this.clickOutsideHandler) {
	          _this.clickOutsideHandler.remove();
	          _this.touchOutsideHandler.remove();
	          _this.clickOutsideHandler = null;
	          _this.touchOutsideHandler = null;
	        }
	      }();

	      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    var popupContainer = this.popupContainer;
	    if (popupContainer) {
	      _reactDom2["default"].unmountComponentAtNode(popupContainer);
	      popupContainer.parentNode.removeChild(popupContainer);
	      this.popupContainer = null;
	    }
	    this.clearDelayTimer();
	    if (this.clickOutsideHandler) {
	      this.clickOutsideHandler.remove();
	      this.touchOutsideHandler.remove();
	      this.clickOutsideHandler = null;
	      this.touchOutsideHandler = null;
	    }
	  },
	  onMouseEnter: function onMouseEnter() {
	    this.delaySetPopupVisible(true, this.props.mouseEnterDelay);
	  },
	  onMouseLeave: function onMouseLeave() {
	    this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);
	  },
	  onFocus: function onFocus() {
	    this.focusTime = Date.now();
	    this.delaySetPopupVisible(true, this.props.focusDelay);
	  },
	  onMouseDown: function onMouseDown() {
	    this.preClickTime = Date.now();
	  },
	  onTouchStart: function onTouchStart() {
	    this.preTouchTime = Date.now();
	  },
	  onBlur: function onBlur() {
	    this.delaySetPopupVisible(false, this.props.blurDelay);
	  },
	  onClick: function onClick(event) {
	    // focus will trigger click
	    if (this.focusTime) {
	      var preTime = void 0;
	      if (this.preClickTime && this.preTouchTime) {
	        preTime = Math.min(this.preClickTime, this.preTouchTime);
	      } else if (this.preClickTime) {
	        preTime = this.preClickTime;
	      } else if (this.preTouchTime) {
	        preTime = this.preTouchTime;
	      }
	      if (Math.abs(preTime - this.focusTime) < 20) {
	        return;
	      }
	      this.focusTime = 0;
	    }
	    this.preClickTime = 0;
	    this.preTouchTime = 0;
	    event.preventDefault();
	    var nextVisible = !this.state.popupVisible;
	    if (this.isClickToHide() && !nextVisible || nextVisible && this.isClickToShow()) {
	      this.setPopupVisible(!this.state.popupVisible);
	    }
	  },
	  onDocumentClick: function onDocumentClick(event) {
	    var target = event.target;
	    var root = (0, _reactDom.findDOMNode)(this);
	    var popupNode = this.getPopupDomNode();
	    if (!_rcUtil.Dom.contains(root, target) && !_rcUtil.Dom.contains(popupNode, target)) {
	      this.setPopupVisible(false);
	    }
	  },
	  getPopupDomNode: function getPopupDomNode() {
	    // for test
	    return this.popupDomNode;
	  },
	  getRootDomNode: function getRootDomNode() {
	    return _reactDom2["default"].findDOMNode(this);
	  },
	  getPopupContainer: function getPopupContainer() {
	    if (!this.popupContainer) {
	      this.popupContainer = document.createElement('div');
	      var mountNode = this.props.getPopupContainer ? this.props.getPopupContainer((0, _reactDom.findDOMNode)(this)) : document.body;
	      mountNode.appendChild(this.popupContainer);
	    }
	    return this.popupContainer;
	  },
	  getPopupClassNameFromAlign: function getPopupClassNameFromAlign(align) {
	    var className = [];
	    var props = this.props;
	    var popupPlacement = props.popupPlacement;
	    var builtinPlacements = props.builtinPlacements;
	    var prefixCls = props.prefixCls;

	    if (popupPlacement && builtinPlacements) {
	      className.push((0, _utils.getPopupClassNameFromAlign)(builtinPlacements, prefixCls, align));
	    }
	    if (props.getPopupClassNameFromAlign) {
	      className.push(props.getPopupClassNameFromAlign(align));
	    }
	    return className.join(' ');
	  },
	  getPopupAlign: function getPopupAlign() {
	    var props = this.props;
	    var popupPlacement = props.popupPlacement;
	    var popupAlign = props.popupAlign;
	    var builtinPlacements = props.builtinPlacements;

	    if (popupPlacement && builtinPlacements) {
	      return (0, _utils.getAlignFromPlacement)(builtinPlacements, popupPlacement, popupAlign);
	    }
	    return popupAlign;
	  },
	  getPopupElement: function getPopupElement() {
	    var props = this.props;
	    var state = this.state;
	    var mouseProps = {};
	    if (props.action.indexOf('hover') !== -1) {
	      mouseProps.onMouseEnter = this.onMouseEnter;
	      mouseProps.onMouseLeave = this.onMouseLeave;
	    }
	    return _react2["default"].createElement(
	      _Popup2["default"],
	      _extends({
	        prefixCls: props.prefixCls,
	        destroyPopupOnHide: props.destroyPopupOnHide,
	        visible: state.popupVisible,
	        className: props.popupClassName,
	        action: props.action,
	        align: this.getPopupAlign(),
	        onAlign: props.onPopupAlign,
	        animation: props.popupAnimation,
	        getClassNameFromAlign: this.getPopupClassNameFromAlign
	      }, mouseProps, {
	        getRootDomNode: this.getRootDomNode,
	        style: props.popupStyle,
	        mask: props.mask,
	        zIndex: props.zIndex,
	        transitionName: props.popupTransitionName,
	        maskAnimation: props.maskAnimation,
	        maskTransitionName: props.maskTransitionName
	      }),
	      props.popup
	    );
	  },
	  setPopupVisible: function setPopupVisible(popupVisible) {
	    this.clearDelayTimer();
	    if (this.state.popupVisible !== popupVisible) {
	      if (!('popupVisible' in this.props)) {
	        this.setState({
	          popupVisible: popupVisible
	        });
	      }
	      this.props.onPopupVisibleChange(popupVisible);
	    }
	  },
	  delaySetPopupVisible: function delaySetPopupVisible(visible, delayS) {
	    var _this2 = this;

	    var delay = delayS * 1000;
	    this.clearDelayTimer();
	    if (delay) {
	      this.delayTimer = setTimeout(function () {
	        _this2.setPopupVisible(visible);
	        _this2.clearDelayTimer();
	      }, delay);
	    } else {
	      this.setPopupVisible(visible);
	    }
	  },
	  clearDelayTimer: function clearDelayTimer() {
	    if (this.delayTimer) {
	      clearTimeout(this.delayTimer);
	      this.delayTimer = null;
	    }
	  },
	  isClickToShow: function isClickToShow() {
	    var _props = this.props;
	    var action = _props.action;
	    var showAction = _props.showAction;

	    return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
	  },
	  isClickToHide: function isClickToHide() {
	    var _props2 = this.props;
	    var action = _props2.action;
	    var hideAction = _props2.hideAction;

	    return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
	  },
	  isMouseEnterToShow: function isMouseEnterToShow() {
	    var _props3 = this.props;
	    var action = _props3.action;
	    var showAction = _props3.showAction;

	    return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
	  },
	  isMouseLeaveToHide: function isMouseLeaveToHide() {
	    var _props4 = this.props;
	    var action = _props4.action;
	    var hideAction = _props4.hideAction;

	    return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
	  },
	  isFocusToShow: function isFocusToShow() {
	    var _props5 = this.props;
	    var action = _props5.action;
	    var showAction = _props5.showAction;

	    return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
	  },
	  isBlurToHide: function isBlurToHide() {
	    var _props6 = this.props;
	    var action = _props6.action;
	    var hideAction = _props6.hideAction;

	    return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
	  },
	  render: function render() {
	    this.popupRendered = this.popupRendered || this.state.popupVisible;
	    var props = this.props;
	    var children = props.children;
	    var child = _react2["default"].Children.only(children);
	    var childProps = child.props || {};
	    var newChildProps = {};

	    if (this.isClickToHide() || this.isClickToShow()) {
	      newChildProps.onClick = (0, _rcUtil.createChainedFunction)(this.onClick, childProps.onClick);
	      newChildProps.onMouseDown = (0, _rcUtil.createChainedFunction)(this.onMouseDown, childProps.onMouseDown);
	      newChildProps.onTouchStart = (0, _rcUtil.createChainedFunction)(this.onTouchStart, childProps.onTouchStart);
	    }
	    if (this.isMouseEnterToShow()) {
	      newChildProps.onMouseEnter = (0, _rcUtil.createChainedFunction)(this.onMouseEnter, childProps.onMouseEnter);
	    }
	    if (this.isMouseLeaveToHide()) {
	      newChildProps.onMouseLeave = (0, _rcUtil.createChainedFunction)(this.onMouseLeave, childProps.onMouseLeave);
	    }
	    if (this.isFocusToShow()) {
	      newChildProps.onFocus = (0, _rcUtil.createChainedFunction)(this.onFocus, childProps.onFocus);
	    }
	    if (this.isBlurToHide()) {
	      newChildProps.onBlur = (0, _rcUtil.createChainedFunction)(this.onBlur, childProps.onBlur);
	    }

	    ALL_HANDLERS.forEach(function (handler) {
	      var newFn = void 0;
	      if (props[handler] && newChildProps[handler]) {
	        newFn = (0, _rcUtil.createChainedFunction)(props[handler], newChildProps[handler]);
	      } else {
	        newFn = props[handler] || newChildProps[handler];
	      }
	      if (newFn) {
	        newChildProps[handler] = newFn;
	      }
	    });

	    return _react2["default"].cloneElement(child, newChildProps);
	  }
	});

	exports["default"] = Trigger;
	module.exports = exports['default'];

/***/ },
/* 93 */
[810, 94, 95, 97, 98, 99, 100, 105, 106, 111, 112, 113],
/* 94 */
17,
/* 95 */
[811, 96],
/* 96 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 97 */
[812, 96],
/* 98 */
21,
/* 99 */
[813, 100],
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var fetchKeys = __webpack_require__(101);

	module.exports = function shallowEqual(objA, objB, compare, compareContext) {

	    var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

	    if (ret !== void 0) {
	        return !!ret;
	    }

	    if (objA === objB) {
	        return true;
	    }

	    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	        return false;
	    }

	    var keysA = fetchKeys(objA);
	    var keysB = fetchKeys(objB);

	    var len = keysA.length;
	    if (len !== keysB.length) {
	        return false;
	    }

	    compareContext = compareContext || null;

	    // Test for A's keys different from B.
	    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
	    for (var i = 0; i < len; i++) {
	        var key = keysA[i];
	        if (!bHasOwnProperty(key)) {
	            return false;
	        }
	        var valueA = objA[key];
	        var valueB = objB[key];

	        var _ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
	        if (_ret === false || _ret === void 0 && valueA !== valueB) {
	            return false;
	        }
	    }

	    return true;
	};

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 3.1.2 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var getNative = __webpack_require__(102),
	    isArguments = __webpack_require__(103),
	    isArray = __webpack_require__(104);

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object != 'function' && isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object)) && length) || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;

	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keys;


/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * lodash 3.9.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = getNative;


/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.8 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value)) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8 which returns 'object' for typed array and weak map constructors,
	  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isArguments;


/***/ },
/* 104 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.4 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]',
	    funcTag = '[object Function]';

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = isArray;


/***/ },
/* 105 */
28,
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = addEventListenerWrap;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _addDomEventListener = __webpack_require__(107);

	var _addDomEventListener2 = _interopRequireDefault(_addDomEventListener);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function addEventListenerWrap(target, eventType, cb) {
	  /* eslint camelcase: 2 */
	  var callback = _reactDom2['default'].unstable_batchedUpdates ? function run(e) {
	    _reactDom2['default'].unstable_batchedUpdates(cb, e);
	  } : cb;
	  return (0, _addDomEventListener2['default'])(target, eventType, callback);
	}

	module.exports = exports['default'];

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = addEventListener;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _EventObject = __webpack_require__(108);

	var _EventObject2 = _interopRequireDefault(_EventObject);

	function addEventListener(target, eventType, callback) {
	  function wrapCallback(e) {
	    var ne = new _EventObject2['default'](e);
	    callback.call(target, ne);
	  }

	  if (target.addEventListener) {
	    target.addEventListener(eventType, wrapCallback, false);
	    return {
	      remove: function remove() {
	        target.removeEventListener(eventType, wrapCallback, false);
	      }
	    };
	  } else if (target.attachEvent) {
	    target.attachEvent('on' + eventType, wrapCallback);
	    return {
	      remove: function remove() {
	        target.detachEvent('on' + eventType, wrapCallback);
	      }
	    };
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @ignore
	 * event object for dom
	 * @author yiminghe@gmail.com
	 */

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _EventBaseObject = __webpack_require__(109);

	var _EventBaseObject2 = _interopRequireDefault(_EventBaseObject);

	var _objectAssign = __webpack_require__(110);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var TRUE = true;
	var FALSE = false;
	var commonProps = ['altKey', 'bubbles', 'cancelable', 'ctrlKey', 'currentTarget', 'eventPhase', 'metaKey', 'shiftKey', 'target', 'timeStamp', 'view', 'type'];

	function isNullOrUndefined(w) {
	  return w === null || w === undefined;
	}

	var eventNormalizers = [{
	  reg: /^key/,
	  props: ['char', 'charCode', 'key', 'keyCode', 'which'],
	  fix: function fix(event, nativeEvent) {
	    if (isNullOrUndefined(event.which)) {
	      event.which = !isNullOrUndefined(nativeEvent.charCode) ? nativeEvent.charCode : nativeEvent.keyCode;
	    }

	    // add metaKey to non-Mac browsers (use ctrl for PC 's and Meta for Macs)
	    if (event.metaKey === undefined) {
	      event.metaKey = event.ctrlKey;
	    }
	  }
	}, {
	  reg: /^touch/,
	  props: ['touches', 'changedTouches', 'targetTouches']
	}, {
	  reg: /^hashchange$/,
	  props: ['newURL', 'oldURL']
	}, {
	  reg: /^gesturechange$/i,
	  props: ['rotation', 'scale']
	}, {
	  reg: /^(mousewheel|DOMMouseScroll)$/,
	  props: [],
	  fix: function fix(event, nativeEvent) {
	    var deltaX = undefined;
	    var deltaY = undefined;
	    var delta = undefined;
	    var wheelDelta = nativeEvent.wheelDelta;
	    var axis = nativeEvent.axis;
	    var wheelDeltaY = nativeEvent.wheelDeltaY;
	    var wheelDeltaX = nativeEvent.wheelDeltaX;
	    var detail = nativeEvent.detail;

	    // ie/webkit
	    if (wheelDelta) {
	      delta = wheelDelta / 120;
	    }

	    // gecko
	    if (detail) {
	      // press control e.detail == 1 else e.detail == 3
	      delta = 0 - (detail % 3 === 0 ? detail / 3 : detail);
	    }

	    // Gecko
	    if (axis !== undefined) {
	      if (axis === event.HORIZONTAL_AXIS) {
	        deltaY = 0;
	        deltaX = 0 - delta;
	      } else if (axis === event.VERTICAL_AXIS) {
	        deltaX = 0;
	        deltaY = delta;
	      }
	    }

	    // Webkit
	    if (wheelDeltaY !== undefined) {
	      deltaY = wheelDeltaY / 120;
	    }
	    if (wheelDeltaX !== undefined) {
	      deltaX = -1 * wheelDeltaX / 120;
	    }

	    // 默认 deltaY (ie)
	    if (!deltaX && !deltaY) {
	      deltaY = delta;
	    }

	    if (deltaX !== undefined) {
	      /**
	       * deltaX of mousewheel event
	       * @property deltaX
	       * @member Event.DomEvent.Object
	       */
	      event.deltaX = deltaX;
	    }

	    if (deltaY !== undefined) {
	      /**
	       * deltaY of mousewheel event
	       * @property deltaY
	       * @member Event.DomEvent.Object
	       */
	      event.deltaY = deltaY;
	    }

	    if (delta !== undefined) {
	      /**
	       * delta of mousewheel event
	       * @property delta
	       * @member Event.DomEvent.Object
	       */
	      event.delta = delta;
	    }
	  }
	}, {
	  reg: /^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,
	  props: ['buttons', 'clientX', 'clientY', 'button', 'offsetX', 'relatedTarget', 'which', 'fromElement', 'toElement', 'offsetY', 'pageX', 'pageY', 'screenX', 'screenY'],
	  fix: function fix(event, nativeEvent) {
	    var eventDoc = undefined;
	    var doc = undefined;
	    var body = undefined;
	    var target = event.target;
	    var button = nativeEvent.button;

	    // Calculate pageX/Y if missing and clientX/Y available
	    if (target && isNullOrUndefined(event.pageX) && !isNullOrUndefined(nativeEvent.clientX)) {
	      eventDoc = target.ownerDocument || document;
	      doc = eventDoc.documentElement;
	      body = eventDoc.body;
	      event.pageX = nativeEvent.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
	      event.pageY = nativeEvent.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
	    }

	    // which for click: 1 === left; 2 === middle; 3 === right
	    // do not use button
	    if (!event.which && button !== undefined) {
	      if (button & 1) {
	        event.which = 1;
	      } else if (button & 2) {
	        event.which = 3;
	      } else if (button & 4) {
	        event.which = 2;
	      } else {
	        event.which = 0;
	      }
	    }

	    // add relatedTarget, if necessary
	    if (!event.relatedTarget && event.fromElement) {
	      event.relatedTarget = event.fromElement === target ? event.toElement : event.fromElement;
	    }

	    return event;
	  }
	}];

	function retTrue() {
	  return TRUE;
	}

	function retFalse() {
	  return FALSE;
	}

	function DomEventObject(nativeEvent) {
	  var type = nativeEvent.type;

	  var isNative = typeof nativeEvent.stopPropagation === 'function' || typeof nativeEvent.cancelBubble === 'boolean';

	  _EventBaseObject2['default'].call(this);

	  this.nativeEvent = nativeEvent;

	  // in case dom event has been mark as default prevented by lower dom node
	  var isDefaultPrevented = retFalse;
	  if ('defaultPrevented' in nativeEvent) {
	    isDefaultPrevented = nativeEvent.defaultPrevented ? retTrue : retFalse;
	  } else if ('getPreventDefault' in nativeEvent) {
	    // https://bugzilla.mozilla.org/show_bug.cgi?id=691151
	    isDefaultPrevented = nativeEvent.getPreventDefault() ? retTrue : retFalse;
	  } else if ('returnValue' in nativeEvent) {
	    isDefaultPrevented = nativeEvent.returnValue === FALSE ? retTrue : retFalse;
	  }

	  this.isDefaultPrevented = isDefaultPrevented;

	  var fixFns = [];
	  var fixFn = undefined;
	  var l = undefined;
	  var prop = undefined;
	  var props = commonProps.concat();

	  eventNormalizers.forEach(function (normalizer) {
	    if (type.match(normalizer.reg)) {
	      props = props.concat(normalizer.props);
	      if (normalizer.fix) {
	        fixFns.push(normalizer.fix);
	      }
	    }
	  });

	  l = props.length;

	  // clone properties of the original event object
	  while (l) {
	    prop = props[--l];
	    this[prop] = nativeEvent[prop];
	  }

	  // fix target property, if necessary
	  if (!this.target && isNative) {
	    this.target = nativeEvent.srcElement || document; // srcElement might not be defined either
	  }

	  // check if target is a text node (safari)
	  if (this.target && this.target.nodeType === 3) {
	    this.target = this.target.parentNode;
	  }

	  l = fixFns.length;

	  while (l) {
	    fixFn = fixFns[--l];
	    fixFn(this, nativeEvent);
	  }

	  this.timeStamp = nativeEvent.timeStamp || Date.now();
	}

	var EventBaseObjectProto = _EventBaseObject2['default'].prototype;

	(0, _objectAssign2['default'])(DomEventObject.prototype, EventBaseObjectProto, {
	  constructor: DomEventObject,

	  preventDefault: function preventDefault() {
	    var e = this.nativeEvent;

	    // if preventDefault exists run it on the original event
	    if (e.preventDefault) {
	      e.preventDefault();
	    } else {
	      // otherwise set the returnValue property of the original event to FALSE (IE)
	      e.returnValue = FALSE;
	    }

	    EventBaseObjectProto.preventDefault.call(this);
	  },

	  stopPropagation: function stopPropagation() {
	    var e = this.nativeEvent;

	    // if stopPropagation exists run it on the original event
	    if (e.stopPropagation) {
	      e.stopPropagation();
	    } else {
	      // otherwise set the cancelBubble property of the original event to TRUE (IE)
	      e.cancelBubble = TRUE;
	    }

	    EventBaseObjectProto.stopPropagation.call(this);
	  }
	});

	exports['default'] = DomEventObject;
	module.exports = exports['default'];

/***/ },
/* 109 */
32,
/* 110 */
/***/ function(module, exports) {

	/* eslint-disable no-unused-vars */
	'use strict';
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	module.exports = Object.assign || function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 111 */
34,
/* 112 */
35,
/* 113 */
36,
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcAlign = __webpack_require__(115);

	var _rcAlign2 = _interopRequireDefault(_rcAlign);

	var _rcAnimate = __webpack_require__(126);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _PopupInner = __webpack_require__(135);

	var _PopupInner2 = _interopRequireDefault(_PopupInner);

	var _LazyRenderBox = __webpack_require__(136);

	var _LazyRenderBox2 = _interopRequireDefault(_LazyRenderBox);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var Popup = _react2["default"].createClass({
	  displayName: 'Popup',

	  propTypes: {
	    visible: _react.PropTypes.bool,
	    style: _react.PropTypes.object,
	    getClassNameFromAlign: _react.PropTypes.func,
	    onAlign: _react.PropTypes.func,
	    getRootDomNode: _react.PropTypes.func,
	    onMouseEnter: _react.PropTypes.func,
	    align: _react.PropTypes.any,
	    destroyPopupOnHide: _react.PropTypes.bool,
	    className: _react.PropTypes.string,
	    prefixCls: _react.PropTypes.string,
	    onMouseLeave: _react.PropTypes.func
	  },

	  componentDidMount: function componentDidMount() {
	    this.rootNode = this.getPopupDomNode();
	  },
	  onAlign: function onAlign(popupDomNode, align) {
	    var props = this.props;
	    var alignClassName = props.getClassNameFromAlign(props.align);
	    var currentAlignClassName = props.getClassNameFromAlign(align);
	    if (alignClassName !== currentAlignClassName) {
	      this.currentAlignClassName = currentAlignClassName;
	      popupDomNode.className = this.getClassName(currentAlignClassName);
	    }
	    props.onAlign(popupDomNode, align);
	  },
	  getPopupDomNode: function getPopupDomNode() {
	    return _reactDom2["default"].findDOMNode(this.refs.popup);
	  },
	  getTarget: function getTarget() {
	    return this.props.getRootDomNode();
	  },
	  getMaskTransitionName: function getMaskTransitionName() {
	    var props = this.props;
	    var transitionName = props.maskTransitionName;
	    var animation = props.maskAnimation;
	    if (!transitionName && animation) {
	      transitionName = props.prefixCls + '-' + animation;
	    }
	    return transitionName;
	  },
	  getTransitionName: function getTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = props.prefixCls + '-' + props.animation;
	    }
	    return transitionName;
	  },
	  getClassName: function getClassName(currentAlignClassName) {
	    return this.props.prefixCls + ' ' + this.props.className + ' ' + currentAlignClassName;
	  },
	  getPopupElement: function getPopupElement() {
	    var props = this.props;
	    var align = props.align;
	    var style = props.style;
	    var visible = props.visible;
	    var prefixCls = props.prefixCls;
	    var destroyPopupOnHide = props.destroyPopupOnHide;

	    var className = this.getClassName(this.currentAlignClassName || props.getClassNameFromAlign(align));
	    var hiddenClassName = prefixCls + '-hidden';
	    if (!visible) {
	      this.currentAlignClassName = null;
	    }
	    var newStyle = _extends({}, style, this.getZIndexStyle());
	    var popupInnerProps = {
	      className: className,
	      prefixCls: prefixCls,
	      ref: 'popup',
	      onMouseEnter: props.onMouseEnter,
	      onMouseLeave: props.onMouseLeave,
	      style: newStyle
	    };
	    if (destroyPopupOnHide) {
	      return _react2["default"].createElement(
	        _rcAnimate2["default"],
	        {
	          component: '',
	          exclusive: true,
	          transitionAppear: true,
	          transitionName: this.getTransitionName()
	        },
	        visible ? _react2["default"].createElement(
	          _rcAlign2["default"],
	          {
	            target: this.getTarget,
	            key: 'popup',
	            monitorWindowResize: true,
	            align: align,
	            onAlign: this.onAlign
	          },
	          _react2["default"].createElement(
	            _PopupInner2["default"],
	            _extends({
	              visible: true
	            }, popupInnerProps),
	            props.children
	          )
	        ) : null
	      );
	    }
	    return _react2["default"].createElement(
	      _rcAnimate2["default"],
	      {
	        component: '',
	        exclusive: true,
	        transitionAppear: true,
	        transitionName: this.getTransitionName(),
	        showProp: 'xVisible'
	      },
	      _react2["default"].createElement(
	        _rcAlign2["default"],
	        {
	          target: this.getTarget,
	          key: 'popup',
	          monitorWindowResize: true,
	          xVisible: visible,
	          childrenProps: { visible: 'xVisible' },
	          disabled: !visible,
	          align: align,
	          onAlign: this.onAlign
	        },
	        _react2["default"].createElement(
	          _PopupInner2["default"],
	          _extends({
	            hiddenClassName: hiddenClassName
	          }, popupInnerProps),
	          props.children
	        )
	      )
	    );
	  },
	  getZIndexStyle: function getZIndexStyle() {
	    var style = {};
	    var props = this.props;
	    if (props.zIndex !== undefined) {
	      style.zIndex = props.zIndex;
	    }
	    return style;
	  },
	  getMaskElement: function getMaskElement() {
	    var props = this.props;
	    var maskElement = void 0;
	    if (props.mask) {
	      var maskTransition = this.getMaskTransitionName();
	      maskElement = _react2["default"].createElement(_LazyRenderBox2["default"], {
	        style: this.getZIndexStyle(),
	        key: 'mask',
	        className: props.prefixCls + '-mask',
	        hiddenClassName: props.prefixCls + '-mask-hidden',
	        visible: props.visible
	      });
	      if (maskTransition) {
	        maskElement = _react2["default"].createElement(
	          _rcAnimate2["default"],
	          {
	            key: 'mask',
	            showProp: 'visible',
	            transitionAppear: true,
	            component: '',
	            transitionName: maskTransition
	          },
	          maskElement
	        );
	      }
	    }
	    return maskElement;
	  },
	  render: function render() {
	    return _react2["default"].createElement(
	      'div',
	      null,
	      this.getMaskElement(),
	      this.getPopupElement()
	    );
	  }
	});

	exports["default"] = Popup;
	module.exports = exports['default'];

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	// export this package's api
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Align = __webpack_require__(116);

	var _Align2 = _interopRequireDefault(_Align);

	exports['default'] = _Align2['default'];
	module.exports = exports['default'];

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _domAlign = __webpack_require__(117);

	var _domAlign2 = _interopRequireDefault(_domAlign);

	var _rcUtil = __webpack_require__(93);

	var _isWindow = __webpack_require__(125);

	var _isWindow2 = _interopRequireDefault(_isWindow);

	function buffer(fn, ms) {
	  var timer = undefined;
	  return function bufferFn() {
	    if (timer) {
	      clearTimeout(timer);
	    }
	    timer = setTimeout(fn, ms);
	  };
	}

	var Align = _react2['default'].createClass({
	  displayName: 'Align',

	  propTypes: {
	    childrenProps: _react.PropTypes.object,
	    align: _react.PropTypes.object.isRequired,
	    target: _react.PropTypes.func,
	    onAlign: _react.PropTypes.func,
	    monitorBufferTime: _react.PropTypes.number,
	    monitorWindowResize: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    children: _react.PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      target: function target() {
	        return window;
	      },
	      onAlign: function onAlign() {},
	      monitorBufferTime: 50,
	      monitorWindowResize: false,
	      disabled: false
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var props = this.props;
	    // if parent ref not attached .... use document.getElementById
	    if (!props.disabled) {
	      var source = _reactDom2['default'].findDOMNode(this);
	      props.onAlign(source, (0, _domAlign2['default'])(source, props.target(), props.align));
	      if (props.monitorWindowResize) {
	        this.startMonitorWindowResize();
	      }
	    }
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var reAlign = false;
	    var props = this.props;
	    var currentTarget = undefined;

	    if (!props.disabled) {
	      if (prevProps.disabled || prevProps.align !== props.align) {
	        reAlign = true;
	        currentTarget = props.target();
	      } else {
	        var lastTarget = prevProps.target();
	        currentTarget = props.target();
	        if ((0, _isWindow2['default'])(lastTarget) && (0, _isWindow2['default'])(currentTarget)) {
	          reAlign = false;
	        } else if (lastTarget !== currentTarget) {
	          reAlign = true;
	        }
	      }
	    }

	    if (reAlign) {
	      var source = _reactDom2['default'].findDOMNode(this);
	      props.onAlign(source, (0, _domAlign2['default'])(source, currentTarget, props.align));
	    }

	    if (props.monitorWindowResize && !props.disabled) {
	      this.startMonitorWindowResize();
	    } else {
	      this.stopMonitorWindowResize();
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this.stopMonitorWindowResize();
	  },

	  onWindowResize: function onWindowResize() {
	    var props = this.props;
	    if (!props.disabled) {
	      var source = _reactDom2['default'].findDOMNode(this);
	      props.onAlign(source, (0, _domAlign2['default'])(source, props.target(), props.align));
	    }
	  },

	  startMonitorWindowResize: function startMonitorWindowResize() {
	    if (!this.resizeHandler) {
	      this.resizeHandler = _rcUtil.Dom.addEventListener(window, 'resize', buffer(this.onWindowResize, this.props.monitorBufferTime));
	    }
	  },

	  stopMonitorWindowResize: function stopMonitorWindowResize() {
	    if (this.resizeHandler) {
	      this.resizeHandler.remove();
	      this.resizeHandler = null;
	    }
	  },

	  render: function render() {
	    var _props = this.props;
	    var childrenProps = _props.childrenProps;
	    var children = _props.children;

	    var child = _react2['default'].Children.only(children);
	    if (childrenProps) {
	      var newProps = {};
	      for (var prop in childrenProps) {
	        if (childrenProps.hasOwnProperty(prop)) {
	          newProps[prop] = this.props[childrenProps[prop]];
	        }
	      }
	      return _react2['default'].cloneElement(child, newProps);
	    }
	    return child;
	  }
	});

	exports['default'] = Align;
	module.exports = exports['default'];

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * align dom node flexibly
	 * @author yiminghe@gmail.com
	 */

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utils = __webpack_require__(118);

	var _utils2 = _interopRequireDefault(_utils);

	var _getOffsetParent = __webpack_require__(119);

	var _getOffsetParent2 = _interopRequireDefault(_getOffsetParent);

	var _getVisibleRectForElement = __webpack_require__(120);

	var _getVisibleRectForElement2 = _interopRequireDefault(_getVisibleRectForElement);

	var _adjustForViewport = __webpack_require__(121);

	var _adjustForViewport2 = _interopRequireDefault(_adjustForViewport);

	var _getRegion = __webpack_require__(122);

	var _getRegion2 = _interopRequireDefault(_getRegion);

	var _getElFuturePos = __webpack_require__(123);

	var _getElFuturePos2 = _interopRequireDefault(_getElFuturePos);

	// http://yiminghe.iteye.com/blog/1124720

	function isFailX(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
	}

	function isFailY(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
	}

	function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
	}

	function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
	}

	function flip(points, reg, map) {
	  var ret = [];
	  _utils2['default'].each(points, function (p) {
	    ret.push(p.replace(reg, function (m) {
	      return map[m];
	    }));
	  });
	  return ret;
	}

	function flipOffset(offset, index) {
	  offset[index] = -offset[index];
	  return offset;
	}

	function convertOffset(str, offsetLen) {
	  var n = undefined;
	  if (/%$/.test(str)) {
	    n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
	  } else {
	    n = parseInt(str, 10);
	  }
	  return n || 0;
	}

	function normalizeOffset(offset, el) {
	  offset[0] = convertOffset(offset[0], el.width);
	  offset[1] = convertOffset(offset[1], el.height);
	}

	function domAlign(el, refNode, align) {
	  var points = align.points;
	  var offset = align.offset || [0, 0];
	  var targetOffset = align.targetOffset || [0, 0];
	  var overflow = align.overflow;
	  var target = align.target || refNode;
	  var source = align.source || el;
	  offset = [].concat(offset);
	  targetOffset = [].concat(targetOffset);
	  overflow = overflow || {};
	  var newOverflowCfg = {};

	  var fail = 0;
	  // 当前节点可以被放置的显示区域
	  var visibleRect = (0, _getVisibleRectForElement2['default'])(source);
	  // 当前节点所占的区域, left/top/width/height
	  var elRegion = (0, _getRegion2['default'])(source);
	  // 参照节点所占的区域, left/top/width/height
	  var refNodeRegion = (0, _getRegion2['default'])(target);
	  // 将 offset 转换成数值，支持百分比
	  normalizeOffset(offset, elRegion);
	  normalizeOffset(targetOffset, refNodeRegion);
	  // 当前节点将要被放置的位置
	  var elFuturePos = (0, _getElFuturePos2['default'])(elRegion, refNodeRegion, points, offset, targetOffset);
	  // 当前节点将要所处的区域
	  var newElRegion = _utils2['default'].merge(elRegion, elFuturePos);

	  // 如果可视区域不能完全放置当前节点时允许调整
	  if (visibleRect && (overflow.adjustX || overflow.adjustY)) {
	    if (overflow.adjustX) {
	      // 如果横向不能放下
	      if (isFailX(elFuturePos, elRegion, visibleRect)) {
	        // 对齐位置反下
	        var newPoints = flip(points, /[lr]/ig, {
	          l: 'r',
	          r: 'l'
	        });
	        // 偏移量也反下
	        var newOffset = flipOffset(offset, 0);
	        var newTargetOffset = flipOffset(targetOffset, 0);
	        var newElFuturePos = (0, _getElFuturePos2['default'])(elRegion, refNodeRegion, newPoints, newOffset, newTargetOffset);
	        if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
	          fail = 1;
	          points = newPoints;
	          offset = newOffset;
	          targetOffset = newTargetOffset;
	        }
	      }
	    }

	    if (overflow.adjustY) {
	      // 如果纵向不能放下
	      if (isFailY(elFuturePos, elRegion, visibleRect)) {
	        // 对齐位置反下
	        var newPoints = flip(points, /[tb]/ig, {
	          t: 'b',
	          b: 't'
	        });
	        // 偏移量也反下
	        var newOffset = flipOffset(offset, 1);
	        var newTargetOffset = flipOffset(targetOffset, 1);
	        var newElFuturePos = (0, _getElFuturePos2['default'])(elRegion, refNodeRegion, newPoints, newOffset, newTargetOffset);
	        if (!isCompleteFailY(newElFuturePos, elRegion, visibleRect)) {
	          fail = 1;
	          points = newPoints;
	          offset = newOffset;
	          targetOffset = newTargetOffset;
	        }
	      }
	    }

	    // 如果失败，重新计算当前节点将要被放置的位置
	    if (fail) {
	      elFuturePos = (0, _getElFuturePos2['default'])(elRegion, refNodeRegion, points, offset, targetOffset);
	      _utils2['default'].mix(newElRegion, elFuturePos);
	    }

	    // 检查反下后的位置是否可以放下了
	    // 如果仍然放不下只有指定了可以调整当前方向才调整
	    newOverflowCfg.adjustX = overflow.adjustX && isFailX(elFuturePos, elRegion, visibleRect);

	    newOverflowCfg.adjustY = overflow.adjustY && isFailY(elFuturePos, elRegion, visibleRect);

	    // 确实要调整，甚至可能会调整高度宽度
	    if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
	      newElRegion = (0, _adjustForViewport2['default'])(elFuturePos, elRegion, visibleRect, newOverflowCfg);
	    }
	  }

	  // need judge to in case set fixed with in css on height auto element
	  if (newElRegion.width !== elRegion.width) {
	    _utils2['default'].css(source, 'width', source.width() + newElRegion.width - elRegion.width);
	  }

	  if (newElRegion.height !== elRegion.height) {
	    _utils2['default'].css(source, 'height', source.height() + newElRegion.height - elRegion.height);
	  }

	  // https://github.com/kissyteam/kissy/issues/190
	  // http://localhost:8888/kissy/src/overlay/demo/other/relative_align/align.html
	  // 相对于屏幕位置没变，而 left/top 变了
	  // 例如 <div 'relative'><el absolute></div>
	  _utils2['default'].offset(source, {
	    left: newElRegion.left,
	    top: newElRegion.top
	  }, {
	    useCssRight: align.useCssRight,
	    useCssBottom: align.useCssBottom
	  });

	  return {
	    points: points,
	    offset: offset,
	    targetOffset: targetOffset,
	    overflow: newOverflowCfg
	  };
	}

	domAlign.__getOffsetParent = _getOffsetParent2['default'];

	domAlign.__getVisibleRectForElement = _getVisibleRectForElement2['default'];

	exports['default'] = domAlign;

	/**
	 *  2012-04-26 yiminghe@gmail.com
	 *   - 优化智能对齐算法
	 *   - 慎用 resizeXX
	 *
	 *  2011-07-13 yiminghe@gmail.com note:
	 *   - 增加智能对齐，以及大小调整选项
	 **/
	module.exports = exports['default'];

/***/ },
/* 118 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;

	var getComputedStyleX = undefined;

	function css(el, name, v) {
	  var value = v;
	  if (typeof name === 'object') {
	    for (var i in name) {
	      if (name.hasOwnProperty(i)) {
	        css(el, i, name[i]);
	      }
	    }
	    return undefined;
	  }
	  if (typeof value !== 'undefined') {
	    if (typeof value === 'number') {
	      value = value + 'px';
	    }
	    el.style[name] = value;
	    return undefined;
	  }
	  return getComputedStyleX(el, name);
	}

	function getClientPosition(elem) {
	  var box = undefined;
	  var x = undefined;
	  var y = undefined;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
	  box = elem.getBoundingClientRect();

	  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
	  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
	  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

	  x = box.left;
	  y = box.top;

	  // In IE, most of the time, 2 extra pixels are added to the top and left
	  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
	  // IE6 standards mode, this border can be overridden by setting the
	  // document element's border to zero -- thus, we cannot rely on the
	  // offset always being 2 pixels.

	  // In quirks mode, the offset can be determined by querying the body's
	  // clientLeft/clientTop, but in standards mode, it is found by querying
	  // the document element's clientLeft/clientTop.  Since we already called
	  // getClientBoundingRect we have already forced a reflow, so it is not
	  // too expensive just to query them all.

	  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
	  // 窗口边框标准是设 documentElement ,quirks 时设置 body
	  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
	  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
	  // 标准 ie 下 docElem.clientTop 就是 border-top
	  // ie7 html 即窗口边框改变不了。永远为 2
	  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;

	  return { left: x, top: y };
	}

	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}

	function getScrollLeft(w) {
	  return getScroll(w);
	}

	function getScrollTop(w) {
	  return getScroll(w, true);
	}

	function getOffset(el) {
	  var pos = getClientPosition(el);
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScrollLeft(w);
	  pos.top += getScrollTop(w);
	  return pos;
	}
	function _getComputedStyle(elem, name, cs) {
	  var computedStyle = cs;
	  var val = '';
	  var d = elem.ownerDocument;
	  computedStyle = computedStyle || d.defaultView.getComputedStyle(elem, null);

	  // https://github.com/kissyteam/kissy/issues/61
	  if (computedStyle) {
	    val = computedStyle.getPropertyValue(name) || computedStyle[name];
	  }

	  return val;
	}

	var _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');
	var RE_POS = /^(top|right|bottom|left)$/;
	var CURRENT_STYLE = 'currentStyle';
	var RUNTIME_STYLE = 'runtimeStyle';
	var LEFT = 'left';
	var PX = 'px';

	function _getComputedStyleIE(elem, name) {
	  // currentStyle maybe null
	  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
	  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];

	  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
	  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
	  // 在 ie 下不对，需要直接用 offset 方式
	  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了

	  // From the awesome hack by Dean Edwards
	  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	  // If we're not dealing with a regular pixel number
	  // but a number that has a weird ending, we need to convert it to pixels
	  // exclude left right for relativity
	  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
	    // Remember the original values
	    var style = elem.style;
	    var left = style[LEFT];
	    var rsLeft = elem[RUNTIME_STYLE][LEFT];

	    // prevent flashing of content
	    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];

	    // Put in the new values to get a computed value out
	    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
	    ret = style.pixelLeft + PX;

	    // Revert the changed values
	    style[LEFT] = left;

	    elem[RUNTIME_STYLE][LEFT] = rsLeft;
	  }
	  return ret === '' ? 'auto' : ret;
	}

	if (typeof window !== 'undefined') {
	  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
	}

	function getOffsetDirection(dir, option) {
	  if (dir === 'left') {
	    return option.useCssRight ? 'right' : dir;
	  }
	  return option.useCssBottom ? 'bottom' : dir;
	}

	function oppositeOffsetDirection(dir) {
	  if (dir === 'left') {
	    return 'right';
	  } else if (dir === 'right') {
	    return 'left';
	  } else if (dir === 'top') {
	    return 'bottom';
	  } else if (dir === 'bottom') {
	    return 'top';
	  }
	}

	// 设置 elem 相对 elem.ownerDocument 的坐标
	function setOffset(elem, offset, option) {
	  // set position first, in-case top/left are set even on static elem
	  if (css(elem, 'position') === 'static') {
	    elem.style.position = 'relative';
	  }
	  var presetH = -999;
	  var presetV = -999;
	  var horizontalProperty = getOffsetDirection('left', option);
	  var verticalProperty = getOffsetDirection('top', option);
	  var oppositeHorizontalProperty = oppositeOffsetDirection(horizontalProperty);
	  var oppositeVerticalProperty = oppositeOffsetDirection(verticalProperty);

	  if (horizontalProperty !== 'left') {
	    presetH = 999;
	  }

	  if (verticalProperty !== 'top') {
	    presetV = 999;
	  }

	  if ('left' in offset) {
	    elem.style[oppositeHorizontalProperty] = '';
	    elem.style[horizontalProperty] = presetH + 'px';
	  }
	  if ('top' in offset) {
	    elem.style[oppositeVerticalProperty] = '';
	    elem.style[verticalProperty] = presetV + 'px';
	  }
	  var old = getOffset(elem);
	  var ret = {};
	  var key = undefined;
	  for (key in offset) {
	    if (offset.hasOwnProperty(key)) {
	      var dir = getOffsetDirection(key, option);
	      var preset = key === 'left' ? presetH : presetV;
	      if (dir === key) {
	        ret[dir] = preset + offset[key] - old[key];
	      } else {
	        ret[dir] = preset + old[key] - offset[key];
	      }
	    }
	  }
	  css(elem, ret);
	}

	function each(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(arr[i]);
	  }
	}

	function isBorderBoxFn(elem) {
	  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
	}

	var BOX_MODELS = ['margin', 'border', 'padding'];
	var CONTENT_INDEX = -1;
	var PADDING_INDEX = 2;
	var BORDER_INDEX = 1;
	var MARGIN_INDEX = 0;

	function swap(elem, options, callback) {
	  var old = {};
	  var style = elem.style;
	  var name = undefined;

	  // Remember the old values, and insert the new ones
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      old[name] = style[name];
	      style[name] = options[name];
	    }
	  }

	  callback.call(elem);

	  // Revert the old values
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      style[name] = old[name];
	    }
	  }
	}

	function getPBMWidth(elem, props, which) {
	  var value = 0;
	  var prop = undefined;
	  var j = undefined;
	  var i = undefined;
	  for (j = 0; j < props.length; j++) {
	    prop = props[j];
	    if (prop) {
	      for (i = 0; i < which.length; i++) {
	        var cssProp = undefined;
	        if (prop === 'border') {
	          cssProp = prop + which[i] + 'Width';
	        } else {
	          cssProp = prop + which[i];
	        }
	        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
	      }
	    }
	  }
	  return value;
	}

	/**
	 * A crude way of determining if an object is a window
	 * @member util
	 */
	function isWindow(obj) {
	  // must use == for ie8
	  /* eslint eqeqeq:0 */
	  return obj !== null && obj !== undefined && obj == obj.window;
	}

	var domUtils = {};

	each(['Width', 'Height'], function (name) {
	  domUtils['doc' + name] = function (refWin) {
	    var d = refWin.document;
	    return Math.max(
	    // firefox chrome documentElement.scrollHeight< body.scrollHeight
	    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
	    d.documentElement['scroll' + name],
	    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
	    d.body['scroll' + name], domUtils['viewport' + name](d));
	  };

	  domUtils['viewport' + name] = function (win) {
	    // pc browser includes scrollbar in window.innerWidth
	    var prop = 'client' + name;
	    var doc = win.document;
	    var body = doc.body;
	    var documentElement = doc.documentElement;
	    var documentElementProp = documentElement[prop];
	    // 标准模式取 documentElement
	    // backcompat 取 body
	    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
	  };
	});

	/*
	 得到元素的大小信息
	 @param elem
	 @param name
	 @param {String} [extra]  'padding' : (css width) + padding
	 'border' : (css width) + padding + border
	 'margin' : (css width) + padding + border + margin
	 */
	function getWH(elem, name, ex) {
	  var extra = ex;
	  if (isWindow(elem)) {
	    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
	  } else if (elem.nodeType === 9) {
	    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
	  }
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	  var borderBoxValue = name === 'width' ? elem.offsetWidth : elem.offsetHeight;
	  var computedStyle = getComputedStyleX(elem);
	  var isBorderBox = isBorderBoxFn(elem, computedStyle);
	  var cssBoxValue = 0;
	  if (borderBoxValue === null || borderBoxValue === undefined || borderBoxValue <= 0) {
	    borderBoxValue = undefined;
	    // Fall back to computed then un computed css if necessary
	    cssBoxValue = getComputedStyleX(elem, name);
	    if (cssBoxValue === null || cssBoxValue === undefined || Number(cssBoxValue) < 0) {
	      cssBoxValue = elem.style[name] || 0;
	    }
	    // Normalize '', auto, and prepare for extra
	    cssBoxValue = parseFloat(cssBoxValue) || 0;
	  }
	  if (extra === undefined) {
	    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
	  }
	  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
	  var val = borderBoxValue || cssBoxValue;
	  if (extra === CONTENT_INDEX) {
	    if (borderBoxValueOrIsBorderBox) {
	      return val - getPBMWidth(elem, ['border', 'padding'], which, computedStyle);
	    }
	    return cssBoxValue;
	  } else if (borderBoxValueOrIsBorderBox) {
	    if (extra === BORDER_INDEX) {
	      return val;
	    }
	    return val + (extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which, computedStyle) : getPBMWidth(elem, ['margin'], which, computedStyle));
	  }
	  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which, computedStyle);
	}

	var cssShow = { position: 'absolute', visibility: 'hidden', display: 'block' };

	// fix #119 : https://github.com/kissyteam/kissy/issues/119
	function getWHIgnoreDisplay() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }

	  var val = undefined;
	  var elem = args[0];
	  // in case elem is window
	  // elem.offsetWidth === undefined
	  if (elem.offsetWidth !== 0) {
	    val = getWH.apply(undefined, args);
	  } else {
	    swap(elem, cssShow, function () {
	      val = getWH.apply(undefined, args);
	    });
	  }
	  return val;
	}

	each(['width', 'height'], function (name) {
	  var first = name.charAt(0).toUpperCase() + name.slice(1);
	  domUtils['outer' + first] = function (el, includeMargin) {
	    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
	  };
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

	  domUtils[name] = function (elem, v) {
	    var val = v;
	    if (val !== undefined) {
	      if (elem) {
	        var computedStyle = getComputedStyleX(elem);
	        var isBorderBox = isBorderBoxFn(elem);
	        if (isBorderBox) {
	          val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);
	        }
	        return css(elem, name, val);
	      }
	      return undefined;
	    }
	    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
	  };
	});

	function mix(to, from) {
	  for (var i in from) {
	    if (from.hasOwnProperty(i)) {
	      to[i] = from[i];
	    }
	  }
	  return to;
	}

	var utils = {
	  getWindow: function getWindow(node) {
	    if (node && node.document && node.setTimeout) {
	      return node;
	    }
	    var doc = node.ownerDocument || node;
	    return doc.defaultView || doc.parentWindow;
	  },
	  offset: function offset(el, value, option) {
	    if (typeof value !== 'undefined') {
	      setOffset(el, value, option || {});
	    } else {
	      return getOffset(el);
	    }
	  },
	  isWindow: isWindow,
	  each: each,
	  css: css,
	  clone: function clone(obj) {
	    var i = undefined;
	    var ret = {};
	    for (i in obj) {
	      if (obj.hasOwnProperty(i)) {
	        ret[i] = obj[i];
	      }
	    }
	    var overflow = obj.overflow;
	    if (overflow) {
	      for (i in obj) {
	        if (obj.hasOwnProperty(i)) {
	          ret.overflow[i] = obj.overflow[i];
	        }
	      }
	    }
	    return ret;
	  },
	  mix: mix,
	  getWindowScrollLeft: function getWindowScrollLeft(w) {
	    return getScrollLeft(w);
	  },
	  getWindowScrollTop: function getWindowScrollTop(w) {
	    return getScrollTop(w);
	  },
	  merge: function merge() {
	    var ret = {};

	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    for (var i = 0; i < args.length; i++) {
	      utils.mix(ret, args[i]);
	    }
	    return ret;
	  },
	  viewportWidth: 0,
	  viewportHeight: 0
	};

	mix(utils, domUtils);

	exports['default'] = utils;
	module.exports = exports['default'];

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utils = __webpack_require__(118);

	var _utils2 = _interopRequireDefault(_utils);

	/**
	 * 得到会导致元素显示不全的祖先元素
	 */

	function getOffsetParent(element) {
	  // ie 这个也不是完全可行
	  /*
	   <div style="width: 50px;height: 100px;overflow: hidden">
	   <div style="width: 50px;height: 100px;position: relative;" id="d6">
	   元素 6 高 100px 宽 50px<br/>
	   </div>
	   </div>
	   */
	  // element.offsetParent does the right thing in ie7 and below. Return parent with layout!
	  //  In other browsers it only includes elements with position absolute, relative or
	  // fixed, not elements with overflow set to auto or scroll.
	  //        if (UA.ie && ieMode < 8) {
	  //            return element.offsetParent;
	  //        }
	  // 统一的 offsetParent 方法
	  var doc = element.ownerDocument;
	  var body = doc.body;
	  var parent = undefined;
	  var positionStyle = _utils2['default'].css(element, 'position');
	  var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';

	  if (!skipStatic) {
	    return element.nodeName.toLowerCase() === 'html' ? null : element.parentNode;
	  }

	  for (parent = element.parentNode; parent && parent !== body; parent = parent.parentNode) {
	    positionStyle = _utils2['default'].css(parent, 'position');
	    if (positionStyle !== 'static') {
	      return parent;
	    }
	  }
	  return null;
	}

	exports['default'] = getOffsetParent;
	module.exports = exports['default'];

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utils = __webpack_require__(118);

	var _utils2 = _interopRequireDefault(_utils);

	var _getOffsetParent = __webpack_require__(119);

	var _getOffsetParent2 = _interopRequireDefault(_getOffsetParent);

	/**
	 * 获得元素的显示部分的区域
	 */
	function getVisibleRectForElement(element) {
	  var visibleRect = {
	    left: 0,
	    right: Infinity,
	    top: 0,
	    bottom: Infinity
	  };
	  var el = (0, _getOffsetParent2['default'])(element);
	  var scrollX = undefined;
	  var scrollY = undefined;
	  var winSize = undefined;
	  var doc = element.ownerDocument;
	  var win = doc.defaultView || doc.parentWindow;
	  var body = doc.body;
	  var documentElement = doc.documentElement;

	  // Determine the size of the visible rect by climbing the dom accounting for
	  // all scrollable containers.
	  while (el) {
	    // clientWidth is zero for inline block elements in ie.
	    if ((navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) &&
	    // body may have overflow set on it, yet we still get the entire
	    // viewport. In some browsers, el.offsetParent may be
	    // document.documentElement, so check for that too.
	    el !== body && el !== documentElement && _utils2['default'].css(el, 'overflow') !== 'visible') {
	      var pos = _utils2['default'].offset(el);
	      // add border
	      pos.left += el.clientLeft;
	      pos.top += el.clientTop;
	      visibleRect.top = Math.max(visibleRect.top, pos.top);
	      visibleRect.right = Math.min(visibleRect.right,
	      // consider area without scrollBar
	      pos.left + el.clientWidth);
	      visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
	      visibleRect.left = Math.max(visibleRect.left, pos.left);
	    } else if (el === body || el === documentElement) {
	      break;
	    }
	    el = (0, _getOffsetParent2['default'])(el);
	  }

	  // Clip by window's viewport.
	  scrollX = _utils2['default'].getWindowScrollLeft(win);
	  scrollY = _utils2['default'].getWindowScrollTop(win);
	  visibleRect.left = Math.max(visibleRect.left, scrollX);
	  visibleRect.top = Math.max(visibleRect.top, scrollY);
	  winSize = {
	    width: _utils2['default'].viewportWidth(win),
	    height: _utils2['default'].viewportHeight(win)
	  };
	  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
	  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
	  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
	}

	exports['default'] = getVisibleRectForElement;
	module.exports = exports['default'];

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utils = __webpack_require__(118);

	var _utils2 = _interopRequireDefault(_utils);

	function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
	  var pos = _utils2['default'].clone(elFuturePos);
	  var size = {
	    width: elRegion.width,
	    height: elRegion.height
	  };

	  if (overflow.adjustX && pos.left < visibleRect.left) {
	    pos.left = visibleRect.left;
	  }

	  // Left edge inside and right edge outside viewport, try to resize it.
	  if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
	    size.width -= pos.left + size.width - visibleRect.right;
	  }

	  // Right edge outside viewport, try to move it.
	  if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
	    // 保证左边界和可视区域左边界对齐
	    pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
	  }

	  // Top edge outside viewport, try to move it.
	  if (overflow.adjustY && pos.top < visibleRect.top) {
	    pos.top = visibleRect.top;
	  }

	  // Top edge inside and bottom edge outside viewport, try to resize it.
	  if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
	    size.height -= pos.top + size.height - visibleRect.bottom;
	  }

	  // Bottom edge outside viewport, try to move it.
	  if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
	    // 保证上边界和可视区域上边界对齐
	    pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
	  }

	  return _utils2['default'].mix(pos, size);
	}

	exports['default'] = adjustForViewport;
	module.exports = exports['default'];

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _utils = __webpack_require__(118);

	var _utils2 = _interopRequireDefault(_utils);

	function getRegion(node) {
	  var offset = undefined;
	  var w = undefined;
	  var h = undefined;
	  if (!_utils2['default'].isWindow(node) && node.nodeType !== 9) {
	    offset = _utils2['default'].offset(node);
	    w = _utils2['default'].outerWidth(node);
	    h = _utils2['default'].outerHeight(node);
	  } else {
	    var win = _utils2['default'].getWindow(node);
	    offset = {
	      left: _utils2['default'].getWindowScrollLeft(win),
	      top: _utils2['default'].getWindowScrollTop(win)
	    };
	    w = _utils2['default'].viewportWidth(win);
	    h = _utils2['default'].viewportHeight(win);
	  }
	  offset.width = w;
	  offset.height = h;
	  return offset;
	}

	exports['default'] = getRegion;
	module.exports = exports['default'];

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _getAlignOffset = __webpack_require__(124);

	var _getAlignOffset2 = _interopRequireDefault(_getAlignOffset);

	function getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {
	  var xy = undefined;
	  var diff = undefined;
	  var p1 = undefined;
	  var p2 = undefined;

	  xy = {
	    left: elRegion.left,
	    top: elRegion.top
	  };

	  p1 = (0, _getAlignOffset2['default'])(refNodeRegion, points[1]);
	  p2 = (0, _getAlignOffset2['default'])(elRegion, points[0]);

	  diff = [p2.left - p1.left, p2.top - p1.top];

	  return {
	    left: xy.left - diff[0] + offset[0] - targetOffset[0],
	    top: xy.top - diff[1] + offset[1] - targetOffset[1]
	  };
	}

	exports['default'] = getElFuturePos;
	module.exports = exports['default'];

/***/ },
/* 124 */
73,
/* 125 */
74,
/* 126 */
[831, 127],
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _ChildrenUtils = __webpack_require__(128);

	var _AnimateChild = __webpack_require__(129);

	var _AnimateChild2 = _interopRequireDefault(_AnimateChild);

	var _util = __webpack_require__(134);

	var _util2 = _interopRequireDefault(_util);

	var defaultKey = 'rc_animate_' + Date.now();

	function getChildrenFromProps(props) {
	  var children = props.children;
	  if (_react2['default'].isValidElement(children)) {
	    if (!children.key) {
	      return _react2['default'].cloneElement(children, {
	        key: defaultKey
	      });
	    }
	  }
	  return children;
	}

	function noop() {}

	var Animate = _react2['default'].createClass({
	  displayName: 'Animate',

	  propTypes: {
	    component: _react2['default'].PropTypes.any,
	    animation: _react2['default'].PropTypes.object,
	    transitionName: _react2['default'].PropTypes.string,
	    transitionEnter: _react2['default'].PropTypes.bool,
	    transitionAppear: _react2['default'].PropTypes.bool,
	    exclusive: _react2['default'].PropTypes.bool,
	    transitionLeave: _react2['default'].PropTypes.bool,
	    onEnd: _react2['default'].PropTypes.func,
	    onEnter: _react2['default'].PropTypes.func,
	    onLeave: _react2['default'].PropTypes.func,
	    onAppear: _react2['default'].PropTypes.func,
	    showProp: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      animation: {},
	      component: 'span',
	      transitionEnter: true,
	      transitionLeave: true,
	      transitionAppear: false,
	      onEnd: noop,
	      onEnter: noop,
	      onLeave: noop,
	      onAppear: noop
	    };
	  },

	  getInitialState: function getInitialState() {
	    this.currentlyAnimatingKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	    return {
	      children: (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(this.props))
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var _this = this;

	    var showProp = this.props.showProp;
	    var children = this.state.children;
	    if (showProp) {
	      children = children.filter(function (child) {
	        return !!child.props[showProp];
	      });
	    }
	    children.forEach(function (child) {
	      _this.performAppear(child.key);
	    });
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var _this2 = this;

	    this.nextProps = nextProps;
	    var nextChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(nextProps));
	    var props = this.props;
	    // exclusive needs immediate response
	    if (props.exclusive) {
	      Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {
	        _this2.stop(key);
	      });
	    }
	    var showProp = props.showProp;
	    var currentlyAnimatingKeys = this.currentlyAnimatingKeys;
	    // last props children if exclusive
	    var currentChildren = props.exclusive ? (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props)) : this.state.children;
	    // in case destroy in showProp mode
	    var newChildren = [];
	    if (showProp) {
	      currentChildren.forEach(function (currentChild) {
	        var nextChild = (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, currentChild.key);
	        var newChild = undefined;
	        if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {
	          newChild = _react2['default'].cloneElement(nextChild || currentChild, _defineProperty({}, showProp, true));
	        } else {
	          newChild = nextChild;
	        }
	        if (newChild) {
	          newChildren.push(newChild);
	        }
	      });
	      nextChildren.forEach(function (nextChild) {
	        if (!(0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, nextChild.key)) {
	          newChildren.push(nextChild);
	        }
	      });
	    } else {
	      newChildren = (0, _ChildrenUtils.mergeChildren)(currentChildren, nextChildren);
	    }

	    // need render to avoid update
	    this.setState({
	      children: newChildren
	    });

	    nextChildren.forEach(function (child) {
	      var key = child.key;
	      if (currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasPrev = (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
	      if (showProp) {
	        var showInNext = child.props[showProp];
	        if (hasPrev) {
	          var showInNow = (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	          if (!showInNow && showInNext) {
	            _this2.keysToEnter.push(key);
	          }
	        } else if (showInNext) {
	          _this2.keysToEnter.push(key);
	        }
	      } else if (!hasPrev) {
	        _this2.keysToEnter.push(key);
	      }
	    });

	    currentChildren.forEach(function (child) {
	      var key = child.key;
	      if (currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasNext = (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, key);
	      if (showProp) {
	        var showInNow = child.props[showProp];
	        if (hasNext) {
	          var showInNext = (0, _ChildrenUtils.findShownChildInChildrenByKey)(nextChildren, key, showProp);
	          if (!showInNext && showInNow) {
	            _this2.keysToLeave.push(key);
	          }
	        } else if (showInNow) {
	          _this2.keysToLeave.push(key);
	        }
	      } else if (!hasNext) {
	        _this2.keysToLeave.push(key);
	      }
	    });
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.isMounted()) {
	      var keysToEnter = this.keysToEnter;
	      this.keysToEnter = [];
	      keysToEnter.forEach(this.performEnter);
	      var keysToLeave = this.keysToLeave;
	      this.keysToLeave = [];
	      keysToLeave.forEach(this.performLeave);
	    }
	  },

	  performEnter: function performEnter(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillEnter(this.handleDoneAdding.bind(this, key, 'enter'));
	    }
	  },

	  performAppear: function performAppear(key) {
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillAppear(this.handleDoneAdding.bind(this, key, 'appear'));
	    }
	  },

	  handleDoneAdding: function handleDoneAdding(key, type) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));
	    if (!this.isValidChildByKey(currentChildren, key)) {
	      // exclusive will not need this
	      this.performLeave(key);
	    } else {
	      if (type === 'appear') {
	        if (_util2['default'].allowAppearCallback(props)) {
	          props.onAppear(key);
	          props.onEnd(key, true);
	        }
	      } else {
	        if (_util2['default'].allowEnterCallback(props)) {
	          props.onEnter(key);
	          props.onEnd(key, true);
	        }
	      }
	    }
	  },

	  performLeave: function performLeave(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillLeave(this.handleDoneLeaving.bind(this, key));
	    }
	  },

	  handleDoneLeaving: function handleDoneLeaving(key) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));
	    // in case state change is too fast
	    if (this.isValidChildByKey(currentChildren, key)) {
	      this.performEnter(key);
	    } else {
	      if (_util2['default'].allowLeaveCallback(props)) {
	        props.onLeave(key);
	        props.onEnd(key, false);
	      }
	      if (this.isMounted() && !(0, _ChildrenUtils.isSameChildren)(this.state.children, currentChildren, props.showProp)) {
	        this.setState({
	          children: currentChildren
	        });
	      }
	    }
	  },

	  isValidChildByKey: function isValidChildByKey(currentChildren, key) {
	    var showProp = this.props.showProp;
	    if (showProp) {
	      return (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	    }
	    return (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
	  },

	  stop: function stop(key) {
	    delete this.currentlyAnimatingKeys[key];
	    var component = this.refs[key];
	    if (component) {
	      component.stop();
	    }
	  },

	  render: function render() {
	    var props = this.props;
	    this.nextProps = props;
	    var stateChildren = this.state.children;
	    var children = null;
	    if (stateChildren) {
	      children = stateChildren.map(function (child) {
	        if (child === null) {
	          return child;
	        }
	        if (!child.key) {
	          throw new Error('must set key for <rc-animate> children');
	        }
	        return _react2['default'].createElement(
	          _AnimateChild2['default'],
	          {
	            key: child.key,
	            ref: child.key,
	            animation: props.animation,
	            transitionName: props.transitionName,
	            transitionEnter: props.transitionEnter,
	            transitionAppear: props.transitionAppear,
	            transitionLeave: props.transitionLeave },
	          child
	        );
	      });
	    }
	    var Component = props.component;
	    if (Component) {
	      return _react2['default'].createElement(
	        Component,
	        this.props,
	        children
	      );
	    }
	    return children[0] || null;
	  }
	});

	exports['default'] = Animate;
	module.exports = exports['default'];

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.toArrayChildren = toArrayChildren;
	exports.findChildInChildrenByKey = findChildInChildrenByKey;
	exports.findShownChildInChildrenByKey = findShownChildInChildrenByKey;
	exports.findHiddenChildInChildrenByKey = findHiddenChildInChildrenByKey;
	exports.isSameChildren = isSameChildren;
	exports.mergeChildren = mergeChildren;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function toArrayChildren(children) {
	  var ret = [];
	  _react2['default'].Children.forEach(children, function (child) {
	    ret.push(child);
	  });
	  return ret;
	}

	function findChildInChildrenByKey(children, key) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (ret) {
	        return;
	      }
	      if (child.key === key) {
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findShownChildInChildrenByKey(children, key, showProp) {
	  var ret = null;
	  if (children) {
	    children.forEach(function (child) {
	      if (child.key === key && child.props[showProp]) {
	        if (ret) {
	          throw new Error('two child with same key for <rc-animate> children');
	        }
	        ret = child;
	      }
	    });
	  }
	  return ret;
	}

	function findHiddenChildInChildrenByKey(children, key, showProp) {
	  var found = 0;
	  if (children) {
	    children.forEach(function (child) {
	      if (found) {
	        return;
	      }
	      found = child.key === key && !child.props[showProp];
	    });
	  }
	  return found;
	}

	function isSameChildren(c1, c2, showProp) {
	  var same = c1.length === c2.length;
	  if (same) {
	    c1.forEach(function (child, index) {
	      var child2 = c2[index];
	      if (child.key !== child2.key) {
	        same = false;
	      } else if (showProp && child.props[showProp] !== child2.props[showProp]) {
	        same = false;
	      }
	    });
	  }
	  return same;
	}

	function mergeChildren(prev, next) {
	  var ret = [];

	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextChildrenPending = {};
	  var pendingChildren = [];
	  prev.forEach(function (child) {
	    if (findChildInChildrenByKey(next, child.key)) {
	      if (pendingChildren.length) {
	        nextChildrenPending[child.key] = pendingChildren;
	        pendingChildren = [];
	      }
	    } else {
	      pendingChildren.push(child);
	    }
	  });

	  next.forEach(function (child) {
	    if (nextChildrenPending.hasOwnProperty(child.key)) {
	      ret = ret.concat(nextChildrenPending[child.key]);
	    }
	    ret.push(child);
	  });

	  ret = ret.concat(pendingChildren);

	  return ret;
	}

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _cssAnimation = __webpack_require__(130);

	var _cssAnimation2 = _interopRequireDefault(_cssAnimation);

	var _util = __webpack_require__(134);

	var _util2 = _interopRequireDefault(_util);

	var transitionMap = {
	  enter: 'transitionEnter',
	  appear: 'transitionAppear',
	  leave: 'transitionLeave'
	};

	var AnimateChild = _react2['default'].createClass({
	  displayName: 'AnimateChild',

	  propTypes: {
	    children: _react2['default'].PropTypes.any
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this.stop();
	  },

	  componentWillEnter: function componentWillEnter(done) {
	    if (_util2['default'].isEnterSupported(this.props)) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  },

	  componentWillAppear: function componentWillAppear(done) {
	    if (_util2['default'].isAppearSupported(this.props)) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function componentWillLeave(done) {
	    if (_util2['default'].isLeaveSupported(this.props)) {
	      this.transition('leave', done);
	    } else {
	      done();
	    }
	  },

	  transition: function transition(animationType, finishCallback) {
	    var _this = this;

	    var node = _reactDom2['default'].findDOMNode(this);
	    var props = this.props;
	    var transitionName = props.transitionName;
	    this.stop();
	    var end = function end() {
	      _this.stopper = null;
	      finishCallback();
	    };
	    if ((_cssAnimation.isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {
	      this.stopper = (0, _cssAnimation2['default'])(node, transitionName + '-' + animationType, end);
	    } else {
	      this.stopper = props.animation[animationType](node, end);
	    }
	  },

	  stop: function stop() {
	    var stopper = this.stopper;
	    if (stopper) {
	      this.stopper = null;
	      stopper.stop();
	    }
	  },

	  render: function render() {
	    return this.props.children;
	  }
	});

	exports['default'] = AnimateChild;
	module.exports = exports['default'];

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Event = __webpack_require__(131);

	var _Event2 = _interopRequireDefault(_Event);

	var _componentClasses = __webpack_require__(132);

	var _componentClasses2 = _interopRequireDefault(_componentClasses);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var isCssAnimationSupported = _Event2["default"].endEvents.length !== 0;


	var capitalPrefixes = ['Webkit', 'Moz', 'O',
	// ms is special .... !
	'ms'];
	var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];

	function getDuration(node, name) {
	  var style = window.getComputedStyle(node);

	  var ret = '';
	  for (var i = 0; i < prefixes.length; i++) {
	    ret = style.getPropertyValue(prefixes[i] + name);
	    if (ret) {
	      break;
	    }
	  }
	  return ret;
	}

	function fixBrowserByTimeout(node) {
	  if (isCssAnimationSupported) {
	    var transitionDuration = parseFloat(getDuration(node, 'transition-duration')) || 0;
	    var animationDuration = parseFloat(getDuration(node, 'animation-duration')) || 0;
	    var time = Math.max(transitionDuration, animationDuration);
	    // sometimes, browser bug
	    node.rcEndAnimTimeout = setTimeout(function () {
	      node.rcEndAnimTimeout = null;
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }, time * 1000 + 200);
	  }
	}

	function clearBrowserBugTimeout(node) {
	  if (node.rcEndAnimTimeout) {
	    clearTimeout(node.rcEndAnimTimeout);
	    node.rcEndAnimTimeout = null;
	  }
	}

	var cssAnimation = function cssAnimation(node, transitionName, endCallback) {
	  var className = transitionName;
	  var activeClassName = className + '-active';
	  var end = endCallback;
	  var start = void 0;
	  var active = void 0;
	  var nodeClasses = (0, _componentClasses2["default"])(node);

	  if (endCallback && Object.prototype.toString.call(endCallback) === '[object Object]') {
	    end = endCallback.end;
	    start = endCallback.start;
	    active = endCallback.active;
	  }

	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }

	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }

	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }

	    clearBrowserBugTimeout(node);

	    nodeClasses.remove(className);
	    nodeClasses.remove(activeClassName);

	    _Event2["default"].removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;

	    // Usually this optional end is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (end) {
	      end();
	    }
	  };

	  _Event2["default"].addEndEventListener(node, node.rcEndListener);

	  nodeClasses.add(className);

	  if (start) {
	    start();
	  }

	  node.rcAnimTimeout = setTimeout(function () {
	    node.rcAnimTimeout = null;
	    nodeClasses.add(activeClassName);
	    if (active) {
	      active();
	    }
	    fixBrowserByTimeout(node);
	  }, 0);

	  return {
	    stop: function stop() {
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }
	  };
	};

	cssAnimation.style = function (node, style, callback) {
	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }

	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }

	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }

	    clearBrowserBugTimeout(node);

	    _Event2["default"].removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;

	    // Usually this optional callback is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (callback) {
	      callback();
	    }
	  };

	  _Event2["default"].addEndEventListener(node, node.rcEndListener);

	  node.rcAnimTimeout = setTimeout(function () {
	    for (var s in style) {
	      if (style.hasOwnProperty(s)) {
	        node.style[s] = style[s];
	      }
	    }
	    node.rcAnimTimeout = null;
	    fixBrowserByTimeout(node);
	  }, 0);
	};

	cssAnimation.setTransition = function (node, p, value) {
	  var property = p;
	  var v = value;
	  if (value === undefined) {
	    v = property;
	    property = '';
	  }
	  property = property || '';
	  capitalPrefixes.forEach(function (prefix) {
	    node.style[prefix + 'Transition' + property] = v;
	  });
	};

	cssAnimation.isCssAnimationSupported = isCssAnimationSupported;

	exports["default"] = cssAnimation;
	module.exports = exports['default'];

/***/ },
/* 131 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var EVENT_NAME_MAP = {
	  transitionend: {
	    transition: 'transitionend',
	    WebkitTransition: 'webkitTransitionEnd',
	    MozTransition: 'mozTransitionEnd',
	    OTransition: 'oTransitionEnd',
	    msTransition: 'MSTransitionEnd'
	  },

	  animationend: {
	    animation: 'animationend',
	    WebkitAnimation: 'webkitAnimationEnd',
	    MozAnimation: 'mozAnimationEnd',
	    OAnimation: 'oAnimationEnd',
	    msAnimation: 'MSAnimationEnd'
	  }
	};

	var endEvents = [];

	function detectEvents() {
	  var testEl = document.createElement('div');
	  var style = testEl.style;

	  if (!('AnimationEvent' in window)) {
	    delete EVENT_NAME_MAP.animationend.animation;
	  }

	  if (!('TransitionEvent' in window)) {
	    delete EVENT_NAME_MAP.transitionend.transition;
	  }

	  for (var baseEventName in EVENT_NAME_MAP) {
	    if (EVENT_NAME_MAP.hasOwnProperty(baseEventName)) {
	      var baseEvents = EVENT_NAME_MAP[baseEventName];
	      for (var styleName in baseEvents) {
	        if (styleName in style) {
	          endEvents.push(baseEvents[styleName]);
	          break;
	        }
	      }
	    }
	  }
	}

	if (typeof window !== 'undefined' && typeof document !== 'undefined') {
	  detectEvents();
	}

	function addEventListener(node, eventName, eventListener) {
	  node.addEventListener(eventName, eventListener, false);
	}

	function removeEventListener(node, eventName, eventListener) {
	  node.removeEventListener(eventName, eventListener, false);
	}

	var TransitionEvents = {
	  addEndEventListener: function addEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      window.setTimeout(eventListener, 0);
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      addEventListener(node, endEvent, eventListener);
	    });
	  },


	  endEvents: endEvents,

	  removeEndEventListener: function removeEndEventListener(node, eventListener) {
	    if (endEvents.length === 0) {
	      return;
	    }
	    endEvents.forEach(function (endEvent) {
	      removeEventListener(node, endEvent, eventListener);
	    });
	  }
	};

	exports["default"] = TransitionEvents;
	module.exports = exports['default'];

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	try {
	  var index = __webpack_require__(133);
	} catch (err) {
	  var index = __webpack_require__(133);
	}

	/**
	 * Whitespace regexp.
	 */

	var re = /\s+/;

	/**
	 * toString reference.
	 */

	var toString = Object.prototype.toString;

	/**
	 * Wrap `el` in a `ClassList`.
	 *
	 * @param {Element} el
	 * @return {ClassList}
	 * @api public
	 */

	module.exports = function(el){
	  return new ClassList(el);
	};

	/**
	 * Initialize a new ClassList for `el`.
	 *
	 * @param {Element} el
	 * @api private
	 */

	function ClassList(el) {
	  if (!el || !el.nodeType) {
	    throw new Error('A DOM element reference is required');
	  }
	  this.el = el;
	  this.list = el.classList;
	}

	/**
	 * Add class `name` if not already present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.add = function(name){
	  // classList
	  if (this.list) {
	    this.list.add(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (!~i) arr.push(name);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove class `name` when present, or
	 * pass a regular expression to remove
	 * any which match.
	 *
	 * @param {String|RegExp} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.remove = function(name){
	  if ('[object RegExp]' == toString.call(name)) {
	    return this.removeMatching(name);
	  }

	  // classList
	  if (this.list) {
	    this.list.remove(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (~i) arr.splice(i, 1);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove all classes matching `re`.
	 *
	 * @param {RegExp} re
	 * @return {ClassList}
	 * @api private
	 */

	ClassList.prototype.removeMatching = function(re){
	  var arr = this.array();
	  for (var i = 0; i < arr.length; i++) {
	    if (re.test(arr[i])) {
	      this.remove(arr[i]);
	    }
	  }
	  return this;
	};

	/**
	 * Toggle class `name`, can force state via `force`.
	 *
	 * For browsers that support classList, but do not support `force` yet,
	 * the mistake will be detected and corrected.
	 *
	 * @param {String} name
	 * @param {Boolean} force
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.toggle = function(name, force){
	  // classList
	  if (this.list) {
	    if ("undefined" !== typeof force) {
	      if (force !== this.list.toggle(name, force)) {
	        this.list.toggle(name); // toggle again to correct
	      }
	    } else {
	      this.list.toggle(name);
	    }
	    return this;
	  }

	  // fallback
	  if ("undefined" !== typeof force) {
	    if (!force) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  } else {
	    if (this.has(name)) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  }

	  return this;
	};

	/**
	 * Return an array of classes.
	 *
	 * @return {Array}
	 * @api public
	 */

	ClassList.prototype.array = function(){
	  var className = this.el.getAttribute('class') || '';
	  var str = className.replace(/^\s+|\s+$/g, '');
	  var arr = str.split(re);
	  if ('' === arr[0]) arr.shift();
	  return arr;
	};

	/**
	 * Check if class `name` is present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.has =
	ClassList.prototype.contains = function(name){
	  return this.list
	    ? this.list.contains(name)
	    : !! ~index(this.array(), name);
	};


/***/ },
/* 133 */
/***/ function(module, exports) {

	module.exports = function(arr, obj){
	  if (arr.indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 134 */
83,
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _LazyRenderBox = __webpack_require__(136);

	var _LazyRenderBox2 = _interopRequireDefault(_LazyRenderBox);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var PopupInner = _react2["default"].createClass({
	  displayName: 'PopupInner',

	  propTypes: {
	    hiddenClassName: _react.PropTypes.string,
	    className: _react.PropTypes.string,
	    prefixCls: _react.PropTypes.string,
	    onMouseEnter: _react.PropTypes.func,
	    onMouseLeave: _react.PropTypes.func,
	    children: _react.PropTypes.any
	  },
	  render: function render() {
	    var props = this.props;
	    var className = props.className;
	    if (!props.visible) {
	      className += ' ' + props.hiddenClassName;
	    }
	    return _react2["default"].createElement(
	      'div',
	      {
	        className: className,
	        onMouseEnter: props.onMouseEnter,
	        onMouseLeave: props.onMouseLeave,
	        style: props.style
	      },
	      _react2["default"].createElement(
	        _LazyRenderBox2["default"],
	        { className: props.prefixCls + '-content', visible: props.visible },
	        props.children
	      )
	    );
	  }
	});

	exports["default"] = PopupInner;
	module.exports = exports['default'];

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var LazyRenderBox = _react2["default"].createClass({
	  displayName: 'LazyRenderBox',

	  propTypes: {
	    children: _react.PropTypes.any,
	    className: _react.PropTypes.string,
	    visible: _react.PropTypes.bool,
	    hiddenClassName: _react.PropTypes.string
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    return nextProps.hiddenClassName || nextProps.visible;
	  },
	  render: function render() {
	    if (this.props.hiddenClassName) {
	      var className = this.props.className;
	      if (!this.props.visible) {
	        className += ' ' + this.props.hiddenClassName;
	      }
	      return _react2["default"].createElement('div', _extends({}, this.props, { className: className }));
	    }
	    if (_react2["default"].Children.count(this.props.children) > 1) {
	      return _react2["default"].createElement('div', this.props);
	    }
	    return _react2["default"].Children.only(this.props.children);
	  }
	});

	exports["default"] = LazyRenderBox;
	module.exports = exports['default'];

/***/ },
/* 137 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.getAlignFromPlacement = getAlignFromPlacement;
	exports.getPopupClassNameFromAlign = getPopupClassNameFromAlign;
	function isPointsEq(a1, a2) {
	  return a1[0] === a2[0] && a1[1] === a2[1];
	}

	function getAlignFromPlacement(builtinPlacements, placementStr, align) {
	  var baseAlign = builtinPlacements[placementStr] || {};
	  return _extends({}, baseAlign, align);
	}

	function getPopupClassNameFromAlign(builtinPlacements, prefixCls, align) {
	  var points = align.points;
	  for (var placement in builtinPlacements) {
	    if (builtinPlacements.hasOwnProperty(placement)) {
	      if (isPointsEq(builtinPlacements[placement].points, points)) {
	        return prefixCls + '-placement-' + placement;
	      }
	    }
	  }
	  return '';
	}

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _mixinCommonMixin = __webpack_require__(139);

	var _mixinCommonMixin2 = _interopRequireDefault(_mixinCommonMixin);

	var _Header = __webpack_require__(143);

	var _Header2 = _interopRequireDefault(_Header);

	var _Combobox = __webpack_require__(145);

	var _Combobox2 = _interopRequireDefault(_Combobox);

	function noop() {}

	function generateOptions(length, disabledOptions, hideDisabledOptions) {
	  var arr = [];
	  for (var value = 0; value < length; value++) {
	    if (!disabledOptions || disabledOptions.indexOf(value) < 0 || !hideDisabledOptions) {
	      arr.push(value);
	    }
	  }
	  return arr;
	}

	var Panel = _react2['default'].createClass({
	  displayName: 'Panel',

	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    value: _react.PropTypes.object,
	    locale: _react.PropTypes.object,
	    placeholder: _react.PropTypes.string,
	    gregorianCalendarLocale: _react.PropTypes.object,
	    formatter: _react.PropTypes.object,
	    disabledHours: _react.PropTypes.func,
	    disabledMinutes: _react.PropTypes.func,
	    disabledSeconds: _react.PropTypes.func,
	    hideDisabledOptions: _react.PropTypes.bool,
	    onChange: _react.PropTypes.func,
	    onEsc: _react.PropTypes.func,
	    allowEmpty: _react.PropTypes.bool,
	    showHour: _react.PropTypes.bool,
	    showSecond: _react.PropTypes.bool,
	    onClear: _react.PropTypes.func
	  },

	  mixins: [_mixinCommonMixin2['default']],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onChange: noop,
	      onClear: noop
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      value: this.props.value,
	      selectionRange: []
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var value = nextProps.value;
	    if (value) {
	      this.setState({
	        value: value
	      });
	    }
	  },

	  onChange: function onChange(newValue) {
	    this.setState({ value: newValue });
	    this.props.onChange(newValue);
	  },

	  onClear: function onClear() {
	    this.props.onClear();
	  },

	  onCurrentSelectPanelChange: function onCurrentSelectPanelChange(currentSelectPanel) {
	    this.setState({ currentSelectPanel: currentSelectPanel });
	  },

	  render: function render() {
	    var _props = this.props;
	    var locale = _props.locale;
	    var prefixCls = _props.prefixCls;
	    var placeholder = _props.placeholder;
	    var disabledHours = _props.disabledHours;
	    var disabledMinutes = _props.disabledMinutes;
	    var disabledSeconds = _props.disabledSeconds;
	    var hideDisabledOptions = _props.hideDisabledOptions;
	    var allowEmpty = _props.allowEmpty;
	    var showHour = _props.showHour;
	    var showSecond = _props.showSecond;
	    var formatter = _props.formatter;
	    var gregorianCalendarLocale = _props.gregorianCalendarLocale;

	    var value = this.state.value;
	    var disabledHourOptions = disabledHours();
	    var disabledMinuteOptions = disabledMinutes(value ? value.getHourOfDay() : null);
	    var disabledSecondOptions = disabledSeconds(value ? value.getHourOfDay() : null, value ? value.getMinutes() : null);
	    var hourOptions = generateOptions(24, disabledHourOptions, hideDisabledOptions);
	    var minuteOptions = generateOptions(60, disabledMinuteOptions, hideDisabledOptions);
	    var secondOptions = generateOptions(60, disabledSecondOptions, hideDisabledOptions);

	    return _react2['default'].createElement(
	      'div',
	      { className: prefixCls + '-inner' },
	      _react2['default'].createElement(_Header2['default'], {
	        prefixCls: prefixCls,
	        gregorianCalendarLocale: gregorianCalendarLocale,
	        locale: locale,
	        value: value,
	        currentSelectPanel: this.state.currentSelectPanel,
	        onEsc: this.props.onEsc,
	        formatter: formatter,
	        placeholder: placeholder,
	        hourOptions: hourOptions,
	        minuteOptions: minuteOptions,
	        secondOptions: secondOptions,
	        disabledHours: disabledHours,
	        disabledMinutes: disabledMinutes,
	        disabledSeconds: disabledSeconds,
	        onChange: this.onChange,
	        onClear: this.onClear,
	        allowEmpty: allowEmpty
	      }),
	      _react2['default'].createElement(_Combobox2['default'], {
	        prefixCls: prefixCls,
	        value: value,
	        gregorianCalendarLocale: gregorianCalendarLocale,
	        formatter: formatter,
	        onChange: this.onChange,
	        showHour: showHour,
	        showSecond: showSecond,
	        hourOptions: hourOptions,
	        minuteOptions: minuteOptions,
	        secondOptions: secondOptions,
	        disabledHours: disabledHours,
	        disabledMinutes: disabledMinutes,
	        disabledSeconds: disabledSeconds,
	        onCurrentSelectPanelChange: this.onCurrentSelectPanelChange
	      })
	    );
	  }
	});

	exports['default'] = Panel;
	module.exports = exports['default'];

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(3);

	var _localeEn_US = __webpack_require__(140);

	var _localeEn_US2 = _interopRequireDefault(_localeEn_US);

	exports['default'] = {
	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    locale: _react.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-time-picker',
	      locale: _localeEn_US2['default']
	    };
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _gregorianCalendarFormatLibLocaleEn_US = __webpack_require__(141);

	var _gregorianCalendarFormatLibLocaleEn_US2 = _interopRequireDefault(_gregorianCalendarFormatLibLocaleEn_US);

	var _gregorianCalendarLibLocaleEn_US = __webpack_require__(142);

	var _gregorianCalendarLibLocaleEn_US2 = _interopRequireDefault(_gregorianCalendarLibLocaleEn_US);

	exports['default'] = {
	  clear: 'Clear',
	  format: _gregorianCalendarFormatLibLocaleEn_US2['default'],
	  calendar: _gregorianCalendarLibLocaleEn_US2['default']
	};
	module.exports = exports['default'];

/***/ },
/* 141 */
44,
/* 142 */
15,
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _utilSelection = __webpack_require__(144);

	var _utilSelection2 = _interopRequireDefault(_utilSelection);

	var Header = _react2['default'].createClass({
	  displayName: 'Header',

	  propTypes: {
	    formatter: _react.PropTypes.object,
	    prefixCls: _react.PropTypes.string,
	    gregorianCalendarLocale: _react.PropTypes.object,
	    locale: _react.PropTypes.object,
	    disabledDate: _react.PropTypes.func,
	    placeholder: _react.PropTypes.string,
	    value: _react.PropTypes.object,
	    hourOptions: _react.PropTypes.array,
	    minuteOptions: _react.PropTypes.array,
	    secondOptions: _react.PropTypes.array,
	    disabledHours: _react.PropTypes.func,
	    disabledMinutes: _react.PropTypes.func,
	    disabledSeconds: _react.PropTypes.func,
	    onChange: _react.PropTypes.func,
	    onClear: _react.PropTypes.func,
	    onEsc: _react.PropTypes.func,
	    allowEmpty: _react.PropTypes.bool,
	    currentSelectPanel: _react.PropTypes.string
	  },

	  getInitialState: function getInitialState() {
	    var value = this.props.value;
	    return {
	      str: value && this.props.formatter.format(value) || '',
	      invalid: false
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this.timer = setTimeout(this.selectRange, 0);
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var value = nextProps.value;
	    this.setState({
	      str: value && nextProps.formatter.format(value) || '',
	      invalid: false
	    });
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this.timer = setTimeout(this.selectRange, 0);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    clearTimeout(this.timer);
	  },

	  onInputChange: function onInputChange(event) {
	    var str = event.target.value;
	    this.setState({
	      str: str
	    });
	    var value = null;
	    var _props = this.props;
	    var formatter = _props.formatter;
	    var gregorianCalendarLocale = _props.gregorianCalendarLocale;
	    var hourOptions = _props.hourOptions;
	    var minuteOptions = _props.minuteOptions;
	    var secondOptions = _props.secondOptions;
	    var disabledHours = _props.disabledHours;
	    var disabledMinutes = _props.disabledMinutes;
	    var disabledSeconds = _props.disabledSeconds;
	    var onChange = _props.onChange;
	    var allowEmpty = _props.allowEmpty;

	    if (str) {
	      var originalValue = this.props.value;
	      try {
	        value = formatter.parse(str, {
	          locale: gregorianCalendarLocale,
	          obeyCount: true
	        });
	      } catch (ex) {
	        this.setState({
	          invalid: true
	        });
	        return;
	      }

	      if (value) {
	        // if time value not allowed, response warning.
	        if (hourOptions.indexOf(value.getHourOfDay()) < 0 || minuteOptions.indexOf(value.getMinutes()) < 0 || secondOptions.indexOf(value.getSeconds()) < 0) {
	          this.setState({
	            invalid: true
	          });
	          return;
	        }

	        // if time value is disabled, response warning.
	        var disabledHourOptions = disabledHours();
	        var disabledMinuteOptions = disabledMinutes(value.getHourOfDay());
	        var disabledSecondOptions = disabledSeconds(value.getHourOfDay(), value.getMinutes());
	        if (disabledHourOptions && disabledHourOptions.indexOf(value.getHourOfDay()) >= 0 || disabledMinuteOptions && disabledMinuteOptions.indexOf(value.getMinutes()) >= 0 || disabledSecondOptions && disabledSecondOptions.indexOf(value.getSeconds()) >= 0) {
	          this.setState({
	            invalid: true
	          });
	          return;
	        }

	        if (originalValue && value) {
	          if (originalValue.getHourOfDay() !== value.getHourOfDay() || originalValue.getMinutes() !== value.getMinutes() || originalValue.getSeconds() !== value.getSeconds()) {
	            // keep other fields for rc-calendar
	            var changedValue = originalValue.clone();
	            changedValue.setHourOfDay(value.getHourOfDay());
	            changedValue.setMinutes(value.getMinutes());
	            changedValue.setSeconds(value.getSeconds());
	            onChange(changedValue);
	          }
	        } else if (originalValue !== value) {
	          onChange(value);
	        }
	      } else {
	        this.setState({
	          invalid: true
	        });
	        return;
	      }
	    } else if (allowEmpty) {
	      onChange(null);
	    } else {
	      this.setState({
	        invalid: true
	      });
	      return;
	    }

	    this.setState({
	      invalid: false
	    });
	  },

	  onKeyDown: function onKeyDown(e) {
	    if (e.keyCode === 27) {
	      this.props.onEsc();
	    }
	  },

	  onClear: function onClear() {
	    this.setState({ str: '' });
	    this.props.onClear();
	  },

	  getClearButton: function getClearButton() {
	    var _props2 = this.props;
	    var locale = _props2.locale;
	    var prefixCls = _props2.prefixCls;
	    var allowEmpty = _props2.allowEmpty;

	    if (!allowEmpty) {
	      return null;
	    }
	    return _react2['default'].createElement('a', { className: prefixCls + '-clear-btn', role: 'button', title: locale.clear, onMouseDown: this.onClear });
	  },

	  getInput: function getInput() {
	    var _props3 = this.props;
	    var prefixCls = _props3.prefixCls;
	    var placeholder = _props3.placeholder;
	    var _state = this.state;
	    var invalid = _state.invalid;
	    var str = _state.str;

	    var invalidClass = invalid ? prefixCls + '-input-invalid' : '';
	    return _react2['default'].createElement('input', {
	      className: prefixCls + '-input  ' + invalidClass,
	      ref: 'input',
	      onKeyDown: this.onKeyDown,
	      value: str,
	      placeholder: placeholder, onChange: this.onInputChange
	    });
	  },

	  selectRange: function selectRange() {
	    this.refs.input.focus();
	    if (this.props.currentSelectPanel && this.refs.input.value) {
	      var selectionRangeStart = 0;
	      var selectionRangeEnd = 0;
	      if (this.props.currentSelectPanel === 'hour') {
	        selectionRangeStart = 0;
	        selectionRangeEnd = this.refs.input.value.indexOf(':');
	      } else if (this.props.currentSelectPanel === 'minute') {
	        selectionRangeStart = this.refs.input.value.indexOf(':') + 1;
	        selectionRangeEnd = this.refs.input.value.lastIndexOf(':');
	      } else if (this.props.currentSelectPanel === 'second') {
	        selectionRangeStart = this.refs.input.value.lastIndexOf(':') + 1;
	        selectionRangeEnd = this.refs.input.value.length;
	      }
	      if (selectionRangeEnd - selectionRangeStart === 2) {
	        (0, _utilSelection2['default'])(this.refs.input, selectionRangeStart, selectionRangeEnd);
	      }
	    }
	  },

	  render: function render() {
	    var prefixCls = this.props.prefixCls;

	    return _react2['default'].createElement(
	      'div',
	      { className: prefixCls + '-input-wrap' },
	      this.getInput(),
	      this.getClearButton()
	    );
	  }
	});

	exports['default'] = Header;
	module.exports = exports['default'];

/***/ },
/* 144 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = createSelection;

	function createSelection(field, start, end) {
	  if (field.createTextRange) {
	    var selRange = field.createTextRange();
	    selRange.collapse(true);
	    selRange.moveStart('character', start);
	    selRange.moveEnd('character', end);
	    selRange.select();
	    field.focus();
	  } else if (field.setSelectionRange) {
	    field.focus();
	    field.setSelectionRange(start, end);
	  } else if (typeof field.selectionStart !== 'undefined') {
	    field.selectionStart = start;
	    field.selectionEnd = end;
	    field.focus();
	  }
	}

	module.exports = exports['default'];

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _Select = __webpack_require__(146);

	var _Select2 = _interopRequireDefault(_Select);

	var _gregorianCalendar = __webpack_require__(147);

	var _gregorianCalendar2 = _interopRequireDefault(_gregorianCalendar);

	var formatOption = function formatOption(option, disabledOptions) {
	  var value = '' + option;
	  if (option < 10) {
	    value = '0' + option;
	  }

	  var disabled = false;
	  if (disabledOptions && disabledOptions.indexOf(option) >= 0) {
	    disabled = true;
	  }

	  return {
	    value: value,
	    disabled: disabled
	  };
	};

	var Combobox = _react2['default'].createClass({
	  displayName: 'Combobox',

	  propTypes: {
	    formatter: _react.PropTypes.object,
	    prefixCls: _react.PropTypes.string,
	    value: _react.PropTypes.object,
	    onChange: _react.PropTypes.func,
	    showHour: _react.PropTypes.bool,
	    gregorianCalendarLocale: _react.PropTypes.object,
	    showSecond: _react.PropTypes.bool,
	    hourOptions: _react.PropTypes.array,
	    minuteOptions: _react.PropTypes.array,
	    secondOptions: _react.PropTypes.array,
	    disabledHours: _react.PropTypes.func,
	    disabledMinutes: _react.PropTypes.func,
	    disabledSeconds: _react.PropTypes.func,
	    onCurrentSelectPanelChange: _react.PropTypes.func
	  },

	  onItemChange: function onItemChange(type, itemValue) {
	    var onChange = this.props.onChange;

	    var value = this.props.value;
	    if (value) {
	      value = value.clone();
	    } else {
	      value = this.getNow().clone();
	    }
	    if (type === 'hour') {
	      value.setHourOfDay(itemValue);
	    } else if (type === 'minute') {
	      value.setMinutes(itemValue);
	    } else {
	      value.setSeconds(itemValue);
	    }
	    onChange(value);
	  },

	  onEnterSelectPanel: function onEnterSelectPanel(range) {
	    this.props.onCurrentSelectPanelChange(range);
	  },

	  getHourSelect: function getHourSelect(hour) {
	    var _props = this.props;
	    var prefixCls = _props.prefixCls;
	    var hourOptions = _props.hourOptions;
	    var disabledHours = _props.disabledHours;
	    var showHour = _props.showHour;

	    if (!showHour) {
	      return null;
	    }
	    var disabledOptions = disabledHours();

	    return _react2['default'].createElement(_Select2['default'], {
	      prefixCls: prefixCls,
	      options: hourOptions.map(function (option) {
	        return formatOption(option, disabledOptions);
	      }),
	      selectedIndex: hourOptions.indexOf(hour),
	      type: 'hour',
	      onSelect: this.onItemChange,
	      onMouseEnter: this.onEnterSelectPanel.bind(this, 'hour')
	    });
	  },

	  getMinuteSelect: function getMinuteSelect(minute) {
	    var _props2 = this.props;
	    var prefixCls = _props2.prefixCls;
	    var minuteOptions = _props2.minuteOptions;
	    var disabledMinutes = _props2.disabledMinutes;

	    var value = this.props.value || this.getNow();
	    var disabledOptions = disabledMinutes(value.getHourOfDay());

	    return _react2['default'].createElement(_Select2['default'], {
	      prefixCls: prefixCls,
	      options: minuteOptions.map(function (option) {
	        return formatOption(option, disabledOptions);
	      }),
	      selectedIndex: minuteOptions.indexOf(minute),
	      type: 'minute',
	      onSelect: this.onItemChange,
	      onMouseEnter: this.onEnterSelectPanel.bind(this, 'minute')
	    });
	  },

	  getSecondSelect: function getSecondSelect(second) {
	    var _props3 = this.props;
	    var prefixCls = _props3.prefixCls;
	    var secondOptions = _props3.secondOptions;
	    var disabledSeconds = _props3.disabledSeconds;
	    var showSecond = _props3.showSecond;

	    if (!showSecond) {
	      return null;
	    }
	    var value = this.props.value || this.getNow();
	    var disabledOptions = disabledSeconds(value.getHourOfDay(), value.getMinutes());

	    return _react2['default'].createElement(_Select2['default'], {
	      prefixCls: prefixCls,
	      options: secondOptions.map(function (option) {
	        return formatOption(option, disabledOptions);
	      }),
	      selectedIndex: secondOptions.indexOf(second),
	      type: 'second',
	      onSelect: this.onItemChange,
	      onMouseEnter: this.onEnterSelectPanel.bind(this, 'second')
	    });
	  },

	  getNow: function getNow() {
	    if (this.showNow) {
	      return this.showNow;
	    }
	    var value = new _gregorianCalendar2['default'](this.props.gregorianCalendarLocale);
	    value.setTime(Date.now());
	    this.showNow = value;
	    return value;
	  },

	  render: function render() {
	    var prefixCls = this.props.prefixCls;

	    var value = this.props.value || this.getNow();
	    return _react2['default'].createElement(
	      'div',
	      { className: prefixCls + '-combobox' },
	      this.getHourSelect(value.getHourOfDay()),
	      this.getMinuteSelect(value.getMinutes()),
	      this.getSecondSelect(value.getSeconds())
	    );
	  }
	});

	exports['default'] = Combobox;
	module.exports = exports['default'];

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	var scrollTo = function scrollTo(element, to, duration) {
	  var requestAnimationFrame = window.requestAnimationFrame || function requestAnimationFrameTimeout() {
	    return setTimeout(arguments[0], 10);
	  };
	  // jump to target if duration zero
	  if (duration <= 0) {
	    element.scrollTop = to;
	    return;
	  }
	  var difference = to - element.scrollTop;
	  var perTick = difference / duration * 10;

	  requestAnimationFrame(function () {
	    element.scrollTop = element.scrollTop + perTick;
	    if (element.scrollTop === to) return;
	    scrollTo(element, to, duration - 10);
	  });
	};

	var Select = _react2['default'].createClass({
	  displayName: 'Select',

	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    options: _react.PropTypes.array,
	    gregorianCalendarLocale: _react.PropTypes.object,
	    selectedIndex: _react.PropTypes.number,
	    type: _react.PropTypes.string,
	    onSelect: _react.PropTypes.func,
	    onMouseEnter: _react.PropTypes.func
	  },

	  componentDidMount: function componentDidMount() {
	    // jump to selected option
	    this.scrollToSelected(0);
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    // smooth scroll to selected option
	    if (prevProps.selectedIndex !== this.props.selectedIndex) {
	      this.scrollToSelected(120);
	    }
	  },

	  onSelect: function onSelect(value) {
	    var _props = this.props;
	    var onSelect = _props.onSelect;
	    var type = _props.type;

	    onSelect(type, value);
	  },

	  getOptions: function getOptions() {
	    var _this = this;

	    var _props2 = this.props;
	    var options = _props2.options;
	    var selectedIndex = _props2.selectedIndex;
	    var prefixCls = _props2.prefixCls;

	    return options.map(function (item, index) {
	      var _classnames;

	      var cls = (0, _classnames3['default'])((_classnames = {}, _defineProperty(_classnames, prefixCls + '-select-option-selected', selectedIndex === index), _defineProperty(_classnames, prefixCls + '-select-option-disabled', item.disabled), _classnames));
	      var onclick = null;
	      if (!item.disabled) {
	        onclick = _this.onSelect.bind(_this, +item.value);
	      }
	      return _react2['default'].createElement(
	        'li',
	        { className: cls, key: index, onClick: onclick, disabled: item.disabled },
	        item.value
	      );
	    });
	  },

	  scrollToSelected: function scrollToSelected(duration) {
	    // move to selected item
	    var select = _reactDom2['default'].findDOMNode(this);
	    var list = _reactDom2['default'].findDOMNode(this.refs.list);
	    var index = this.props.selectedIndex;
	    if (index < 0) {
	      index = 0;
	    }
	    var topOption = list.children[index];
	    var to = topOption.offsetTop;
	    scrollTo(select, to, duration);
	  },

	  render: function render() {
	    if (this.props.options.length === 0) {
	      return null;
	    }

	    var prefixCls = this.props.prefixCls;

	    return _react2['default'].createElement(
	      'div',
	      { className: prefixCls + '-select',
	        onMouseEnter: this.props.onMouseEnter },
	      _react2['default'].createElement(
	        'ul',
	        { ref: 'list' },
	        this.getOptions()
	      )
	    );
	  }
	});

	exports['default'] = Select;
	module.exports = exports['default'];

/***/ },
/* 147 */
[808, 148, 142, 149],
/* 148 */
[809, 149],
/* 149 */
14,
/* 150 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	var autoAdjustOverflow = {
	  adjustX: 1,
	  adjustY: 1
	};

	var targetOffset = [0, 0];

	var placements = {
	  bottomLeft: {
	    points: ['tl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -3],
	    targetOffset: targetOffset
	  },
	  bottomRight: {
	    points: ['tr', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -3],
	    targetOffset: targetOffset
	  },
	  topRight: {
	    points: ['br', 'br'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 3],
	    targetOffset: targetOffset
	  },
	  topLeft: {
	    points: ['bl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 3],
	    targetOffset: targetOffset
	  }
	};

	exports['default'] = placements;
	module.exports = exports['default'];

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.getFormatter = getFormatter;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _gregorianCalendarFormat = __webpack_require__(152);

	var _gregorianCalendarFormat2 = _interopRequireDefault(_gregorianCalendarFormat);

	function getFormatter(format, locale) {
	  if (typeof format === 'string') {
	    return new _gregorianCalendarFormat2['default'](format, locale.format);
	  }
	  return format;
	}

/***/ },
/* 152 */
[819, 147, 141, 153],
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(46)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Formatter = __webpack_require__(155);
	var Tooltip = __webpack_require__(157);
	var classnames = __webpack_require__(5);
	var i18n = __webpack_require__(209);

	/**
	 * code should be an object like this {'xxxx-xx-xx': 'work/leave/schedule'}
	 */
	var generateContentRender = function generateContentRender(code) {
	    var locale = arguments.length <= 1 || arguments[1] === undefined ? 'zh-cn' : arguments[1];

	    return function contentRender(code, locale, current, value) {
	        // see https://github.com/yiminghe/gregorian-calendar to get details about `current` API
	        var time = current.getTime();
	        var date = Formatter.date(time, 'YYYY-MM-DD');
	        var type = code[date];
	        if (typeof type == 'string') {
	            type = [type];
	        } else if (type == undefined) {
	            type = [];
	        }
	        var tipMap = i18n[locale];
	        var content = [];
	        var isWork = type.indexOf('work') !== -1;
	        var isLeave = type.indexOf('leave') !== -1;
	        var isSchedule = type.indexOf('schedule') !== -1;
	        content.push(React.createElement('span', { key: 'date', className: classnames({
	                'kuma-calendar-date-content': true,
	                'work': isWork,
	                'leave': isLeave,
	                'schedule': isSchedule
	            }) }, current.getDayOfMonth()));
	        if (isSchedule) {
	            content.push(React.createElement('span', { key: 'bottom-line', className: 'kuma-calendar-date-decoration' }));
	        }

	        if (isWork || isLeave) {
	            return React.createElement(Tooltip, { placement: 'right', trigger: ["hover"], overlay: tipMap[isWork ? 'work' : 'leave'] }, React.createElement('div', { className: 'kuma-calendar-date-content-box' }, content));
	        } else {
	            // only one child can be passed.
	            return React.createElement('div', { className: 'kuma-calendar-date-content-box' }, content);
	        }
	    }.bind(null, code, locale);
	};

	module.exports = {
	    generateContentRender: generateContentRender
		};

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Formatter Component for uxcore
	 * @author guanghong.wsj
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(156);

/***/ },
/* 156 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Formatter Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var Formatter = {};

	Formatter.date = function (str, pattern) {
	    var date = new Date(str);
	    pattern = pattern || 'YYYY-MM-DD';
	    var o = {
	        "M+": date.getMonth() + 1, //月份
	        "D+": date.getDate(), //日
	        "d+": date.getDate(), //日
	        "H+": date.getHours(), //小时
	        "h+": date.getHours(), //小时
	        "m+": date.getMinutes(), //分
	        "s+": date.getSeconds(), //秒
	        "Q+": Math.floor((date.getMonth() + 3) / 3), //季度
	        "q+": Math.floor((date.getMonth() + 3) / 3), //季度
	        "S": date.getMilliseconds() //毫秒
	    };
	    if (/(y+)/i.test(pattern)) {
	        pattern = pattern.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
	    }
	    for (var k in o) {
	        if (new RegExp("(" + k + ")").test(pattern)) pattern = pattern.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
	    }
	    return pattern;
	};

	Formatter.money = function (str, delimiter, fixedNum) {
	    delimiter = delimiter || " ";
	    if (fixedNum) {
	        str = parseFloat(str).toFixed(fixedNum).toString();
	    }
	    if (str.indexOf(".") !== -1) {
	        return str.replace(/(\d)(?=(?:\d{3})+(\.))/g, function (match, $1) {
	            return $1 + delimiter;
	        }).replace(/(\d{3})(?![$|\.|\(|\s])/g, function (match, $1) {
	            return $1;
	        });
	    } else {
	        return str.replace(/(\d)(?=(?:\d{3})+$)/g, function (match, $1) {
	            return $1 + delimiter;
	        });
	    }
	};

	Formatter.cnmobile = function (str, delimiter) {
	    delimiter = delimiter || " ";
	    return str.replace(/^(\+?0?86)(?!$)/, "$1" + delimiter).replace(/(\d{4})(?!$)/g, "$1" + delimiter);
	};

	Formatter.card = function (str, delimiter) {
	    delimiter = delimiter || " ";
	    return str.replace(/(\d{4})(?!$)/g, "$1" + delimiter);
	};

		module.exports = Formatter;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Tooltip Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(158);

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _rcTooltip = __webpack_require__(159);

	var _rcTooltip2 = _interopRequireDefault(_rcTooltip);

	var _objectAssign = __webpack_require__(181);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Tooltip = function (_RcTooltip) {
		_inherits(Tooltip, _RcTooltip);

		function Tooltip(props) {
			_classCallCheck(this, Tooltip);

			return _possibleConstructorReturn(this, _RcTooltip.call(this, props));
		}

		return Tooltip;
	}(_rcTooltip2["default"]);

	exports["default"] = Tooltip;

	Tooltip.displayName = 'uxcore-tooltip';
	Tooltip.propTypes = _rcTooltip2["default"].propTypes;

	Tooltip.defaultProps = (0, _objectAssign2["default"])(_rcTooltip2["default"].defaultProps, {
		prefixCls: 'kuma-tooltip',
		transitionName: 'flip'
	});
		module.exports = exports['default'];

/***/ },
/* 159 */
[837, 160],
/* 160 */
[838, 161, 162],
/* 161 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	var autoAdjustOverflow = {
	  adjustX: 1,
	  adjustY: 1
	};

	var targetOffset = [0, 0];

	var placements = {
	  left: {
	    points: ['cr', 'cl'],
	    overflow: autoAdjustOverflow,
	    offset: [-4, 0],
	    targetOffset: targetOffset
	  },
	  right: {
	    points: ['cl', 'cr'],
	    overflow: autoAdjustOverflow,
	    offset: [4, 0],
	    targetOffset: targetOffset
	  },
	  top: {
	    points: ['bc', 'tc'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  bottom: {
	    points: ['tc', 'bc'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  topLeft: {
	    points: ['bl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  leftTop: {
	    points: ['tr', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [-3, 0],
	    targetOffset: targetOffset
	  },
	  topRight: {
	    points: ['br', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  rightTop: {
	    points: ['tl', 'tr'],
	    overflow: autoAdjustOverflow,
	    offset: [4, 0],
	    targetOffset: targetOffset
	  },
	  bottomRight: {
	    points: ['tr', 'br'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  rightBottom: {
	    points: ['bl', 'br'],
	    overflow: autoAdjustOverflow,
	    offset: [4, 0],
	    targetOffset: targetOffset
	  },
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  },
	  leftBottom: {
	    points: ['br', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [-4, 0],
	    targetOffset: targetOffset
	  }
	};

	exports.placements = placements;
	exports['default'] = placements;

/***/ },
/* 162 */
[820, 163],
/* 163 */
[821, 164, 185, 208],
/* 164 */
[810, 165, 166, 168, 169, 170, 171, 176, 177, 182, 183, 184],
/* 165 */
17,
/* 166 */
[811, 167],
/* 167 */
19,
/* 168 */
[812, 167],
/* 169 */
21,
/* 170 */
[813, 171],
/* 171 */
[814, 172],
/* 172 */
[815, 173, 174, 175],
/* 173 */
25,
/* 174 */
26,
/* 175 */
27,
/* 176 */
28,
/* 177 */
[816, 178],
/* 178 */
[817, 179],
/* 179 */
[818, 180, 181],
/* 180 */
32,
/* 181 */
33,
/* 182 */
34,
/* 183 */
35,
/* 184 */
36,
/* 185 */
[822, 186, 197, 206, 207],
/* 186 */
[823, 187],
/* 187 */
[824, 188, 164, 196],
/* 188 */
[825, 189, 190, 191, 192, 193, 194],
/* 189 */
67,
/* 190 */
[826, 189],
/* 191 */
[827, 189, 190],
/* 192 */
[828, 189],
/* 193 */
[829, 189],
/* 194 */
[830, 195],
/* 195 */
73,
/* 196 */
74,
/* 197 */
[831, 198],
/* 198 */
[832, 199, 200, 205],
/* 199 */
77,
/* 200 */
[833, 201, 205],
/* 201 */
[834, 202, 203],
/* 202 */
80,
/* 203 */
[835, 204, 204],
/* 204 */
82,
/* 205 */
83,
/* 206 */
[836, 207],
/* 207 */
85,
/* 208 */
86,
/* 209 */
/***/ function(module, exports) {

	'use strict';

	var locale = {
	    'zh-cn': {
	        'work': '上班',
	        'leave': '休假'
	    },
	    'en-us': {
	        'work': 'work',
	        'leave': 'leave'
	    }
	};

	locale['en'] = locale['en-us'];

	module.exports = locale;

/***/ },
/* 210 */
/***/ function(module, exports) {

	/*
	 * zh-cn locale
	 * @ignore
	 * @author yiminghe@gmail.com
	 */
	"use strict";

	module.exports = {
	  // in minutes
	  timezoneOffset: 8 * 60,
	  firstDayOfWeek: 1,
	  minimalDaysInFirstWeek: 1
		};

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _zh_CN = __webpack_require__(212);

	var _zh_CN2 = _interopRequireDefault(_zh_CN);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	exports["default"] = {
	  today: '今天',
	  now: '此刻',
	  ok: '确定',
	  clear: '清除',
	  month: '月',
	  year: '年',
	  previousMonth: '上个月 (翻页上键)',
	  nextMonth: '下个月 (翻页下键)',
	  monthSelect: '选择月份',
	  yearSelect: '选择年份',
	  decadeSelect: '选择年代',
	  yearFormat: 'yyyy\'年\'',
	  monthFormat: 'M\'月\'',
	  dateFormat: 'yyyy\'年\'M\'月\'d\'日\'',
	  previousYear: '上一年 (Control键加左方向键)',
	  nextYear: '下一年 (Control键加右方向键)',
	  previousDecade: '上一年代',
	  nextDecade: '下一年代',
	  previousCentury: '上一世纪',
	  nextCentury: '下一世纪',
	  format: _zh_CN2["default"]
	};
		module.exports = exports['default'];

/***/ },
/* 212 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  eras: ['公元前', '公元'],
	  months: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
	  shortMonths: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
	  weekdays: ['星期天', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],
	  shortWeekdays: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
	  veryShortWeekdays: ['日', '一', '二', '三', '四', '五', '六'],
	  ampms: ['上午', '下午'],
	  datePatterns: ['yyyy\'年\'M\'月\'d\'日\' EEEE', 'yyyy\'年\'M\'月\'d\'日\'', 'yyyy-M-d', 'yy-M-d'],
	  timePatterns: ['ahh\'时\'mm\'分\'ss\'秒\' \'GMT\'Z', 'ahh\'时\'mm\'分\'ss\'秒\'', 'H:mm:ss', 'ah:mm'],
	  dateTimePattern: '{date} {time}'
		};

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _gregorianCalendarFormatLibLocaleZh_CN = __webpack_require__(214);

	var _gregorianCalendarFormatLibLocaleZh_CN2 = _interopRequireDefault(_gregorianCalendarFormatLibLocaleZh_CN);

	var _gregorianCalendarLibLocaleZh_CN = __webpack_require__(215);

	var _gregorianCalendarLibLocaleZh_CN2 = _interopRequireDefault(_gregorianCalendarLibLocaleZh_CN);

	exports['default'] = {
	  clear: '清除',
	  format: _gregorianCalendarFormatLibLocaleZh_CN2['default'],
	  calendar: _gregorianCalendarLibLocaleZh_CN2['default']
	};
	module.exports = exports['default'];

/***/ },
/* 214 */
212,
/* 215 */
210,
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * CheckboxGroup Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(217);

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * CheckboxGroup Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var Item = __webpack_require__(218);
	var assign = __webpack_require__(219);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var CheckboxGroup = function (_React$Component) {
	    _inherits(CheckboxGroup, _React$Component);

	    function CheckboxGroup(props) {
	        _classCallCheck(this, CheckboxGroup);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    CheckboxGroup.prototype.componentWillMount = function componentWillMount() {
	        var me = this;
	        me.selected = me._copy(me.props.value) || [];
	    };

	    CheckboxGroup.prototype.componentDidUpdate = function componentDidUpdate() {
	        var me = this;
	        me.selected = me._copy(me.props.value) || [];
	    };

	    CheckboxGroup.prototype._copy = function _copy(a) {
	        return JSON.parse(JSON.stringify(a));
	    };

	    CheckboxGroup.prototype._processChild = function _processChild() {
	        var me = this;
	        var length = React.Children.count(me.props.children);
	        if (!length) return false;
	        var elements = React.Children.map(me.props.children, function (child, index) {
	            if (!!child.type && child.type.displayName == "CheckboxItem") {
	                return React.cloneElement(child, {
	                    jsxdisabled: me.props.disabled,
	                    onChange: me._handleChange.bind(me),
	                    key: index,
	                    checked: me.props.value.indexOf(child.props.value) != -1
	                });
	            }
	        });
	        return elements;
	    };

	    CheckboxGroup.prototype._handleChange = function _handleChange(checked, value) {
	        var me = this;
	        if (checked) {
	            // me.selected = me.selected.concat([value]);
	            me.selected.push(value);
	        } else {
	            me.selected = me.selected.filter(function (item) {
	                return item != value;
	            });
	        }
	        me.props.onChange(JSON.parse(JSON.stringify(me.selected)));
	    };

	    CheckboxGroup.prototype.render = function render() {
	        var me = this;
	        return React.createElement("div", { className: me.props.className }, me._processChild());
	    };

	    return CheckboxGroup;
	}(React.Component);

	CheckboxGroup.Item = Item;

	CheckboxGroup.defaultProps = {
	    value: [],
	    onChange: function onChange() {},
	    disabled: false,
	    className: 'kuma-checkbox-group'
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	CheckboxGroup.propTypes = {
	    value: React.PropTypes.array,
	    onChange: React.PropTypes.func,
	    disabled: React.PropTypes.bool,
	    className: React.PropTypes.string
	};

	CheckboxGroup.displayName = "CheckboxGroup";

	module.exports = CheckboxGroup;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var CheckboxItem = function (_React$Component) {
	    _inherits(CheckboxItem, _React$Component);

	    function CheckboxItem(props) {
	        _classCallCheck(this, CheckboxItem);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    CheckboxItem.prototype._handleChange = function _handleChange(e) {
	        var me = this;
	        me.props.onChange(e.currentTarget.checked, me.props.value);
	    };

	    CheckboxItem.prototype.render = function render() {
	        var me = this;
	        var disabled = false;
	        if ('disabled' in me.props) {
	            disabled = me.props.disabled;
	        } else {
	            disabled = me.props.jsxdisabled;
	        }
	        return React.createElement('label', null, React.createElement('input', { type: 'checkbox', disabled: disabled, ref: 'checkbox', checked: me.props.checked, className: me.props.className, onChange: me._handleChange.bind(me) }), React.createElement('s', null), React.createElement('span', { dangerouslySetInnerHTML: { __html: me.props.text } }));
	    };

	    return CheckboxItem;
	}(React.Component);

	CheckboxItem.defaultProps = {
	    value: "",
	    className: "kuma-checkbox",
	    onChange: function onChange() {}
	};

	CheckboxItem.propTypes = {
	    value: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    className: React.PropTypes.string,
	    onChange: React.PropTypes.func
	};

	CheckboxItem.displayName = "CheckboxItem";

	module.exports = CheckboxItem;

/***/ },
/* 219 */
33,
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Collapse Component for uxcore
	 * @author vicent.bian
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(221);

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Panel = __webpack_require__(222);

	var _Panel2 = _interopRequireDefault(_Panel);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	var Collapse = (0, _react.createClass)({
	  statics: {
	    Panel: _Panel2["default"]
	  },

	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    activeKey: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.arrayOf(_react.PropTypes.string)]),
	    defaultActiveKey: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.arrayOf(_react.PropTypes.string)]),
	    onChange: _react.PropTypes.func,
	    accordion: _react.PropTypes.bool
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'kuma-collapse',
	      onChange: function onChange() {},
	      accordion: false
	    };
	  },
	  getInitialState: function getInitialState() {
	    var _props = this.props;
	    var activeKey = _props.activeKey;
	    var accordion = _props.accordion;
	    var defaultActiveKey = this.props.defaultActiveKey;
	    // If is not accordion mode, then, defaultActiveKey should be an array

	    if (!accordion) {
	      defaultActiveKey = defaultActiveKey || [];
	    }

	    return {
	      activeKey: activeKey || defaultActiveKey
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ('activeKey' in nextProps) {
	      this.setState({
	        activeKey: nextProps.activeKey
	      });
	    }
	  },
	  handleClickItem: function handleClickItem(key) {
	    var _this = this;

	    return function () {
	      var activeKey = _this._getActivityKey();
	      if (_this.props.accordion) {
	        _this.setState({
	          activeKey: key === activeKey ? null : key
	        });
	      } else {
	        var index = activeKey.indexOf(key);
	        var isActive = index > -1;
	        if (isActive) {
	          // remove active state
	          activeKey.splice(index, 1);
	        } else {
	          activeKey.push(key);
	        }

	        _this.setState({ activeKey: activeKey });
	      }
	      _this.props.onChange(key);
	    };
	  },
	  _getActivityKey: function _getActivityKey() {
	    var activeKey = this.state.activeKey;
	    var accordion = this.props.accordion;

	    if (accordion && Array.isArray(activeKey)) {
	      activeKey = activeKey[0];
	    }

	    if (!accordion && !Array.isArray(activeKey)) {
	      activeKey = activeKey ? [activeKey] : [];
	    }
	    return activeKey;
	  },
	  getItems: function getItems() {
	    var _this2 = this;

	    var activeKey = this._getActivityKey();
	    var _props2 = this.props;
	    var prefixCls = _props2.prefixCls;
	    var accordion = _props2.accordion;

	    return _react.Children.map(this.props.children, function (child, index) {
	      // If there is no key provide, use the panel order as default key
	      var key = child.key || index;
	      var header = child.props.header;
	      var isActive = false;
	      if (accordion) {
	        isActive = activeKey === key;
	      } else {
	        isActive = activeKey.indexOf(key) > -1;
	      }

	      var props = {
	        key: key,
	        header: header,
	        isActive: isActive,
	        prefixCls: prefixCls,
	        children: child.props.children,
	        onItemClick: _this2.handleClickItem(key).bind(_this2)
	      };

	      return _react2["default"].createElement(_Panel2["default"], props);
	    });
	  },
	  render: function render() {
	    var prefixCls = this.props.prefixCls;
	    return _react2["default"].createElement('div', { className: prefixCls }, this.getItems());
	  }
	});

	exports["default"] = Collapse;
	module.exports = exports['default'];

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	var CollapsePanel = (0, _react.createClass)({
	  propTypes: {
	    prefixCls: _react.PropTypes.string,
	    header: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number, _react.PropTypes.node]),
	    isActive: _react.PropTypes.bool,
	    onItemClick: _react.PropTypes.func
	  },

	  getInitialState: function getInitialState() {
	    return { isActive: this.props.isActive };
	  },
	  getDefaultProps: function getDefaultProps() {
	    return {
	      isActive: false,
	      onItemClick: function onItemClick() {}
	    };
	  },
	  handleItemClick: function handleItemClick() {
	    this.props.onItemClick();
	  },
	  render: function render() {
	    var _classnames;

	    var _props = this.props;
	    var prefixCls = _props.prefixCls;
	    var header = _props.header;
	    var children = _props.children;
	    var isActive = _props.isActive;

	    var headerCls = prefixCls + '-header';
	    var contentCls = (0, _classnames3["default"])((_classnames = {}, _classnames[prefixCls + '-content'] = true, _classnames[prefixCls + '-content-active'] = isActive, _classnames));

	    return _react2["default"].createElement('div', { className: prefixCls + '-item' }, _react2["default"].createElement('div', { className: headerCls, onClick: this.handleItemClick,
	      role: 'tab', 'aria-expanded': isActive }, _react2["default"].createElement('i', { className: 'arrow' }), header), _react2["default"].createElement('div', { className: contentCls,
	      'data-active': isActive,
	      role: 'tabpanel' }, _react2["default"].createElement('div', { className: prefixCls + '-content-box' }, children)));
	  }
	});

	exports["default"] = CollapsePanel;
	module.exports = exports['default'];

/***/ },
/* 223 */
[839, 224],
/* 224 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Const Component for uxcore
	 * @author zhouquan.yezq
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var Const = {
	  MODE: {
	    VIEW: 'view',
	    EDIT: 'edit'
	  },
	  ENV: {
	    DEBUG: 'debug',
	    LIVE: 'live'
	  }
	};

		module.exports = Const;

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Crumb Component for uxcore
	 * @author peijie.dpj
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(226);

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Crumb Component for uxcore
	 * @author peijie.dpj
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var CrumbItem = __webpack_require__(227);
	var classnames = __webpack_require__(5);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Crumb = function (_React$Component) {
	  _inherits(Crumb, _React$Component);

	  function Crumb(props) {
	    _classCallCheck(this, Crumb);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Crumb).call(this, props));
	  }

	  _createClass(Crumb, [{
	    key: 'render',
	    value: function render() {
	      var _classnames;

	      var props = this.props;

	      return React.createElement('div', { className: classnames((_classnames = {}, _defineProperty(_classnames, props.prefixCls, true), _defineProperty(_classnames, props.className, !!props.className), _classnames)) }, React.Children.map(this.props.children, function (item) {
	        return React.createElement(CrumbItem, item.props, item.props.children);
	      }));
	    }
	  }]);

	  return Crumb;
	}(React.Component);

	Crumb.defaultProps = {
	  prefixCls: 'kuma-uxcrumbs'
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	Crumb.propTypes = {
	  prefixCls: React.PropTypes.string,
	  className: React.PropTypes.string
	};

	Crumb.Item = CrumbItem;

	Crumb.displayName = 'Crumb';

	module.exports = Crumb;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * CrumbItem Component for uxcore
	 * @author peijie.dpj
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var classnames = __webpack_require__(5);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var CrumbItem = function (_React$Component) {
	  _inherits(CrumbItem, _React$Component);

	  function CrumbItem(props) {
	    _classCallCheck(this, CrumbItem);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(CrumbItem).call(this, props));
	  }

	  _createClass(CrumbItem, [{
	    key: 'render',
	    value: function render() {
	      var props = this.props;

	      return !props.href ? React.createElement('span', { className: classnames(_defineProperty({}, props.className, !!props.className)) }, props.children) : React.createElement('a', { href: props.href, className: props.className }, props.children);
	    }
	  }]);

	  return CrumbItem;
	}(React.Component);

	CrumbItem.defaultProps = {};

	// http://facebook.github.io/react/docs/reusable-components.html
	CrumbItem.propTypes = {
	  href: React.PropTypes.string,
	  className: React.PropTypes.string
	};

	CrumbItem.displayName = 'CrumbItem';

	module.exports = CrumbItem;

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Dialog Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(229);

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];for (var key in source) {
	            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }return target;
	};

	var _rcDialog = __webpack_require__(230);

	var _rcDialog2 = _interopRequireDefault(_rcDialog);

	var _confirm = __webpack_require__(275);

	var _confirm2 = _interopRequireDefault(_confirm);

	var _uxcoreButton = __webpack_require__(6);

	var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

	var _i18n = __webpack_require__(276);

	var _i18n2 = _interopRequireDefault(_i18n);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * @author: vincent
	   * @date: 15/5/19
	   */

	function noop() {}

	var Dialog = function (_React$Component) {
	    _inherits(Dialog, _React$Component);

	    function Dialog(props) {
	        _classCallCheck(this, Dialog);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            confirmLoading: false,
	            visible: props.visible
	        };
	        return _this;
	    }

	    Dialog.prototype.handleCancel = function handleCancel() {
	        this.props.onCancel();
	    };

	    Dialog.prototype.handleOk = function handleOk() {
	        this.props.onOk();
	    };

	    Dialog.prototype.render = function render() {
	        var props = this.props;
	        var locale = _i18n2["default"][props.locale];
	        var defaultFooter = [_react2["default"].createElement(_uxcoreButton2["default"], { key: 'confirm',
	            type: 'primary',
	            size: 'medium',
	            loading: props.confirmLoading,
	            onClick: this.handleOk.bind(this) }, locale['ok']), _react2["default"].createElement(_uxcoreButton2["default"], { key: 'cancel',
	            type: 'secondary',
	            size: 'medium',
	            onClick: this.handleCancel.bind(this) }, locale['cancel'])];
	        var footer = props.footer || defaultFooter;
	        var className = void 0;
	        if (!props.title) {
	            className = props.className + ' ' + props.prefixCls + '-noheader';
	        } else {
	            className = props.className;
	        }
	        return _react2["default"].createElement(_rcDialog2["default"], _extends({
	            onClose: this.handleCancel.bind(this),
	            footer: footer
	        }, props, {
	            className: className,
	            visible: props.visible }));
	    };

	    return Dialog;
	}(_react2["default"].Component);

	exports["default"] = Dialog;

	Dialog.defaultProps = {
	    prefixCls: 'kuma-dlg',
	    className: '',
	    onOk: noop,
	    locale: 'zh-cn',
	    onCancel: noop,
	    width: 520,
	    transitionName: 'threeFallV',
	    maskTransitionName: 'fade',
	    confirmLoading: false,
	    visible: false,
	    closable: true,
	    maskClosable: false,
	    title: ''
	};

	Dialog.info = function (props) {
	    props.iconClassName = 'kuma-icon-information';
	    props.okCancel = false;
	    return (0, _confirm2["default"])(props);
	};

	Dialog.success = function (props) {
	    props.iconClassName = 'kuma-icon-success';
	    props.okCancel = false;
	    return (0, _confirm2["default"])(props);
	};

	Dialog.error = function (props) {
	    props.iconClassName = 'kuma-icon-error';
	    props.okCancel = false;
	    return (0, _confirm2["default"])(props);
	};

	Dialog.confirm = function (props) {
	    props.okCancel = true;
	    return (0, _confirm2["default"])(props);
	};
		module.exports = exports['default'];

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(231);

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _get = function get(_x, _x2, _x3) {
	  var _again = true;_function: while (_again) {
	    var object = _x,
	        property = _x2,
	        receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	      var parent = Object.getPrototypeOf(object);if (parent === null) {
	        return undefined;
	      } else {
	        _x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;
	      }
	    } else if ('value' in desc) {
	      return desc.value;
	    } else {
	      var getter = desc.get;if (getter === undefined) {
	        return undefined;
	      }return getter.call(receiver);
	    }
	  }
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError('Cannot call a class as a function');
	  }
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== 'function' && superClass !== null) {
	    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _Dialog = __webpack_require__(232);

	var _Dialog2 = _interopRequireDefault(_Dialog);

	function noop() {}

	function copy(obj, fields) {
	  var ret = {};
	  fields.forEach(function (f) {
	    if (obj[f] !== undefined) {
	      ret[f] = obj[f];
	    }
	  });
	  return ret;
	}

	var DialogWrap = function (_React$Component) {
	  _inherits(DialogWrap, _React$Component);

	  function DialogWrap(props) {
	    var _this = this;

	    _classCallCheck(this, DialogWrap);

	    _get(Object.getPrototypeOf(DialogWrap.prototype), 'constructor', this).call(this, props);
	    this.state = {
	      visible: props.visible
	    };
	    ['onClose', 'cleanDialogContainer'].forEach(function (m) {
	      _this[m] = _this[m].bind(_this);
	    });
	  }

	  _createClass(DialogWrap, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.componentDidUpdate();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      if ('visible' in props) {
	        this.setState({
	          visible: props.visible
	        });
	      }
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return !!(this.state.visible || nextState.visible);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      if (this.dialogRendered) {
	        this.dialogInstance = _reactDom2['default'].unstable_renderSubtreeIntoContainer(this, this.getDialogElement(), this.getDialogContainer());
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.dialogContainer) {
	        if (this.state.visible) {
	          _reactDom2['default'].unstable_renderSubtreeIntoContainer(this, this.getDialogElement({
	            onAfterClose: this.cleanDialogContainer,
	            onClose: noop,
	            visible: false
	          }), this.dialogContainer);
	        } else {
	          this.cleanDialogContainer();
	        }
	      }
	    }
	  }, {
	    key: 'onClose',
	    value: function onClose(e) {
	      this.props.onClose(e);
	    }
	  }, {
	    key: 'getDialogContainer',
	    value: function getDialogContainer() {
	      if (!this.dialogContainer) {
	        this.dialogContainer = document.createElement('div');
	        this.dialogContainer.className = this.props.prefixCls + '-container';
	        document.body.appendChild(this.dialogContainer);
	      }
	      return this.dialogContainer;
	    }
	  }, {
	    key: 'getDialogElement',
	    value: function getDialogElement(extra) {
	      var props = this.props;
	      var dialogProps = copy(props, ['className', 'closable', 'maskClosable', 'align', 'title', 'footer', 'mask', 'animation', 'transitionName', 'maskAnimation', 'maskTransitionName', 'mousePosition', 'prefixCls', 'style', 'width', 'height', 'zIndex', 'bodyStyle']);
	      dialogProps = _extends({}, dialogProps, {
	        onClose: this.onClose,
	        visible: this.state.visible
	      }, extra);
	      return _react2['default'].createElement(_Dialog2['default'], _extends({}, dialogProps, { key: 'dialog' }), props.children);
	    }
	  }, {
	    key: 'getElement',
	    value: function getElement(part) {
	      return this.dialogInstance.getElement(part);
	    }
	  }, {
	    key: 'cleanDialogContainer',
	    value: function cleanDialogContainer() {
	      _reactDom2['default'].unmountComponentAtNode(this.getDialogContainer());
	      document.body.removeChild(this.dialogContainer);
	      this.dialogContainer = null;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      this.dialogRendered = this.dialogRendered || this.state.visible;
	      return null;
	    }
	  }]);

	  return DialogWrap;
	}(_react2['default'].Component);

	DialogWrap.defaultProps = {
	  className: '',
	  align: {
	    points: ['tc', 'tc'],
	    offset: [0, 100]
	  },
	  mask: true,
	  closable: true,
	  maskClosable: true,
	  prefixCls: 'rc-dialog',
	  onClose: noop
	};

	DialogWrap.propTypes = {
	  className: _react2['default'].PropTypes.string,
	  align: _react2['default'].PropTypes.shape({
	    align: _react2['default'].PropTypes.array,
	    offset: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.number)
	  }),
	  mask: _react2['default'].PropTypes.bool,
	  closable: _react2['default'].PropTypes.bool,
	  maskClosable: _react2['default'].PropTypes.bool,
	  prefixCls: _react2['default'].PropTypes.string,
	  visible: _react2['default'].PropTypes.bool,
	  onClose: _react2['default'].PropTypes.func
	};

	exports['default'] = DialogWrap;
	module.exports = exports['default'];

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcAlign = __webpack_require__(233);

	var _rcAlign2 = _interopRequireDefault(_rcAlign);

	var _rcUtilLibKeyCode = __webpack_require__(248);

	var _rcUtilLibKeyCode2 = _interopRequireDefault(_rcUtilLibKeyCode);

	var _rcAnimate = __webpack_require__(265);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _DOMWrap = __webpack_require__(274);

	var _DOMWrap2 = _interopRequireDefault(_DOMWrap);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	function noop() {}

	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}

	function setTransformOrigin(node, value) {
	  var style = node.style;
	  ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {
	    style[prefix + 'TransformOrigin'] = value;
	  });
	  style['transformOrigin'] = value;
	}

	function offset(el) {
	  var rect = el.getBoundingClientRect();
	  var pos = {
	    left: rect.left,
	    top: rect.top
	  };
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScroll(w);
	  pos.top += getScroll(w, 1);
	  return pos;
	}

	var Dialog = _react2['default'].createClass({
	  displayName: 'Dialog',

	  propTypes: {
	    onAfterClose: _react.PropTypes.func,
	    onClose: _react.PropTypes.func,
	    closable: _react.PropTypes.bool,
	    maskClosable: _react.PropTypes.bool,
	    visible: _react.PropTypes.bool,
	    mousePosition: _react.PropTypes.object
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onAfterClose: noop,
	      onClose: noop
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this.componentDidUpdate({});
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var props = this.props;
	    if (props.visible) {
	      // first show
	      if (!prevProps.visible) {
	        this.lastOutSideFocusNode = document.activeElement;
	        _reactDom2['default'].findDOMNode(this.refs.dialog).focus();
	      }
	    } else if (prevProps.visible) {
	      if (props.mask && this.lastOutSideFocusNode) {
	        try {
	          this.lastOutSideFocusNode.focus();
	        } catch (e) {
	          this.lastOutSideFocusNode = null;
	        }
	        this.lastOutSideFocusNode = null;
	      }
	    }
	  },

	  onAnimateLeave: function onAnimateLeave() {
	    this.props.onAfterClose();
	  },

	  onMaskClick: function onMaskClick(e) {
	    if (this.props.closable && this.props.maskClosable) {
	      this.close(e);
	    }
	    _reactDom2['default'].findDOMNode(this.refs.dialog).focus();
	  },

	  onKeyDown: function onKeyDown(e) {
	    var props = this.props;
	    if (props.closable) {
	      if (e.keyCode === _rcUtilLibKeyCode2['default'].ESC) {
	        this.close(e);
	      }
	    }
	    // keep focus inside dialog
	    if (props.visible) {
	      if (e.keyCode === _rcUtilLibKeyCode2['default'].TAB) {
	        var activeElement = document.activeElement;
	        var dialogRoot = _reactDom2['default'].findDOMNode(this.refs.dialog);
	        var sentinel = this.refs.sentinel;
	        if (e.shiftKey) {
	          if (activeElement === dialogRoot) {
	            sentinel.focus();
	          }
	        } else if (activeElement === this.refs.sentinel) {
	          dialogRoot.focus();
	        }
	      }
	    }
	  },

	  onAlign: function onAlign(dialogNode) {
	    var mousePosition = this.props.mousePosition;
	    if (this.props.visible) {
	      if (mousePosition) {
	        var elOffset = offset(dialogNode);
	        setTransformOrigin(dialogNode, mousePosition.x - elOffset.left + 'px ' + (mousePosition.y - elOffset.top) + 'px');
	      } else {
	        setTransformOrigin(dialogNode, '');
	      }
	    }
	  },

	  getDialogElement: function getDialogElement() {
	    var props = this.props;
	    var closable = props.closable;
	    var prefixCls = props.prefixCls;
	    var dest = {};
	    if (props.width !== undefined) {
	      dest.width = props.width;
	    }
	    if (props.height !== undefined) {
	      dest.height = props.height;
	    }
	    if (props.zIndex !== undefined) {
	      dest.zIndex = props.zIndex;
	    }

	    var footer = undefined;
	    if (props.footer) {
	      footer = _react2['default'].createElement('div', { className: prefixCls + '-footer', ref: 'footer' }, props.footer);
	    }

	    var header = undefined;
	    if (props.title) {
	      header = _react2['default'].createElement('div', { className: prefixCls + '-header', ref: 'header' }, _react2['default'].createElement('div', { className: prefixCls + '-title' }, props.title));
	    }

	    var closer = undefined;
	    if (closable) {
	      closer = _react2['default'].createElement('a', { tabIndex: '0', onClick: this.close, className: prefixCls + '-close' }, _react2['default'].createElement('span', { className: prefixCls + '-close-x' }));
	    }

	    var style = _extends({}, props.style, dest);
	    var dialogProps = {
	      className: [props.prefixCls, props.className].join(' '),
	      tabIndex: '0',
	      role: 'dialog',
	      ref: 'dialog',
	      style: style,
	      onKeyDown: this.onKeyDown
	    };
	    var transitionName = this.getTransitionName();
	    var dialogElement = _react2['default'].createElement(_DOMWrap2['default'], _extends({}, dialogProps, {
	      hiddenClassName: prefixCls + '-hidden' }), _react2['default'].createElement('div', { className: prefixCls + '-content' }, closer, header, _react2['default'].createElement('div', { className: prefixCls + '-body', style: props.bodyStyle, ref: 'body' }, props.children), footer), _react2['default'].createElement('div', { tabIndex: '0', ref: 'sentinel', style: { width: 0, height: 0, overflow: 'hidden' } }, 'sentinel'));
	    // add key for align to keep animate children stable
	    return _react2['default'].createElement(_rcAnimate2['default'], { key: 'dialog',
	      showProp: 'dialogVisible',
	      onLeave: this.onAnimateLeave,
	      transitionName: transitionName,
	      component: '',
	      transitionAppear: true }, _react2['default'].createElement(_rcAlign2['default'], { align: props.align,
	      key: 'dialog',
	      onAlign: this.onAlign,
	      dialogVisible: props.visible,
	      childrenProps: {
	        visible: 'dialogVisible'
	      },
	      monitorBufferTime: 80,
	      monitorWindowResize: true,
	      disabled: !props.visible }, dialogElement));
	  },

	  getMaskElement: function getMaskElement() {
	    var props = this.props;
	    var maskProps = {
	      onClick: this.onMaskClick
	    };

	    if (props.zIndex) {
	      maskProps.style = { zIndex: props.zIndex };
	    }
	    var maskElement = undefined;
	    if (props.mask) {
	      var maskTransition = this.getMaskTransitionName();
	      maskElement = _react2['default'].createElement(_DOMWrap2['default'], _extends({}, maskProps, { key: 'mask',
	        className: props.prefixCls + '-mask',
	        visible: props.visible,
	        hiddenClassName: props.prefixCls + '-mask-hidden' }));
	      if (maskTransition) {
	        maskElement = _react2['default'].createElement(_rcAnimate2['default'], { key: 'mask', showProp: 'visible',
	          transitionAppear: true, component: '',
	          transitionName: maskTransition }, maskElement);
	      }
	    }
	    return maskElement;
	  },

	  getMaskTransitionName: function getMaskTransitionName() {
	    var props = this.props;
	    var transitionName = props.maskTransitionName;
	    var animation = props.maskAnimation;
	    if (!transitionName && animation) {
	      transitionName = props.prefixCls + '-' + animation;
	    }
	    return transitionName;
	  },

	  getTransitionName: function getTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    var animation = props.animation;
	    if (!transitionName && animation) {
	      transitionName = props.prefixCls + '-' + animation;
	    }
	    return transitionName;
	  },

	  getElement: function getElement(part) {
	    return this.refs[part];
	  },

	  close: function close(e) {
	    this.props.onClose(e);
	  },

	  render: function render() {
	    var props = this.props;
	    var prefixCls = props.prefixCls;
	    var className = _defineProperty({}, prefixCls + '-wrap', 1);

	    return _react2['default'].createElement('div', { className: (0, _classnames2['default'])(className), ref: 'root' }, [this.getMaskElement(), this.getDialogElement()]);
	  }
	});

	exports['default'] = Dialog;
	module.exports = exports['default'];

/***/ },
/* 233 */
[823, 234],
/* 234 */
[824, 235, 243, 264],
/* 235 */
[825, 236, 237, 238, 239, 240, 241],
/* 236 */
67,
/* 237 */
[826, 236],
/* 238 */
[827, 236, 237],
/* 239 */
[828, 236],
/* 240 */
[829, 236],
/* 241 */
[830, 242],
/* 242 */
73,
/* 243 */
[810, 244, 245, 247, 248, 249, 250, 255, 256, 261, 262, 263],
/* 244 */
17,
/* 245 */
[811, 246],
/* 246 */
19,
/* 247 */
[812, 246],
/* 248 */
21,
/* 249 */
[813, 250],
/* 250 */
[814, 251],
/* 251 */
[815, 252, 253, 254],
/* 252 */
25,
/* 253 */
26,
/* 254 */
27,
/* 255 */
28,
/* 256 */
[816, 257],
/* 257 */
[817, 258],
/* 258 */
[818, 259, 260],
/* 259 */
32,
/* 260 */
33,
/* 261 */
34,
/* 262 */
35,
/* 263 */
36,
/* 264 */
74,
/* 265 */
[831, 266],
/* 266 */
[832, 267, 268, 273],
/* 267 */
77,
/* 268 */
[833, 269, 273],
/* 269 */
[834, 270, 271],
/* 270 */
80,
/* 271 */
[835, 272, 272],
/* 272 */
82,
/* 273 */
83,
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var DOMWrap = _react2['default'].createClass({
	  displayName: 'DOMWrap',

	  propTypes: {
	    tag: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      tag: 'div'
	    };
	  },

	  render: function render() {
	    var props = _extends({}, this.props);
	    if (!props.visible) {
	      props.className = props.className || '';
	      props.className += ' ' + props.hiddenClassName;
	    }
	    var Tag = props.tag;
	    return _react2['default'].createElement(Tag, props);
	  }
	});

	exports['default'] = DOMWrap;
	module.exports = exports['default'];

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	exports["default"] = function (props) {
	    var div = document.createElement('div');
	    document.body.appendChild(div);

	    var d = void 0;
	    props = props || {};
	    props.iconClassName = props.iconClassName || 'kuma-icon-caution';
	    var width = props.width || 300;

	    props.locale = props.locale || 'zh-cn';
	    var locale = _i18n2["default"][props.locale];

	    // 默认为 true，保持向下兼容
	    if (!('okCancel' in props)) {
	        props.okCancel = true;
	    }

	    function close() {
	        d.setState({
	            visible: false
	        });
	        _reactDom2["default"].unmountComponentAtNode(div);
	        document.body.removeChild(div);
	    }

	    function onCancel() {
	        var cancelFn = props.onCancel;
	        if (cancelFn) {
	            var ret = void 0;
	            if (cancelFn.length) {
	                ret = cancelFn(close);
	            } else {
	                ret = cancelFn();
	                if (!ret) {
	                    close();
	                }
	            }
	            if (ret && ret.then) {
	                ret.then(close);
	            }
	        } else {
	            close();
	        }
	    }

	    function onOk() {
	        var okFn = props.onOk;
	        if (okFn) {
	            var ret = void 0;
	            if (okFn.length) {
	                ret = okFn(close);
	            } else {
	                ret = okFn();
	                if (!ret) {
	                    close();
	                }
	            }
	            if (ret && ret.then) {
	                ret.then(close);
	            }
	        } else {
	            close();
	        }
	    }

	    var body = _react2["default"].createElement('div', { className: 'kuma-confirm-body' }, _react2["default"].createElement('i', { className: 'kuma-icon ' + props.iconClassName }), _react2["default"].createElement('span', { className: 'kuma-confirm-title' }, props.title), _react2["default"].createElement('div', { className: 'kuma-confirm-content' }, props.content));
	    var footer = void 0;

	    if (props.okCancel) {
	        footer = _react2["default"].createElement('div', { className: 'kuma-confirm-action' }, _react2["default"].createElement(_uxcoreButton2["default"], { size: props.buttonSize || "small", onClick: onOk }, locale['ok']), _react2["default"].createElement(_uxcoreButton2["default"], { type: 'secondary', size: props.buttonSize || "small", onClick: onCancel }, locale['cancel']));
	    } else {
	        footer = _react2["default"].createElement('div', { className: 'kuma-confirm-action' }, _react2["default"].createElement(_uxcoreButton2["default"], { size: props.buttonSize || "small", onClick: onOk }, locale['isee']));
	    }

	    _reactDom2["default"].render(_react2["default"].createElement(_Dialog2["default"], {
	        prefixCls: 'kuma-dlg',
	        className: 'kuma-dlg-confirm',
	        onCancel: onCancel,
	        visible: true,
	        closable: true,
	        title: '',
	        footer: '',
	        transitionName: props.transitionName || "threeFallV",
	        maskTransitionName: props.transitionName || "fade", width: width }, _react2["default"].createElement('div', null, body, ' ', footer)), div, function () {
	        d = this;
	    });
	};

	var _uxcoreButton = __webpack_require__(6);

	var _uxcoreButton2 = _interopRequireDefault(_uxcoreButton);

	var _Dialog = __webpack_require__(229);

	var _Dialog2 = _interopRequireDefault(_Dialog);

	var _i18n = __webpack_require__(276);

	var _i18n2 = _interopRequireDefault(_i18n);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { "default": obj };
	}

	module.exports = exports['default'];

/***/ },
/* 276 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	    'zh-cn': {
	        'ok': '确定',
	        'cancel': '取消',
	        'isee': '知道了'
	    },
	    'en-us': {
	        'ok': 'ok',
	        'cancel': 'cancel',
	        'isee': 'ok'
	    }
		};

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Dropdown Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(278);

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _rcDropdown = __webpack_require__(279);

	var _rcDropdown2 = _interopRequireDefault(_rcDropdown);

	var _objectAssign = __webpack_require__(300);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Dropdown = function (_RcDropdown) {
		_inherits(Dropdown, _RcDropdown);

		function Dropdown(props) {
			_classCallCheck(this, Dropdown);

			return _possibleConstructorReturn(this, _RcDropdown.call(this, props));
		}

		return Dropdown;
	}(_rcDropdown2["default"]);

	Dropdown.displayName = 'uxcore-dropdown';
	Dropdown.propTypes = _rcDropdown2["default"].propTypes;
	Dropdown.defaultProps = (0, _objectAssign2["default"])(_rcDropdown2["default"].defaultProps, {
		prefixCls: 'kuma-dropdown',
		overlayClassName: 'uxcore'
	});

	exports["default"] = Dropdown;
	module.exports = exports['default'];

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Dropdown = __webpack_require__(280);

	var _Dropdown2 = _interopRequireDefault(_Dropdown);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	exports["default"] = _Dropdown2["default"];
	module.exports = exports['default'];

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcTrigger = __webpack_require__(281);

	var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

	var _placements = __webpack_require__(328);

	var _placements2 = _interopRequireDefault(_placements);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}

	/*

	 var MenuItem = Menu.Item;

	 var menu = <Menu><MenuItem>1</MenuItem></Menu>;

	 <DropDown trigger="click" animationName="" overlay={<>} onSelect={}>
	 <button>open</button>
	 </DropDown>
	 */

	var Dropdown = _react2["default"].createClass({
	  displayName: 'Dropdown',

	  propTypes: {
	    minOverlayWidthMatchTrigger: _react.PropTypes.bool,
	    onVisibleChange: _react.PropTypes.func,
	    prefixCls: _react.PropTypes.string,
	    children: _react.PropTypes.any,
	    transitionName: _react.PropTypes.string,
	    overlayClassName: _react.PropTypes.string,
	    animation: _react.PropTypes.any,
	    align: _react.PropTypes.object,
	    overlayStyle: _react.PropTypes.object,
	    placement: _react.PropTypes.string,
	    trigger: _react.PropTypes.array,
	    showAction: _react.PropTypes.array,
	    hideAction: _react.PropTypes.array,
	    getPopupContainer: _react.PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      minOverlayWidthMatchTrigger: true,
	      prefixCls: 'rc-dropdown',
	      trigger: ['hover'],
	      showAction: [],
	      hideAction: [],
	      overlayClassName: '',
	      overlayStyle: {},
	      defaultVisible: false,
	      onVisibleChange: function onVisibleChange() {},

	      placement: 'bottomLeft'
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    if ('visible' in props) {
	      return {
	        visible: props.visible
	      };
	    }
	    return {
	      visible: props.defaultVisible
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(props) {
	    if ('visible' in props) {
	      this.setState({
	        visible: props.visible
	      });
	    }
	  },
	  onClick: function onClick(e) {
	    var props = this.props;
	    var overlayProps = props.overlay.props;
	    if (!('visible' in props)) {
	      this.setState({
	        visible: false
	      });
	    }
	    if (overlayProps.onClick) {
	      overlayProps.onClick(e);
	    }
	  },
	  onVisibleChange: function onVisibleChange(v) {
	    var props = this.props;
	    if (!('visible' in props)) {
	      this.setState({
	        visible: v
	      });
	    }
	    props.onVisibleChange(v);
	  },
	  getMenuElement: function getMenuElement() {
	    var props = this.props;
	    return _react2["default"].cloneElement(props.overlay, {
	      prefixCls: props.prefixCls + '-menu',
	      onClick: this.onClick
	    });
	  },
	  getPopupDomNode: function getPopupDomNode() {
	    return this.refs.trigger.getPopupDomNode();
	  },
	  afterVisibleChange: function afterVisibleChange(visible) {
	    if (visible && this.props.minOverlayWidthMatchTrigger) {
	      var overlayNode = this.getPopupDomNode();
	      var rootNode = _reactDom2["default"].findDOMNode(this);
	      if (rootNode.offsetWidth > overlayNode.offsetWidth) {
	        overlayNode.style.width = rootNode.offsetWidth + 'px';
	      }
	    }
	  },
	  render: function render() {
	    var _extends2;

	    var _props = this.props;
	    var prefixCls = _props.prefixCls;
	    var children = _props.children;
	    var transitionName = _props.transitionName;
	    var animation = _props.animation;
	    var align = _props.align;
	    var placement = _props.placement;
	    var getPopupContainer = _props.getPopupContainer;
	    var showAction = _props.showAction;
	    var hideAction = _props.hideAction;
	    var overlayClassName = _props.overlayClassName;
	    var overlayStyle = _props.overlayStyle;
	    var trigger = _props.trigger;

	    var otherProps = _objectWithoutProperties(_props, ['prefixCls', 'children', 'transitionName', 'animation', 'align', 'placement', 'getPopupContainer', 'showAction', 'hideAction', 'overlayClassName', 'overlayStyle', 'trigger']);

	    return _react2["default"].createElement(_rcTrigger2["default"], _extends({}, otherProps, (_extends2 = {
	      prefixCls: prefixCls,
	      ref: 'trigger',
	      popupClassName: overlayClassName,
	      popupStyle: overlayStyle,
	      builtinPlacements: _placements2["default"],
	      action: trigger,
	      showAction: showAction
	    }, _defineProperty(_extends2, 'showAction', showAction), _defineProperty(_extends2, 'hideAction', hideAction), _defineProperty(_extends2, 'popupPlacement', placement), _defineProperty(_extends2, 'popupAlign', align), _defineProperty(_extends2, 'popupTransitionName', transitionName), _defineProperty(_extends2, 'popupAnimation', animation), _defineProperty(_extends2, 'popupVisible', this.state.visible), _defineProperty(_extends2, 'afterPopupVisibleChange', this.afterVisibleChange), _defineProperty(_extends2, 'popup', this.getMenuElement()), _defineProperty(_extends2, 'onPopupVisibleChange', this.onVisibleChange), _defineProperty(_extends2, 'getPopupContainer', getPopupContainer), _extends2)), children);
	  }
	});

	exports["default"] = Dropdown;
	module.exports = exports['default'];

/***/ },
/* 281 */
[820, 282],
/* 282 */
[821, 283, 304, 327],
/* 283 */
[810, 284, 285, 287, 288, 289, 290, 295, 296, 301, 302, 303],
/* 284 */
17,
/* 285 */
[811, 286],
/* 286 */
19,
/* 287 */
[812, 286],
/* 288 */
21,
/* 289 */
[813, 290],
/* 290 */
[814, 291],
/* 291 */
[815, 292, 293, 294],
/* 292 */
25,
/* 293 */
26,
/* 294 */
27,
/* 295 */
28,
/* 296 */
[816, 297],
/* 297 */
[817, 298],
/* 298 */
[818, 299, 300],
/* 299 */
32,
/* 300 */
33,
/* 301 */
34,
/* 302 */
35,
/* 303 */
36,
/* 304 */
[822, 305, 316, 325, 326],
/* 305 */
[823, 306],
/* 306 */
[824, 307, 283, 315],
/* 307 */
[825, 308, 309, 310, 311, 312, 313],
/* 308 */
67,
/* 309 */
[826, 308],
/* 310 */
[827, 308, 309],
/* 311 */
[828, 308],
/* 312 */
[829, 308],
/* 313 */
[830, 314],
/* 314 */
73,
/* 315 */
74,
/* 316 */
[831, 317],
/* 317 */
[832, 318, 319, 324],
/* 318 */
77,
/* 319 */
[833, 320, 324],
/* 320 */
[834, 321, 322],
/* 321 */
80,
/* 322 */
[835, 323, 323],
/* 323 */
82,
/* 324 */
83,
/* 325 */
[836, 326],
/* 326 */
85,
/* 327 */
86,
/* 328 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var autoAdjustOverflow = {
	  adjustX: 1,
	  adjustY: 1
	};

	var targetOffset = [0, 0];

	var placements = exports.placements = {
	  topLeft: {
	    points: ['bl', 'tl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, -4],
	    targetOffset: targetOffset
	  },
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    overflow: autoAdjustOverflow,
	    offset: [0, 4],
	    targetOffset: targetOffset
	  }
	};

		exports["default"] = placements;

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/**
	 * Form Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var Form = __webpack_require__(330);

	// 以 Form 插件的形式给出
	Form.TextAreaFormField = __webpack_require__(350);
	Form.InputFormField = __webpack_require__(351);
	Form.RadioGroupFormField = __webpack_require__(352);
	Form.SelectFormField = __webpack_require__(356);
	Form.NumberInputFormField = __webpack_require__(433);
	Form.DateFormField = __webpack_require__(434);
	Form.CheckboxGroupFormField = __webpack_require__(435);
	Form.CascadeSelectFormField = __webpack_require__(436);
	Form.OtherFormField = __webpack_require__(437);
	Form.ButtonGroupFormField = __webpack_require__(438);
	Form.EditorFormField = __webpack_require__(439);
	Form.SearchFormField = __webpack_require__(445);

	module.exports = Form;

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Form Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var FormRow = __webpack_require__(331);
	var FormRowTitle = __webpack_require__(332);
	var FormField = __webpack_require__(333);

	var Constants = __webpack_require__(223);
	var Validators = __webpack_require__(338);
	var KeyCode = __webpack_require__(341);

	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(334);
	var deepcopy = __webpack_require__(342);
	var deepEqual = __webpack_require__(335);

	var Form = function (_React$Component) {
	    _inherits(Form, _React$Component);

	    function Form(props) {
	        _classCallCheck(this, Form);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.fields = {};
	        _this.errors = {};
	        _this.data = {};
	        _this.state = {};
	        return _this;
	    }

	    Form.prototype.componentDidMount = function componentDidMount() {
	        var me = this;
	    };

	    Form.prototype._copy = function _copy(a) {
	        return deepcopy(a);
	    };

	    Form.prototype.attachFormField = function attachFormField(field) {
	        var name = field.getName();
	        if (!name) {
	            console.warn("Each field needs a name to identify itself");
	        } else {
	            this.fields[name] = field;
	        }
	    };

	    Form.prototype.detachFormField = function detachFormField(field) {
	        var name = field.getName();
	        delete this.fields[name];
	        delete this.data[name];
	    };

	    Form.prototype.handleDataChange = function handleDataChange(field, fieldData, fromMount) {
	        var me = this;
	        me.data[field.props.jsxname] = fieldData.value;
	        if (!fromMount) {
	            me.props.jsxonChange(me._copy(me.data), field.props.jsxname, fieldData.pass);
	        }
	    };

	    Form.prototype.getValues = function getValues(force) {
	        var me = this;
	        var _flag = me.doValidate(force);
	        return {
	            values: me._copy(me.data),
	            pass: _flag
	        };
	    };

	    Form.prototype.resetValues = function resetValues() {
	        var me = this;
	        var keys = Object.keys(me.fields);
	        var data = me.props.jsxvalues || me.props.passedData || {};
	        for (var i = 0; i < keys.length; i++) {
	            me.fields[keys[i]].handleDataChange(data[keys[i]] == undefined ? null : data[keys[i]], true);
	        }
	    };

	    /*
	     * set Form values manually
	     */

	    Form.prototype.setValues = function setValues(data) {
	        if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) != 'object') return;
	        var me = this;
	        var savedData = me.data;
	        var keys = Object.keys(data);
	        for (var i = 0; i < keys.length; i++) {
	            if (!deepEqual(data[keys[i]], savedData[keys[i]])) {
	                me.fields[keys[i]].handleDataChange(data[keys[i]] == undefined ? null : data[keys[i]], true);
	            }
	        }
	    };

	    Form.prototype.doValidate = function doValidate(force) {
	        var me = this;
	        var pass = true;
	        var keys = Object.keys(me.fields);
	        for (var i = 0; i < keys.length; i++) {
	            var itemPass = me.fields[keys[i]].doValidate(force);
	            me.errors[keys[i]] = !itemPass;
	            if (!itemPass) {
	                pass = false;
	            }
	        }
	        return pass;
	    };

	    Form.prototype.isDirty = function isDirty() {
	        return !this.doValidate();
	    };

	    /*
	     * 统一数据流，所有的 props，通过 Form -> FormRow -> FormField 向下传递，如果有的
	     * 子元素是 FormField，则自动在他的外面包一层 FormRow。
	     * @param {React Elements Array} children this.props.children
	     */

	    Form.prototype._processChild = function _processChild(children) {
	        var length = React.Children.count(children);
	        var elements = [];
	        if (length == 0) {
	            console.warn("FORM: You must pass children to the form component");
	            return false;
	        }

	        React.Children.forEach(children, function (child, index) {
	            // 如果是自己添加的 DOM 直接抛弃
	            if (typeof child.type == 'function') {
	                var displayName = child.type.displayName;
	                if (displayName === 'EngineNode') {
	                    displayName = child.props._componentName;
	                }
	                if (/FormField/.test(displayName)) {
	                    elements.push(React.createElement(FormRow, null, child));
	                } else if (/FormRow/.test(displayName)) {
	                    elements.push(child);
	                }
	            }
	        });

	        return elements;
	    };

	    Form.prototype.render = function render() {
	        var _classnames;

	        var me = this;
	        var elements = me._processChild(me.props.children);

	        return React.createElement('div', { className: classnames((_classnames = {}, _classnames[me.props.jsxprefixCls] = true, _classnames[me.props.className] = !!me.props.className, _classnames["kuma-uxform-edit-mode"] = me.props.jsxmode == Constants.MODE.EDIT, _classnames["kuma-uxform-view-mode"] = me.props.jsxmode == Constants.MODE.VIEW, _classnames)) }, !!elements && elements.map(function (child, index) {
	            return React.cloneElement(child, {
	                mode: me.props.jsxmode,
	                instantValidate: me.props.instantValidate,
	                data: deepcopy(me.props.jsxvalues || me.props.passedData || {}),
	                key: index,
	                attachFormField: me.attachFormField.bind(me),
	                detachFormField: me.detachFormField.bind(me),
	                handleDataChange: me.handleDataChange.bind(me),
	                getValues: me.getValues.bind(me),
	                resetValues: me.resetValues.bind(me)
	            });
	        }));
	    };

	    return Form;
	}(React.Component);

	// 以 Form 的插件的形式给出

	Form.FormRow = FormRow;
	Form.FormRowTitle = FormRowTitle;
	Form.FormField = FormField;

	// Form.MentionFormField = MentionFormField;
	Form.Constants = Constants;
	Form.Validators = Validators;
	Form.KeyCode = KeyCode;

	Form.defaultProps = {
	    jsxprefixCls: "kuma-uxform",
	    jsxmode: Constants.MODE.EDIT,
	    instantValidate: true,
	    jsxonChange: function jsxonChange() {}
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	Form.propTypes = {
	    /**
	     * @title: 类名前缀
	     * @veIgnore
	     */
	    jsxprefixCls: React.PropTypes.string,
	    /**
	     * @title CSS类名
	     * @veIgnore
	     */
	    className: React.PropTypes.string,
	    /**
	     * @title 显示模式
	     */
	    jsxmode: React.PropTypes.string,
	    /**
	     * @title 默认值
	     */
	    jsxvalues: React.PropTypes.object,
	    /**
	     * @title 是否即时校验
	     * @veFieldStyle block
	     */
	    instantValidate: React.PropTypes.bool,
	    /**
	     * @title 表单域改变时的回调
	     */
	    jsxonChange: React.PropTypes.func
	};

	Form.displayName = "Form";

	module.exports = Form;

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var classnames = __webpack_require__(5);

	var FormRow = function (_React$Component) {
	    _inherits(FormRow, _React$Component);

	    function FormRow(props) {
	        _classCallCheck(this, FormRow);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.totalFlex = 0;
	        return _this;
	    }

	    FormRow.prototype._processChild = function _processChild(children) {
	        var me = this;
	        me.totalFlex = 0;
	        var length = React.Children.count(children);
	        var elements = [];
	        if (length == 0) {
	            console.warn("FORM: You must pass children to the form component");
	            return false;
	        }
	        React.Children.forEach(children, function (child, index) {
	            // 如果是自己添加的 DOM 直接抛弃
	            if (typeof child.type == 'function') {
	                var displayName = child.type.displayName;
	                if (displayName === 'EngineNode') {
	                    displayName = child.props._componentName;
	                }
	                if (/FormField/.test(displayName)) {
	                    if (child.props.jsxshow) {
	                        me.totalFlex += child.props.jsxflex;
	                    }
	                    elements.push(child);
	                }
	            }
	        });

	        return elements;
	    };

	    FormRow.prototype.render = function render() {
	        var _classnames;

	        var me = this;
	        var elements = me._processChild(me.props.children);
	        return React.createElement('div', { className: classnames((_classnames = {}, _classnames[me.props.jsxprefixCls] = true, _classnames[me.props.className] = !!me.props.className, _classnames)) }, !!elements && elements.map(function (child, index) {
	            var value = me.props.data[child.props.jsxname];
	            return React.cloneElement(child, {
	                mode: me.props.mode,
	                jsxinstant: me.props.instantValidate,
	                value: value,
	                key: child.props.jsxname || index,
	                style: { width: child.props.jsxflex / me.totalFlex * 100 + '%' },
	                attachFormField: me.props.attachFormField,
	                detachFormField: me.props.detachFormField,
	                handleDataChange: me.props.handleDataChange,
	                getValues: me.props.getValues,
	                resetValues: me.props.resetValues
	            });

	            return child;
	        }));
	    };

	    return FormRow;
	}(React.Component);

	FormRow.defaultProps = {
	    jsxprefixCls: "kuma-uxform-row"
	};
	FormRow.propTypes = {
	    jsxprefixCls: React.PropTypes.string
	};
	FormRow.displayName = "FormRow";

	module.exports = FormRow;

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @author: zhouquan.yezq
	 * @time: 8/7 2015
	 * Form Row Title
	 */
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var Constants = __webpack_require__(223);
	var classnames = __webpack_require__(5);

	var FormRowTitle = function (_React$Component) {
	    _inherits(FormRowTitle, _React$Component);

	    function FormRowTitle(props) {
	        _classCallCheck(this, FormRowTitle);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    FormRowTitle.prototype.render = function render() {
	        var _classnames;

	        var me = this;
	        var length = React.Children.count(me.props.children);
	        return React.createElement('div', { className: classnames((_classnames = {}, _classnames[me.props.jsxprefixCls] = true, _classnames[me.props.className] = !!me.props.className, _classnames)) }, me.props.jsxtitle, !!length && React.Children.map(me.props.children, function (item) {
	            return item;
	        }));
	    };

	    return FormRowTitle;
	}(React.Component);

	;

	FormRowTitle.propTypes = {
	    jsxprefixCls: React.PropTypes.string,
	    jsxtitle: React.PropTypes.string
	};

	FormRowTitle.defaultProps = {
	    jsxprefixCls: "kuma-uxform-row-title",
	    jsxtitle: ""
	};

	FormRowTitle.displayName = "FormRowTitle";

	module.exports = FormRowTitle;

/***/ },
/* 333 */
[840, 223],
/* 334 */
33,
/* 335 */
[841, 336, 337],
/* 336 */
/***/ function(module, exports) {

	'use strict';

	exports = module.exports = typeof Object.keys === 'function' ? Object.keys : shim;

	exports.shim = shim;
	function shim(obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
		}

/***/ },
/* 337 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var supportsArgumentsClass = function () {
	  return Object.prototype.toString.call(arguments);
	}() == '[object Arguments]';

	exports = module.exports = supportsArgumentsClass ? supported : unsupported;

	exports.supported = supported;
	function supported(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	};

	exports.unsupported = unsupported;
	function unsupported(object) {
	  return object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) == 'object' && typeof object.length == 'number' && Object.prototype.hasOwnProperty.call(object, 'callee') && !Object.prototype.propertyIsEnumerable.call(object, 'callee') || false;
		};

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	/**
	 * Created by xy on 15/4/16.
	 */

		module.exports = __webpack_require__(339);

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Validator Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(340);

/***/ },
/* 340 */
/***/ function(module, exports) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/**
	 * Created by xy on 15/4/16.
	 */

	var Validator = {};

	var PATTERN = {
	    EMAIL: /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/,
	    URL: /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/,
	    HEX: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i,
	    NUM: /^((-?\d+\.\d+)|(-?\d+)|(-?\.\d+))$/,
	    IDCARD: /(^\d{15}$)|(^\d{17}([0-9]|X)$)/i,
	    CNMOBILE: /^(0|86|17951)?(13[0-9]|15[012356789]|17[0678]|18[0-9]|14[57])[0-9]{8}$/
	};

	Validator.isNotEmpty = function (value) {
	    // empty means empty string, empty array, empty object & null & undefined
	    if (typeof value == "string") {
	        return value.length !== 0;
	    } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {
	        if (value instanceof Array) {
	            return value.length !== 0;
	        } else {
	            var i = 0;
	            for (var key in value) {
	                i++;
	            }
	            return !!i;
	        }
	    } else if (typeof value == 'number') {
	        return true;
	    } else {
	        return !!value;
	    }
	};

	Validator.isNum = function (value) {
	    return PATTERN.NUM.test(value);
	};

	Validator.isInt = function (value) {
	    return Validator.isNum(value) && parseInt(value) == value;
	};

	Validator.isDecimal = function (value) {
	    return Validator.isNum(value) && !Validator.isInt(value);
	};

	Validator.isArray = function (value) {
	    return Array.isArray(value);
	};

	Validator.isRegExp = function (value) {
	    if (value instanceof RegExp) {
	        return true;
	    }
	    try {
	        return !!new RegExp(value);
	    } catch (e) {
	        return false;
	    }
	};

	Validator.isObject = function (value) {
	    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && !Validator.isArray(value);
	};

	Validator.isFunc = function (value) {
	    return typeof value === 'function';
	};

	Validator.isEmail = function (value) {
	    return typeof value === 'string' && PATTERN.EMAIL.test(value);
	};

	Validator.isUrl = function (value) {
	    return typeof value === 'string' && PATTERN.URL.test(value);
	};

	Validator.isHex = function (value) {
	    return typeof value === 'string' && PATTERN.HEX.test(value);
	};

	Validator.isIdCard = function (value) {
	    return typeof value === 'string' && PATTERN.IDCARD.test(value);
	};

	Validator.isCNMobile = function (value) {
	    return typeof value === 'string' && PATTERN.CNMOBILE.test(value);
	};
		module.exports = Validator;

/***/ },
/* 341 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  /*
	   * Enter
	   */
	  Enter: 13
		};

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, Buffer) {'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	/*!
	 * @license deepcopy.js Copyright(c) 2013 sasa+1
	 * https://github.com/sasaplus1/deepcopy.js
	 * Released under the MIT license.
	 */

	/**
	 * export to AMD/CommonJS/global.
	 *
	 * @param {Object} global global object.
	 * @param {Function} factory factory method.
	 */
	(function (global, factory) {
	  'use strict';

	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
	    module.exports = factory();
	  } else {
	    global.deepcopy = factory();
	  }
	})(undefined, function () {
	  'use strict';

	  var isNode, util, isBuffer, getKeys, getSymbols, indexOfArray;

	  // is node.js/io.js?
	  isNode = typeof process !== 'undefined' && "function" !== 'undefined';

	  // fallback util module for browser.
	  util = isNode ? __webpack_require__(347) : function () {
	    function isArray(value) {
	      return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && Object.prototype.toString.call(value) === '[object Array]';
	    }

	    function isDate(value) {
	      return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && Object.prototype.toString.call(value) === '[object Date]';
	    }

	    function isRegExp(value) {
	      return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && Object.prototype.toString.call(value) === '[object RegExp]';
	    }

	    function isSymbol(value) {
	      return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'symbol';
	    }

	    return {
	      isArray: typeof Array.isArray === 'function' ? function (obj) {
	        return Array.isArray(obj);
	      } : isArray,
	      isDate: isDate,
	      isRegExp: isRegExp,
	      isSymbol: typeof Symbol === 'function' ? isSymbol : function () {
	        // always return false when Symbol is not supported.
	        return false;
	      }
	    };
	  }();

	  // fallback Buffer.isBuffer
	  isBuffer = isNode ? function (obj) {
	    return Buffer.isBuffer(obj);
	  } : function () {
	    // if browser, always return false
	    return false;
	  };

	  // fallback Object.keys for old browsers.
	  getKeys = typeof Object.keys === 'function' ? function (obj) {
	    return Object.keys(obj);
	  } : function (obj) {
	    var keys = [],
	        key;

	    if (obj === null || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {
	      throw new TypeError('obj is not an Object');
	    }

	    for (key in obj) {
	      obj.hasOwnProperty(key) && keys.push(key);
	    }

	    return keys;
	  };

	  // get symbols in object.
	  getSymbols = typeof Symbol === 'function' ? function (obj) {
	    return Object.getOwnPropertySymbols(obj);
	  } : function () {
	    // always return empty array when Symbol is not supported.
	    return [];
	  };

	  // fallback Array#indexOf for old browsers.
	  indexOfArray = typeof Array.prototype.indexOf === 'function' ? function (array, searchElement) {
	    return array.indexOf(searchElement);
	  } : function (array, searchElement) {
	    var i, len;

	    if (!util.isArray(array)) {
	      throw new TypeError('array is not an Array');
	    }

	    for (i = 0, len = array.length; i < len; ++i) {
	      if (array[i] === searchElement) {
	        return i;
	      }
	    }

	    return -1;
	  };

	  /**
	   * recursive deep copy for value.
	   *
	   * @private
	   * @param {*} value copy target.
	   * @param {*} clone
	   * @param {Array} visited
	   * @param {Array} reference
	   * @return {*} copied value.
	   */
	  function copyValue_(value, clone, visited, reference) {
	    var str, pos, buf, keys, i, len, key, val, idx, obj, ref;

	    // number, string, boolean, null, undefined, function and symbol.
	    if (value === null || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
	      return value;
	    }

	    // Date.
	    if (util.isDate(value)) {
	      // Firefox need to convert to Number
	      //
	      // Firefox:
	      //   var date = new Date;
	      //   +date;            // 1420909365967
	      //   +new Date(date);  // 1420909365000
	      //   +new Date(+date); // 1420909365967
	      // Chrome:
	      //   var date = new Date;
	      //   +date;            // 1420909757913
	      //   +new Date(date);  // 1420909757913
	      //   +new Date(+date); // 1420909757913
	      return new Date(+value);
	    }

	    // RegExp.
	    if (util.isRegExp(value)) {
	      // Chrome, Safari:
	      //   (new RegExp).source => "(?:)"
	      // Firefox:
	      //   (new RegExp).source => ""
	      // Chrome, Safari, Firefox
	      //   String(new RegExp) => "/(?:)/"
	      str = String(value);
	      pos = str.lastIndexOf('/');

	      return new RegExp(str.slice(1, pos), str.slice(pos + 1));
	    }

	    // Buffer, node.js only.
	    if (isBuffer(value)) {
	      buf = new Buffer(value.length);
	      value.copy(buf);

	      return buf;
	    }

	    // Object or Array.
	    keys = getKeys(value).concat(getSymbols(value));

	    for (i = 0, len = keys.length; i < len; ++i) {
	      key = keys[i];
	      val = value[key];

	      if (val !== null && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
	        idx = indexOfArray(visited, val);

	        if (idx === -1) {
	          // not circular reference
	          obj = util.isArray(val) ? [] : {};

	          visited.push(val);
	          reference.push(obj);
	        } else {
	          // circular reference
	          ref = reference[idx];
	        }
	      }

	      clone[key] = ref || copyValue_(val, obj, visited, reference);
	    }

	    return clone;
	  }

	  /**
	   * deep copy for value.
	   *
	   * @param {*} value copy target.
	   */
	  function deepcopy(value) {
	    var clone = util.isArray(value) ? [] : {},
	        visited = [value],
	        reference = [clone];

	    return copyValue_(value, clone, visited, reference);
	  }

	  return deepcopy;
		});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(46), __webpack_require__(343).Buffer))

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(344)
	var ieee754 = __webpack_require__(345)
	var isArray = __webpack_require__(346)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    this.length = 0
	    this.parent = undefined
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	} else {
	  // pre-set for values that may exist in the future
	  Buffer.prototype.length = undefined
	  Buffer.prototype.parent = undefined
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(343).Buffer, (function() { return this; }())))

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 345 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 346 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(348);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(349);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(46)))

/***/ },
/* 348 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 349 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Created by xy on 15/4/13.
	 */
	var FormField = __webpack_require__(333);
	var Constants = __webpack_require__(223);
	var assign = __webpack_require__(334);

	var TextAreaFormField = function (_FormField) {
	    _inherits(TextAreaFormField, _FormField);

	    function TextAreaFormField(props) {
	        _classCallCheck(this, TextAreaFormField);

	        return _possibleConstructorReturn(this, _FormField.call(this, props));
	    }

	    TextAreaFormField.prototype.handleChange = function handleChange(e) {
	        var me = this;
	        var autoTrim = me.props.autoTrim;

	        var value = e.currentTarget.value;
	        if (autoTrim) {
	            value = me.trim(value);
	        }
	        me.handleDataChange(value);
	    };

	    TextAreaFormField.prototype.trim = function trim(str) {
	        return str.replace(/(^\s+|\s+$)/g, "");
	    };

	    TextAreaFormField.prototype.addSpecificClass = function addSpecificClass() {
	        var me = this;
	        if (me.props.jsxprefixCls == "kuma-uxform-field") {
	            return me.props.jsxprefixCls + " kuma-textarea-uxform-field";
	        } else {
	            return me.props.jsxprefixCls;
	        }
	    };

	    TextAreaFormField.prototype.handleFocus = function handleFocus(e) {
	        this.props.onFocus(e);
	    };

	    TextAreaFormField.prototype.handleBlur = function handleBlur(e) {
	        var me = this;
	        var pass = true;
	        if (me.props.validateOnBlur) {
	            pass = me.doValidate();
	        }
	        me.props.onBlur(e, pass);
	    };

	    TextAreaFormField.prototype.handleKeyDown = function handleKeyDown(e) {
	        var me = this;
	        me.props.onKeyDown(e);
	    };

	    TextAreaFormField.prototype.renderField = function renderField() {
	        var me = this;
	        var mode = me.props.jsxmode || me.props.mode;
	        if (mode == Constants.MODE.EDIT) {
	            return React.createElement('textarea', {
	                disabled: me.props.jsxdisabled,
	                placeholder: me.props.jsxplaceholder,
	                className: 'kuma-textarea',
	                ref: 'root',
	                value: me.state.value || "",
	                onChange: me.handleChange.bind(me),
	                onFocus: me.handleFocus.bind(me),
	                onBlur: me.handleBlur.bind(me),
	                onKeyDown: me.handleKeyDown.bind(me) });
	        } else if (mode == Constants.MODE.VIEW) {
	            return React.createElement('span', null, me.state.value);
	        }
	    };

	    return TextAreaFormField;
	}(FormField);

	TextAreaFormField.displayName = "TextAreaFormField";
	TextAreaFormField.propTypes = assign({}, FormField.propTypes, {
	    onBlur: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    validateOnBlur: React.PropTypes.bool,
	    autoTrim: React.PropTypes.bool
	});
	TextAreaFormField.defaultProps = assign({}, FormField.defaultProps, {
	    onBlur: function onBlur() {},
	    onFocus: function onFocus() {},
	    onKeyDown: function onKeyDown() {},
	    validateOnBlur: false
	});
		module.exports = TextAreaFormField;

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];for (var key in source) {
	            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }return target;
	};

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var FormField = __webpack_require__(333);
	var Constants = __webpack_require__(223);
	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(334);

	var FormCount = function (_React$Component) {
	    _inherits(FormCount, _React$Component);

	    function FormCount(props) {
	        _classCallCheck(this, FormCount);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    FormCount.prototype.render = function render() {
	        var me = this;
	        return React.createElement('div', { className: 'kuma-uxform-count' }, me.props.length + "/" + me.props.total);
	    };

	    return FormCount;
	}(React.Component);

	FormCount.defaultProps = {};
	FormCount.propTypes = {
	    length: React.PropTypes.number,
	    total: React.PropTypes.number
	};

	FormCount.displayName = "FormCount";

	var LeftAddon = function (_React$Component2) {
	    _inherits(LeftAddon, _React$Component2);

	    function LeftAddon(props) {
	        _classCallCheck(this, LeftAddon);

	        return _possibleConstructorReturn(this, _React$Component2.call(this, props));
	    }

	    LeftAddon.prototype.render = function render() {
	        var me = this;
	        return React.createElement('div', { className: classnames({
	                "kuma-uxform-left-icon": true,
	                "kuma-uxform-left-icon-focus": !!me.props.focus
	            }) }, me.props.children);
	    };

	    return LeftAddon;
	}(React.Component);

	LeftAddon.defaultProps = {};
	LeftAddon.propTypes = {};
	LeftAddon.displayName = "LeftAddon";

	var RightAddon = function (_React$Component3) {
	    _inherits(RightAddon, _React$Component3);

	    function RightAddon(props) {
	        _classCallCheck(this, RightAddon);

	        return _possibleConstructorReturn(this, _React$Component3.call(this, props));
	    }

	    RightAddon.prototype.render = function render() {
	        var me = this;
	        return React.createElement('div', { className: 'kuma-uxform-right-icon ' }, me.props.children);
	    };

	    return RightAddon;
	}(React.Component);

	RightAddon.defaultProps = {};
	RightAddon.propTypes = {};
	RightAddon.displayName = "RightAddon";

	/**
	 * extend FormField, rewrite renderField method
	 */

	var InputFormField = function (_FormField) {
	    _inherits(InputFormField, _FormField);

	    function InputFormField(props) {
	        _classCallCheck(this, InputFormField);

	        return _possibleConstructorReturn(this, _FormField.call(this, props));
	    }

	    InputFormField.prototype.getValue = function getValue() {
	        return ReactDOM.findDOMNode(this.refs.root).value();
	    };

	    InputFormField.prototype.handleChange = function handleChange(e) {
	        var me = this;
	        var autoTrim = me.props.autoTrim;

	        var value = e.currentTarget.value;
	        if (autoTrim) {
	            value = me.trim(value);
	        }
	        me.handleDataChange(me.deFormatValue(value));
	    };

	    InputFormField.prototype.trim = function trim(str) {
	        return str.replace(/(^\s+|\s+$)/g, "");
	    };

	    InputFormField.prototype.handleFocus = function handleFocus(e) {
	        this.setState({
	            focus: true
	        });
	        this.props.onFocus(e);
	    };

	    InputFormField.prototype.handleBlur = function handleBlur(e) {
	        var me = this;
	        me.setState({
	            focus: false
	        });
	        var pass = true;
	        if (me.props.validateOnBlur) {
	            pass = me.doValidate();
	        }
	        me.props.onBlur(e, pass);
	    };

	    InputFormField.prototype.handleKeyDown = function handleKeyDown(e) {
	        var me = this;
	        me.props.onKeyDown(e);
	    };

	    InputFormField.prototype.deFormatValue = function deFormatValue(value) {
	        return value;
	    };

	    InputFormField.prototype.addSpecificClass = function addSpecificClass() {
	        var me = this;
	        if (me.props.jsxprefixCls == "kuma-uxform-field") {
	            return me.props.jsxprefixCls + " kuma-input-uxform-field";
	        } else {
	            return me.props.jsxprefixCls;
	        }
	    };

	    InputFormField.prototype.getCount = function getCount() {
	        var me = this;
	        var children = me.props.children;
	        var element = void 0;
	        React.Children.map(children, function (child) {
	            if (child && typeof child.type == 'function' && child.type.displayName == 'FormCount') {
	                element = child;
	            }
	        });
	        if (!!element) {
	            var total = element.props.total;
	            var Count = React.cloneElement(element, {
	                length: !!me.state.value ? me.state.value.length : 0,
	                key: "count"
	            });

	            return {
	                element: Count,
	                total: total
	            };
	        }
	    };

	    InputFormField.prototype.renderLeftAddon = function renderLeftAddon() {
	        var me = this;
	        var children = me.props.children;
	        var element = void 0;
	        React.Children.map(children, function (child) {
	            if (child && typeof child.type == 'function' && child.type.displayName == 'LeftAddon') {
	                element = child;
	            }
	        });
	        if (!!element) {
	            return React.cloneElement(element, {
	                focus: !!me.state.focus,
	                key: "left"
	            });
	        }
	    };

	    InputFormField.prototype.renderRightAddon = function renderRightAddon() {
	        var me = this;
	        var children = me.props.children;
	        var element = void 0;
	        React.Children.map(children, function (child) {
	            if (child && typeof child.type == 'function' && child.type.displayName == 'RightAddon') {
	                element = child;
	            }
	        });

	        if (!!element) {
	            return React.cloneElement(element, {
	                key: "right"
	            });
	        }
	    };

	    InputFormField.prototype.renderField = function renderField() {
	        var me = this;
	        var arr = [];
	        var mode = me.props.jsxmode || me.props.mode;
	        var count = me.getCount();
	        var leftAddon = me.renderLeftAddon();
	        var rightAddon = me.renderRightAddon();
	        var children = me.props.children;
	        if (mode == Constants.MODE.EDIT) {
	            var otherOptions = {};
	            // if (!!count) {
	            //     otherOptions.maxLength = count.total + "";
	            // }
	            if (!!leftAddon) {
	                arr.push(leftAddon);
	            }
	            arr.push(React.createElement('input', _extends({
	                className: classnames({
	                    "kuma-input": true,
	                    'kuma-uxform-input-has-right': !!count || !!rightAddon,
	                    "kuma-uxform-input-has-left": !!leftAddon
	                }),
	                ref: 'root',
	                key: me.props.inputType,
	                type: me.props.inputType,
	                placeholder: me.props.jsxplaceholder,
	                disabled: me.props.jsxdisabled == "disabled" || me.props.jsxdisabled == true ? "disabled" : "",
	                name: me.props.key,
	                value: me.state.formatValue,
	                onFocus: me.handleFocus.bind(me),
	                onBlur: me.handleBlur.bind(me),
	                onChange: me.handleChange.bind(me),
	                onKeyDown: me.handleKeyDown.bind(me)
	            }, otherOptions)));

	            if (!!rightAddon) {
	                arr.push(rightAddon);
	            } else if (!!count) {
	                arr.push(count.element);
	            }
	        } else if (mode == Constants.MODE.VIEW) {
	            arr.push(React.createElement('span', { key: 'text' }, me.state.formatValue));
	        }
	        return arr;
	    };

	    return InputFormField;
	}(FormField);

	InputFormField.Count = FormCount;
	InputFormField.LeftAddon = LeftAddon;
	InputFormField.RightAddon = RightAddon;
	InputFormField.propTypes = assign({}, FormField.propTypes, {
	    onBlur: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    validateOnBlur: React.PropTypes.bool,
	    autoTrim: React.PropTypes.bool,
	    inputType: React.PropTypes.string
	});
	InputFormField.defaultProps = assign({}, FormField.defaultProps, {
	    onBlur: function onBlur() {},
	    onFocus: function onFocus() {},
	    onKeyDown: function onKeyDown() {},
	    validateOnBlur: false,
	    inputType: 'text'
	});
	InputFormField.displayName = "InputFormField";
	module.exports = InputFormField;

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Created by xy on 15/4/13.
	 */
	var FormField = __webpack_require__(333);
	var Constants = __webpack_require__(223);
	var RadioGroup = __webpack_require__(353);
	var Item = RadioGroup.Item;

	var RadioGroupFormField = function (_FormField) {
	    _inherits(RadioGroupFormField, _FormField);

	    function RadioGroupFormField(props) {
	        _classCallCheck(this, RadioGroupFormField);

	        return _possibleConstructorReturn(this, _FormField.call(this, props));
	    }

	    RadioGroupFormField.prototype.handleChange = function handleChange(value) {
	        var me = this;
	        me.handleDataChange(value);
	    };

	    RadioGroupFormField.prototype.addSpecificClass = function addSpecificClass() {
	        var me = this;
	        if (me.props.jsxprefixCls == "kuma-uxform-field") {
	            return me.props.jsxprefixCls + " kuma-radio-group-uxform-field";
	        } else {
	            return me.props.jsxprefixCls;
	        }
	    };

	    RadioGroupFormField.prototype.renderField = function renderField() {
	        var me = this;
	        var arr = [];
	        var mode = me.props.jsxmode || me.props.mode;
	        if (mode == Constants.MODE.EDIT) {
	            arr.push(React.createElement(RadioGroup, {
	                ref: 'el',
	                key: 'radiogroup',
	                value: me.state.value,
	                onChange: me.handleChange.bind(me) }, me.props.children));
	        } else {
	            var text = me.props.children.filter(function (child, index) {
	                return child.props.value == me.state.value;
	            });

	            if (text.length) {
	                arr.push(React.createElement('span', { key: 'radiogroup' }, text[0].props.text));
	            }
	        }
	        return arr;
	    };

	    return RadioGroupFormField;
	}(FormField);

	RadioGroupFormField.displayName = "RadioGroupFormField";
	RadioGroupFormField.propTypes = FormField.propTypes;
	RadioGroupFormField.defaultProps = FormField.defaultProps;
	RadioGroupFormField.Item = Item;
	module.exports = RadioGroupFormField;

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Radiogroup Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(354);

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	* thanks for https://github.com/chenglou/react-radio-group
	* @author: zhouquan.yezq
	* @time  : 5/25 2015
	*/

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var Item = __webpack_require__(355);
	var classnames = __webpack_require__(5);

	var Radiogroup = function (_React$Component) {
	    _inherits(Radiogroup, _React$Component);

	    function Radiogroup(props) {
	        _classCallCheck(this, Radiogroup);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            defaultValue: props.defaultValue
	        };
	        return _this;
	    }

	    Radiogroup.prototype._handleChange = function _handleChange(value) {
	        var me = this;
	        me.props.onChange(value);
	    };

	    Radiogroup.prototype._processChild = function _processChild() {
	        var me = this;
	        var length = React.Children.count(me.props.children);
	        if (!length) return false;
	        var elements = React.Children.map(me.props.children, function (child, index) {
	            if (!!child.type && child.type.displayName == "RadiogroupItem") {
	                return React.cloneElement(child, {
	                    onChange: me._handleChange.bind(me),
	                    key: index,
	                    checked: me.props.value == child.props.value
	                });
	            }
	        });
	        return elements;
	    };

	    Radiogroup.prototype.render = function render() {
	        var _classnames;

	        var me = this;
	        return React.createElement('div', { className: classnames((_classnames = {
	                "kuma-radio-group": true
	            }, _classnames[me.props.className] = !!me.props.className, _classnames)) }, me._processChild());
	    };

	    return Radiogroup;
	}(React.Component);

	Radiogroup.displayName = "Radiogroup";
	Radiogroup.propTypes = {
	    value: React.PropTypes.string,
	    onChange: React.PropTypes.func
	};
	Radiogroup.defaultProps = {
	    value: "",
	    onChange: function onChange() {}
	};

	Radiogroup.Item = Item;

	module.exports = Radiogroup;

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var RadiogroupItem = function (_React$Component) {
	    _inherits(RadiogroupItem, _React$Component);

	    function RadiogroupItem(props) {
	        _classCallCheck(this, RadiogroupItem);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    RadiogroupItem.prototype._handleChange = function _handleChange(e) {
	        var me = this;
	        me.props.onChange(me.props.value);
	    };

	    RadiogroupItem.prototype.render = function render() {
	        var me = this;
	        return React.createElement('label', null, React.createElement('input', { type: 'radio', disabled: me.props.disabled, ref: 'radio', className: me.props.className, checked: me.props.checked, onChange: me._handleChange.bind(me) }), React.createElement('s', null), me.props.text);
	    };

	    return RadiogroupItem;
	}(React.Component);

	RadiogroupItem.displayName = "RadiogroupItem";
	RadiogroupItem.propTypes = {
	    text: React.PropTypes.string,
	    value: React.PropTypes.string,
	    className: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    onChange: React.PropTypes.func
	};
	RadiogroupItem.defaultProps = {
	    text: "",
	    value: "",
	    className: "kuma-checkbox",
	    disabled: false,
	    onChange: function onChange() {}
	};

		module.exports = RadiogroupItem;

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * SelectFormField Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(357);

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Created by xy on 15/4/13.
	 */
	var FormField = __webpack_require__(358);
	var Constants = __webpack_require__(360);
	var Select = __webpack_require__(362);
	var assign = __webpack_require__(334);
	var Validator = __webpack_require__(339);
	var isObject = Validator.isObject;
	var isArray = Validator.isArray;
	var Option = Select.Option;

	var selectOptions = ['onSelect', 'onDeselect', 'getPopupContainer', 'multiple', 'filterOption', 'allowClear', 'combobox', 'searchPlaceholder', 'tags', 'disabled', 'showSearch', 'placeholder', 'optionLabelProp', 'maxTagTextLength', 'dropdownMatchSelectWidth', 'dropdownClassName', 'notFoundContent'];

	var SelectFormField = function (_FormField) {
	    _inherits(SelectFormField, _FormField);

	    function SelectFormField(props) {
	        _classCallCheck(this, SelectFormField);

	        var _this = _possibleConstructorReturn(this, _FormField.call(this, props));

	        var me = _this;
	        assign(me.state, {
	            data: props.jsxdata
	        });
	        return _this;
	    }

	    SelectFormField.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        var me = this;
	        if (!me._isEqual(nextProps.value, me.props.value)) {
	            me.handleDataChange(me._processValue(nextProps.value), true);
	        }
	        if (!me._isEqual(nextProps.jsxdata, me.props.jsxdata)) {
	            me.setState({
	                data: nextProps.jsxdata
	            });
	        }
	    };

	    SelectFormField.prototype.componentWillMount = function componentWillMount() {
	        var me = this;
	        if (me.props.jsxfetchUrl) {
	            me.fetchData();
	        }
	    };

	    SelectFormField.prototype.componentDidMount = function componentDidMount() {
	        var me = this;
	        if (!me.props.standalone) {
	            me.props.attachFormField(me);
	            me.props.handleDataChange(me, {
	                value: me._processValue(me.props.value),
	                pass: true
	            }, true);
	        }
	        me.hasDeprecatedProps();
	    };

	    SelectFormField.prototype.handleDataChange = function handleDataChange(value, fromReset) {
	        var me = this;
	        me.setState({
	            value: value,
	            formatValue: me.formatValue(value),
	            error: !!fromReset ? false : me.state.error,
	            /*
	             * why set state fromReset? some field like editor cannot be reset in the common way
	             * so set this state to tell the field that you need to reset by yourself.
	             */
	            fromReset: fromReset
	        }, function () {
	            var pass = true;
	            if (!fromReset) {
	                pass = me.doValidate();
	            }
	            me.props.handleDataChange(me, {
	                value: value,
	                pass: pass
	            });
	        });
	    };

	    SelectFormField.prototype.fetchData = function fetchData(value) {
	        var me = this;
	        var ajaxOptions = {
	            url: me.props.jsxfetchUrl,
	            dataType: me.props.dataType,
	            data: me.props.beforeFetch({
	                q: value
	            }),
	            success: function success(data) {
	                var fetchData = me.props.afterFetch(data);
	                if (!!me.props.jsxdata) {
	                    fetchData = assign({}, fetchData, me.props.jsxdata);
	                }
	                me.setState({
	                    data: fetchData
	                });
	            },
	            fail: function fail() {
	                console.log("Fetch Data failed");
	            }
	        };
	        if (/\.jsonp/.test(me.props.jsxfetchUrl)) {
	            ajaxOptions.dataType = "jsonp";
	        }
	        $.ajax(ajaxOptions);
	    };

	    SelectFormField.prototype.handleChange = function handleChange(value, label) {
	        var me = this;
	        me.handleDataChange(value, false, label);
	    };

	    SelectFormField.prototype.handleSearch = function handleSearch(value) {
	        var me = this;
	        if (me.props.jsxfetchUrl) {
	            me.fetchData(value);
	        } else {
	            me.props.onSearch && me.props.onSearch(value);
	        }
	    };

	    SelectFormField.prototype._processData = function _processData() {
	        var me = this;
	        var values = Object.keys(me.state.data);
	        var children = me.props.children;
	        if (!values.length) {
	            // console.warn("You need to pass data to initialize Select.");
	            if (!!children) {
	                return children;
	            }
	        } else {
	            var arr = values.map(function (value, index) {
	                var content = "";
	                var _me$props = me.props;
	                var multiple = _me$props.multiple;
	                var jsxmultiple = _me$props.jsxmultiple;
	                var combobox = _me$props.combobox;
	                var jsxcombobox = _me$props.jsxcombobox;

	                if (multiple == true || jsxmultiple == true || combobox == true || jsxcombobox == true) {
	                    content = me.state.data[value];
	                } else {
	                    content = React.createElement('span', { title: me.state.data[value] }, me.state.data[value]);
	                }
	                return React.createElement(Option, { key: value, title: me.state.data[value] }, content);
	            });
	            return arr;
	        }
	    };

	    SelectFormField.prototype._processValue = function _processValue(value) {
	        var me = this;
	        value = value || me.state.value;
	        if (!me.props.jsxfetchUrl && !me.props.onSearch) {
	            return value;
	        }
	        if (typeof value == "string") {
	            return {
	                key: value
	            };
	        } else if (value instanceof Array) {
	            return value.map(function (item) {
	                if (typeof item == "string") {
	                    return {
	                        key: item
	                    };
	                } else {
	                    return item;
	                }
	            });
	        } else {
	            return value;
	        }
	    };

	    SelectFormField.prototype.addSpecificClass = function addSpecificClass() {
	        var me = this;
	        if (me.props.jsxprefixCls == "kuma-uxform-field") {
	            return me.props.jsxprefixCls + " kuma-select-uxform-field";
	        } else {
	            return me.props.jsxprefixCls;
	        }
	    };

	    SelectFormField.prototype.hasDeprecatedProps = function hasDeprecatedProps() {
	        var arr = ['jsxmultiple', 'jsxallowClear', 'jsxcombobox', 'jsxsearchPlaceholder', 'jsxtags', 'jsxdisabled', 'jsxshowSearch', 'jsxplaceholder'];
	        var me = this;
	        var keys = Object.keys(me.props);
	        var hasDeprecated = keys.some(function (item, index) {
	            return arr.indexOf(item) != -1;
	        });
	        if (hasDeprecated) {
	            console.warn("SelectFormField: props same as uxcore-select2 can be passed without prefix 'jsx' now (exclude style). we will remove the support of the props mentioned above with prefix 'jsx' at uxcore-form@1.3.0 .");
	        }
	    };

	    SelectFormField.prototype.renderField = function renderField() {
	        var me = this;
	        var arr = [];
	        var mode = me.props.jsxmode || me.props.mode;

	        if (mode == Constants.MODE.EDIT) {
	            (function () {
	                var options = {
	                    ref: "el",
	                    key: "select",
	                    optionLabelProp: me.props.optionLabelProp,
	                    style: me.props.jsxstyle,
	                    multiple: me.props.jsxmultiple,
	                    allowClear: me.props.jsxallowClear,
	                    combobox: me.props.jsxcombobox,
	                    searchPlaceholder: me.props.jsxsearchPlaceholder,
	                    tags: me.props.jsxtags,
	                    optionFilterProp: me.props.optionFilterProp,
	                    disabled: !!me.props.jsxdisabled,
	                    showSearch: me.props.jsxshowSearch,
	                    placeholder: me.props.jsxplaceholder,
	                    onChange: me.handleChange.bind(me),
	                    onSearch: me.handleSearch.bind(me)
	                };

	                selectOptions.forEach(function (item, index) {
	                    if (item in me.props) {
	                        options[item] = me.props[item];
	                    }
	                });

	                if (Object.keys(me.props.jsxdata).length > 0) {
	                    options.optionFilterProp = 'title';
	                }

	                // only jsxfetchUrl mode need pass label, for the options always change.
	                // when mount, state.label is undefined, which cause defalutValue cannot be used.
	                if (!!me.props.jsxfetchUrl || !!me.props.onSearch) {
	                    options.labelInValue = true;
	                }

	                if (!me.props.combobox || me.state.fromReset) {
	                    options.value = me._processValue() || [];
	                }

	                if (!!me.props.jsxfetchUrl) {
	                    options.filterOption = false;
	                }
	                arr.push(React.createElement(Select, options, me._processData()));
	            })();
	        } else if (mode == Constants.MODE.VIEW) {
	            var str = '';
	            if (me.state.value) {
	                var value = me._processValue();
	                var values = !isArray(value) ? [value] : value;
	                str = values.map(function (item) {
	                    return item.key;
	                }).join(" ");
	            }
	            arr.push(React.createElement('span', { key: 'select' }, str));
	        }
	        return arr;
	    };

	    return SelectFormField;
	}(FormField);

	SelectFormField.Option = Option;
	SelectFormField.displayName = "SelectFormField";
	SelectFormField.propTypes = assign({}, FormField.propTypes, {
	    jsxstyle: React.PropTypes.object,
	    jsxplaceholder: React.PropTypes.string,
	    jsxcombobox: React.PropTypes.bool,
	    jsxdata: React.PropTypes.object,
	    beforeFetch: React.PropTypes.func,
	    afterFetch: React.PropTypes.func,
	    jsxshowSearch: React.PropTypes.bool,
	    jsxtags: React.PropTypes.bool,
	    jsxmultiple: React.PropTypes.bool,
	    jsxallowClear: React.PropTypes.bool,
	    jsxsearchPlaceholder: React.PropTypes.string,
	    optionFilterProp: React.PropTypes.string,
	    dataType: React.PropTypes.string
	});

	SelectFormField.defaultProps = assign({}, FormField.defaultProps, {
	    jsxstyle: {},
	    jsxplaceholder: "请下拉选择",
	    jsxcombobox: false,
	    jsxdata: {},
	    beforeFetch: function beforeFetch(obj) {
	        return obj;
	    },
	    afterFetch: function afterFetch(obj) {
	        return obj;
	    },
	    jsxshowSearch: true,
	    jsxallowClear: false,
	    jsxtags: false,
	    jsxmultiple: false,
	    jsxsearchPlaceholder: "",
	    optionFilterProp: "children",
	    optionLabelProp: "children",
	    dataType: 'json'
	});

		module.exports = SelectFormField;

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * FormField Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(359);

/***/ },
/* 359 */
[840, 360],
/* 360 */
[839, 361],
/* 361 */
224,
/* 362 */
[842, 363],
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _rcSelect = __webpack_require__(364);

	var _rcSelect2 = _interopRequireDefault(_rcSelect);

	var _objectAssign = __webpack_require__(383);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Select2 = function (_RcSelect) {
	    _inherits(Select2, _RcSelect);

	    function Select2(props) {
	        _classCallCheck(this, Select2);

	        return _possibleConstructorReturn(this, _RcSelect.call(this, props));
	    }

	    return Select2;
	}(_rcSelect2["default"]);

	Select2.displayName = 'Select2';
	Select2.defaultProps = (0, _objectAssign2["default"])({}, _rcSelect2["default"].defaultProps, {
	    prefixCls: "kuma-select2",
	    optionLabelProp: "children",
	    transitionName: 'slideUp'
	});

	exports["default"] = Select2;
	module.exports = exports['default'];

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.OptGroup = exports.Option = undefined;

	var _Select = __webpack_require__(365);

	var _Select2 = _interopRequireDefault(_Select);

	var _Option = __webpack_require__(432);

	var _Option2 = _interopRequireDefault(_Option);

	var _OptGroup = __webpack_require__(387);

	var _OptGroup2 = _interopRequireDefault(_OptGroup);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	_Select2["default"].Option = _Option2["default"];
	_Select2["default"].OptGroup = _OptGroup2["default"];
	exports.Option = _Option2["default"];
	exports.OptGroup = _OptGroup2["default"];
	exports["default"] = _Select2["default"];

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcUtil = __webpack_require__(366);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _OptGroup = __webpack_require__(387);

	var _OptGroup2 = _interopRequireDefault(_OptGroup);

	var _rcAnimate = __webpack_require__(388);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _componentClasses = __webpack_require__(394);

	var _componentClasses2 = _interopRequireDefault(_componentClasses);

	var _util = __webpack_require__(397);

	var _SelectTrigger = __webpack_require__(412);

	var _SelectTrigger2 = _interopRequireDefault(_SelectTrigger);

	var _FilterMixin = __webpack_require__(431);

	var _FilterMixin2 = _interopRequireDefault(_FilterMixin);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function noop() {}

	function filterFn(input, child) {
	  return String((0, _util.getPropValue)(child, this.props.optionFilterProp)).indexOf(input) > -1;
	}

	function saveRef(name, component) {
	  this[name] = component;
	}

	var Select = _react2["default"].createClass({
	  displayName: 'Select',

	  propTypes: {
	    defaultActiveFirstOption: _react.PropTypes.bool,
	    multiple: _react.PropTypes.bool,
	    filterOption: _react.PropTypes.any,
	    showSearch: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    allowClear: _react.PropTypes.bool,
	    showArrow: _react.PropTypes.bool,
	    tags: _react.PropTypes.bool,
	    prefixCls: _react.PropTypes.string,
	    className: _react.PropTypes.string,
	    transitionName: _react.PropTypes.string,
	    optionLabelProp: _react.PropTypes.string,
	    optionFilterProp: _react.PropTypes.string,
	    animation: _react.PropTypes.string,
	    choiceTransitionName: _react.PropTypes.string,
	    onChange: _react.PropTypes.func,
	    onSelect: _react.PropTypes.func,
	    onSearch: _react.PropTypes.func,
	    searchPlaceholder: _react.PropTypes.string,
	    placeholder: _react.PropTypes.any,
	    onDeselect: _react.PropTypes.func,
	    labelInValue: _react.PropTypes.bool,
	    value: _react.PropTypes.any,
	    defaultValue: _react.PropTypes.any,
	    dropdownStyle: _react.PropTypes.object,
	    maxTagTextLength: _react.PropTypes.number
	  },

	  mixins: [_FilterMixin2["default"]],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-select',
	      filterOption: filterFn,
	      defaultOpen: false,
	      labelInValue: false,
	      defaultActiveFirstOption: true,
	      showSearch: true,
	      allowClear: false,
	      placeholder: '',
	      searchPlaceholder: '',
	      defaultValue: [],
	      onChange: noop,
	      onSelect: noop,
	      onSearch: noop,
	      onDeselect: noop,
	      showArrow: true,
	      dropdownMatchSelectWidth: true,
	      dropdownStyle: {},
	      dropdownMenuStyle: {},
	      optionFilterProp: 'value',
	      optionLabelProp: 'value',
	      notFoundContent: 'Not Found'
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var value = [];
	    if ('value' in props) {
	      value = (0, _util.toArray)(props.value);
	    } else {
	      value = (0, _util.toArray)(props.defaultValue);
	    }
	    value = this.addLabelToValue(props, value);
	    var inputValue = '';
	    if (props.combobox) {
	      inputValue = value.length ? String(value[0].key) : '';
	    }
	    this.saveInputRef = saveRef.bind(this, 'inputInstance');
	    var open = props.open;
	    if (open === undefined) {
	      open = props.defaultOpen;
	    }
	    return {
	      value: value,
	      inputValue: inputValue,
	      open: open
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ('value' in nextProps) {
	      var value = (0, _util.toArray)(nextProps.value);
	      value = this.addLabelToValue(nextProps, value);
	      this.setState({
	        value: value
	      });
	      if (nextProps.combobox) {
	        this.setState({
	          inputValue: value.length ? String(value[0].key) : ''
	        });
	      }
	    }
	  },
	  componentDidUpdate: function componentDidUpdate() {
	    var state = this.state;
	    var props = this.props;

	    if (state.open && ((0, _util.isMultipleOrTags)(props) || props.showSearch)) {
	      var inputNode = this.getInputDOMNode();
	      if (inputNode.value) {
	        inputNode.style.width = '';
	        inputNode.style.width = inputNode.scrollWidth + 'px';
	      } else {
	        inputNode.style.width = '';
	      }
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    if (this.dropdownContainer) {
	      _reactDom2["default"].unmountComponentAtNode(this.dropdownContainer);
	      document.body.removeChild(this.dropdownContainer);
	      this.dropdownContainer = null;
	    }
	  },
	  onInputChange: function onInputChange(event) {
	    var val = event.target.value;
	    var props = this.props;

	    this.setState({
	      inputValue: val,
	      open: true
	    });
	    if ((0, _util.isCombobox)(props)) {
	      this.fireChange([{
	        key: val
	      }]);
	    }
	    props.onSearch(val);
	  },
	  onDropdownVisibleChange: function onDropdownVisibleChange(open) {
	    this.setOpenState(open);
	  },

	  // combobox ignore
	  onKeyDown: function onKeyDown(event) {
	    var props = this.props;
	    if (props.disabled) {
	      return;
	    }
	    var keyCode = event.keyCode;
	    if (this.state.open && !this.getInputDOMNode()) {
	      this.onInputKeyDown(event);
	    } else if (keyCode === _rcUtil.KeyCode.ENTER || keyCode === _rcUtil.KeyCode.DOWN) {
	      this.setOpenState(true);
	      event.preventDefault();
	    }
	  },
	  onInputKeyDown: function onInputKeyDown(event) {
	    var props = this.props;
	    if (props.disabled) {
	      return;
	    }
	    var state = this.state;
	    var keyCode = event.keyCode;
	    if ((0, _util.isMultipleOrTags)(props) && !event.target.value && keyCode === _rcUtil.KeyCode.BACKSPACE) {
	      var value = state.value.concat();
	      if (value.length) {
	        var popValue = value.pop();
	        props.onDeselect(props.labelInValue ? popValue : popValue.key);
	        this.fireChange(value);
	      }
	      return;
	    }
	    if (keyCode === _rcUtil.KeyCode.DOWN) {
	      if (!state.open) {
	        this.openIfHasChildren();
	        event.preventDefault();
	        event.stopPropagation();
	        return;
	      }
	    } else if (keyCode === _rcUtil.KeyCode.ESC) {
	      if (state.open) {
	        this.setOpenState(false);
	        event.preventDefault();
	        event.stopPropagation();
	      }
	      return;
	    }

	    if (state.open) {
	      var menu = this.refs.trigger.getInnerMenu();
	      if (menu && menu.onKeyDown(event)) {
	        event.preventDefault();
	        event.stopPropagation();
	      }
	    }
	  },
	  onMenuSelect: function onMenuSelect(_ref) {
	    var item = _ref.item;

	    var value = this.state.value;
	    var props = this.props;
	    var selectedValue = (0, _util.getValuePropValue)(item);
	    var selectedLabel = this.getLabelFromOption(item);
	    var event = selectedValue;
	    if (props.labelInValue) {
	      event = {
	        key: event,
	        label: selectedLabel
	      };
	    }
	    props.onSelect(event, item);
	    if ((0, _util.isMultipleOrTags)(props)) {
	      if ((0, _util.findIndexInValueByKey)(value, selectedValue) !== -1) {
	        return;
	      }
	      value = value.concat([{
	        key: selectedValue,
	        label: selectedLabel
	      }]);
	    } else {
	      if (value.length && value[0].key === selectedValue) {
	        this.setOpenState(false, true);
	        return;
	      }
	      value = [{
	        key: selectedValue,
	        label: selectedLabel
	      }];
	      this.setOpenState(false, true);
	    }
	    this.fireChange(value);
	    this.setState({
	      inputValue: ''
	    });
	    if ((0, _util.isCombobox)(props)) {
	      this.setState({
	        inputValue: (0, _util.getPropValue)(item, props.optionLabelProp)
	      });
	    }
	  },
	  onMenuDeselect: function onMenuDeselect(_ref2) {
	    var item = _ref2.item;
	    var domEvent = _ref2.domEvent;

	    if (domEvent.type === 'click') {
	      this.removeSelected((0, _util.getValuePropValue)(item));
	    }
	    this.setState({
	      inputValue: ''
	    });
	  },
	  onArrowClick: function onArrowClick(e) {
	    e.stopPropagation();
	    this.setOpenState(!this.state.open, true);
	  },
	  onPlaceholderClick: function onPlaceholderClick() {
	    this.getInputDOMNode().focus();
	  },
	  onOuterFocus: function onOuterFocus() {
	    this._focused = true;
	    this.updateFocusClassName();
	  },
	  onPopupFocus: function onPopupFocus() {
	    // fix ie scrollbar, focus element again
	    this.maybeFocus(true, true);
	  },
	  onOuterBlur: function onOuterBlur() {
	    this._focused = false;
	    this.updateFocusClassName();
	  },
	  onClearSelection: function onClearSelection(event) {
	    var props = this.props;
	    var state = this.state;
	    if (props.disabled) {
	      return;
	    }
	    event.stopPropagation();
	    if (state.inputValue || state.value.length) {
	      this.fireChange([]);
	      this.setOpenState(false);
	      this.setState({
	        inputValue: ''
	      });
	    }
	  },
	  getLabelBySingleValue: function getLabelBySingleValue(children, value) {
	    var _this = this;

	    if (value === undefined) {
	      return null;
	    }
	    var label = null;
	    _react2["default"].Children.forEach(children, function (child) {
	      if (child.type === _OptGroup2["default"]) {
	        var maybe = _this.getLabelBySingleValue(child.props.children, value);
	        if (maybe !== null) {
	          label = maybe;
	        }
	      } else if ((0, _util.getValuePropValue)(child) === value) {
	        label = _this.getLabelFromOption(child);
	      }
	    });
	    return label;
	  },
	  getLabelFromOption: function getLabelFromOption(child) {
	    return (0, _util.getPropValue)(child, this.props.optionLabelProp);
	  },
	  getLabelFromProps: function getLabelFromProps(props, value) {
	    return this.getLabelByValue(props.children, value);
	  },
	  getVLForOnChange: function getVLForOnChange(vls_) {
	    var vls = vls_;
	    if (vls !== undefined) {
	      if (!this.props.labelInValue) {
	        vls = vls.map(function (v) {
	          return v.key;
	        });
	      }
	      return (0, _util.isMultipleOrTags)(this.props) ? vls : vls[0];
	    }
	    return vls;
	  },
	  getLabelByValue: function getLabelByValue(children, value) {
	    var label = this.getLabelBySingleValue(children, value);
	    if (label === null) {
	      return value;
	    }
	    return label;
	  },
	  getDropdownContainer: function getDropdownContainer() {
	    if (!this.dropdownContainer) {
	      this.dropdownContainer = document.createElement('div');
	      document.body.appendChild(this.dropdownContainer);
	    }
	    return this.dropdownContainer;
	  },
	  getSearchPlaceholderElement: function getSearchPlaceholderElement(hidden) {
	    var props = this.props;
	    var placeholder = void 0;
	    if ((0, _util.isMultipleOrTagsOrCombobox)(props)) {
	      placeholder = props.placeholder || props.searchPlaceholder;
	    } else {
	      placeholder = props.searchPlaceholder;
	    }
	    if (placeholder) {
	      return _react2["default"].createElement('div', _extends({
	        onMouseDown: _util.preventDefaultEvent,
	        style: _extends({
	          display: hidden ? 'none' : 'block'
	        }, _util.UNSELECTABLE_STYLE)
	      }, _util.UNSELECTABLE_ATTRIBUTE, {
	        onClick: this.onPlaceholderClick,
	        className: props.prefixCls + '-search__field__placeholder'
	      }), placeholder);
	    }
	    return null;
	  },
	  getInputElement: function getInputElement() {
	    var props = this.props;
	    var shouldShowPlaceholder = (0, _util.isMultipleOrTags)(props) || props.showSearch;
	    return _react2["default"].createElement('div', { className: props.prefixCls + '-search__field__wrap' }, _react2["default"].createElement('input', {
	      ref: this.saveInputRef,
	      onChange: this.onInputChange,
	      onKeyDown: this.onInputKeyDown,
	      value: this.state.inputValue,
	      disabled: props.disabled,
	      className: props.prefixCls + '-search__field'
	    }), shouldShowPlaceholder ? null : this.getSearchPlaceholderElement(!!this.state.inputValue));
	  },
	  getInputDOMNode: function getInputDOMNode() {
	    return this.inputInstance;
	  },
	  getPopupDOMNode: function getPopupDOMNode() {
	    return this.refs.trigger.getPopupDOMNode();
	  },
	  getPopupMenuComponent: function getPopupMenuComponent() {
	    return this.refs.trigger.getInnerMenu();
	  },
	  setOpenState: function setOpenState(open, needFocus) {
	    var _this2 = this;

	    var props = this.props;
	    var state = this.state;

	    if (state.open === open) {
	      this.maybeFocus(open, needFocus);
	      return;
	    }
	    var nextState = {
	      open: open
	    };
	    // clear search input value when open is false in singleMode.
	    if (!open && (0, _util.isSingleMode)(props) && props.showSearch) {
	      nextState.inputValue = '';
	    }
	    if (!open) {
	      this.maybeFocus(open, needFocus);
	    }
	    this.setState(nextState, function () {
	      if (open) {
	        _this2.maybeFocus(open, needFocus);
	      }
	    });
	  },
	  updateFocusClassName: function updateFocusClassName() {
	    var refs = this.refs;
	    var props = this.props;
	    // avoid setState and its side effect

	    if (this._focused || this.state.open) {
	      (0, _componentClasses2["default"])(refs.root).add(props.prefixCls + '-focused');
	    } else {
	      (0, _componentClasses2["default"])(refs.root).remove(props.prefixCls + '-focused');
	    }
	  },
	  maybeFocus: function maybeFocus(open, needFocus) {
	    if (needFocus || open) {
	      var input = this.getInputDOMNode();
	      var _document = document;
	      var activeElement = _document.activeElement;

	      if (input && (open || (0, _util.isMultipleOrTagsOrCombobox)(this.props))) {
	        if (activeElement !== input) {
	          input.focus();
	        }
	      } else {
	        var selection = this.refs.selection;
	        if (activeElement !== selection) {
	          selection.focus();
	        }
	      }
	    }
	  },
	  addLabelToValue: function addLabelToValue(props, value_) {
	    var _this3 = this;

	    var value = value_;
	    if (props.labelInValue) {
	      value.forEach(function (v) {
	        v.label = v.label || _this3.getLabelFromProps(props, v.key);
	      });
	    } else {
	      value = value.map(function (v) {
	        return {
	          key: v,
	          label: _this3.getLabelFromProps(props, v)
	        };
	      });
	    }
	    return value;
	  },
	  removeSelected: function removeSelected(selectedKey) {
	    var props = this.props;
	    if (props.disabled) {
	      return;
	    }
	    var label = void 0;
	    var value = this.state.value.filter(function (singleValue) {
	      if (singleValue.key === selectedKey) {
	        label = singleValue.label;
	      }
	      return singleValue.key !== selectedKey;
	    });
	    var canMultiple = (0, _util.isMultipleOrTags)(props);

	    if (canMultiple) {
	      var event = selectedKey;
	      if (props.labelInValue) {
	        event = {
	          key: selectedKey,
	          label: label
	        };
	      }
	      props.onDeselect(event);
	    }
	    this.fireChange(value);
	  },
	  openIfHasChildren: function openIfHasChildren() {
	    var props = this.props;
	    if (_react2["default"].Children.count(props.children) || (0, _util.isSingleMode)(props)) {
	      this.setOpenState(true);
	    }
	  },
	  fireChange: function fireChange(value) {
	    var props = this.props;
	    if (!('value' in props)) {
	      this.setState({
	        value: value
	      });
	    }
	    props.onChange(this.getVLForOnChange(value));
	  },
	  renderTopControlNode: function renderTopControlNode() {
	    var _this4 = this;

	    var _state = this.state;
	    var value = _state.value;
	    var open = _state.open;
	    var inputValue = _state.inputValue;

	    var props = this.props;
	    var choiceTransitionName = props.choiceTransitionName;
	    var prefixCls = props.prefixCls;
	    var maxTagTextLength = props.maxTagTextLength;
	    var showSearch = props.showSearch;
	    // search input is inside topControlNode in single, multiple & combobox. 2016/04/13

	    if ((0, _util.isSingleMode)(props)) {
	      var innerNode = null;
	      var selectedValue = null;
	      if (!value.length) {
	        selectedValue = _react2["default"].createElement('div', {
	          key: 'placeholder',
	          className: prefixCls + '-selection__placeholder'
	        }, props.placeholder);
	      } else {
	        selectedValue = _react2["default"].createElement('div', { key: 'value', className: prefixCls + '-selection-selected-value' }, value[0].label);
	      }
	      if (!showSearch || !open) {
	        innerNode = selectedValue;
	      } else {
	        innerNode = _react2["default"].createElement('div', {
	          className: prefixCls + '-search ' + prefixCls + '-search--inline',
	          key: 'input'
	        }, !!inputValue ? null : selectedValue, this.getInputElement());
	      }
	      return _react2["default"].createElement('div', { className: prefixCls + '-selection__rendered' }, innerNode);
	    }

	    var selectedValueNodes = [];
	    if ((0, _util.isMultipleOrTags)(props)) {
	      selectedValueNodes = value.map(function (singleValue) {
	        var content = singleValue.label;
	        var title = content;
	        if (maxTagTextLength && typeof content === 'string' && content.length > maxTagTextLength) {
	          content = content.slice(0, maxTagTextLength) + '...';
	        }
	        return _react2["default"].createElement('li', _extends({
	          style: _util.UNSELECTABLE_STYLE
	        }, _util.UNSELECTABLE_ATTRIBUTE, {
	          onMouseDown: _util.preventDefaultEvent,
	          className: prefixCls + '-selection__choice',
	          key: singleValue.key,
	          title: title
	        }), _react2["default"].createElement('div', { className: prefixCls + '-selection__choice__content' }, content), _react2["default"].createElement('span', {
	          className: prefixCls + '-selection__choice__remove',
	          onClick: _this4.removeSelected.bind(_this4, singleValue.key)
	        }));
	      });
	    }
	    selectedValueNodes.push(_react2["default"].createElement('li', {
	      className: prefixCls + '-search ' + prefixCls + '-search--inline',
	      key: '__input'
	    }, this.getInputElement()));
	    var className = prefixCls + '-selection__rendered';
	    if ((0, _util.isMultipleOrTags)(props) && choiceTransitionName) {
	      return _react2["default"].createElement(_rcAnimate2["default"], {
	        className: className,
	        component: 'ul',
	        transitionName: choiceTransitionName
	      }, selectedValueNodes);
	    }
	    return _react2["default"].createElement('ul', { className: className }, selectedValueNodes);
	  },
	  render: function render() {
	    var _rootCls;

	    var props = this.props;
	    var multiple = (0, _util.isMultipleOrTags)(props);
	    var state = this.state;
	    var className = props.className;
	    var disabled = props.disabled;
	    var allowClear = props.allowClear;
	    var prefixCls = props.prefixCls;

	    var ctrlNode = this.renderTopControlNode();
	    var extraSelectionProps = {};
	    var open = this.state.open;

	    var options = [];
	    if (open) {
	      options = this.renderFilterOptions();
	    }
	    if (open && ((0, _util.isMultipleOrTagsOrCombobox)(props) || !props.showSearch) && !options.length) {
	      open = false;
	    }
	    if (!(0, _util.isMultipleOrTagsOrCombobox)(props)) {
	      extraSelectionProps = {
	        onKeyDown: this.onKeyDown,
	        tabIndex: 0
	      };
	    }
	    var rootCls = (_rootCls = {}, _defineProperty(_rootCls, className, !!className), _defineProperty(_rootCls, prefixCls, 1), _defineProperty(_rootCls, prefixCls + '-open', open), _defineProperty(_rootCls, prefixCls + '-focused', open || !!this._focused), _defineProperty(_rootCls, prefixCls + '-combobox', (0, _util.isCombobox)(props)), _defineProperty(_rootCls, prefixCls + '-disabled', disabled), _defineProperty(_rootCls, prefixCls + '-enabled', !disabled), _rootCls);

	    var clear = _react2["default"].createElement('span', _extends({
	      key: 'clear',
	      onMouseDown: _util.preventDefaultEvent,
	      style: _util.UNSELECTABLE_STYLE
	    }, _util.UNSELECTABLE_ATTRIBUTE, {
	      className: prefixCls + '-selection__clear',
	      onClick: this.onClearSelection
	    }));
	    return _react2["default"].createElement(_SelectTrigger2["default"], {
	      onPopupFocus: this.onPopupFocus,
	      dropdownAlign: props.dropdownAlign,
	      dropdownClassName: props.dropdownClassName,
	      dropdownMatchSelectWidth: props.dropdownMatchSelectWidth,
	      defaultActiveFirstOption: props.defaultActiveFirstOption,
	      dropdownMenuStyle: props.dropdownMenuStyle,
	      transitionName: props.transitionName,
	      animation: props.animation,
	      prefixCls: props.prefixCls,
	      dropdownStyle: props.dropdownStyle,
	      combobox: props.combobox,
	      showSearch: props.showSearch,
	      options: options,
	      multiple: multiple,
	      disabled: disabled,
	      visible: open,
	      inputValue: state.inputValue,
	      value: state.value,
	      onDropdownVisibleChange: this.onDropdownVisibleChange,
	      getPopupContainer: props.getPopupContainer,
	      onMenuSelect: this.onMenuSelect,
	      onMenuDeselect: this.onMenuDeselect,
	      ref: 'trigger'
	    }, _react2["default"].createElement('div', {
	      style: props.style,
	      ref: 'root',
	      onBlur: this.onOuterBlur,
	      onFocus: this.onOuterFocus,
	      className: (0, _classnames2["default"])(rootCls)
	    }, _react2["default"].createElement('div', _extends({
	      ref: 'selection',
	      key: 'selection',
	      className: prefixCls + '-selection\n            ' + prefixCls + '-selection--' + (multiple ? 'multiple' : 'single'),
	      role: 'combobox',
	      'aria-autocomplete': 'list',
	      'aria-haspopup': 'true',
	      'aria-expanded': open
	    }, extraSelectionProps), ctrlNode, allowClear && !multiple ? clear : null, multiple || !props.showArrow ? null : _react2["default"].createElement('span', _extends({
	      key: 'arrow',
	      className: prefixCls + '-arrow',
	      style: _util.UNSELECTABLE_STYLE
	    }, _util.UNSELECTABLE_ATTRIBUTE, {
	      onMouseDown: _util.preventDefaultEvent,
	      onClick: this.onArrowClick
	    }), _react2["default"].createElement('b', null)), multiple ? this.getSearchPlaceholderElement(!!this.state.inputValue || this.state.value.length) : null)));
	  }
	});

	exports["default"] = Select;
	module.exports = exports['default'];

/***/ },
/* 366 */
[810, 367, 368, 370, 371, 372, 373, 378, 379, 384, 385, 386],
/* 367 */
17,
/* 368 */
[811, 369],
/* 369 */
19,
/* 370 */
[812, 369],
/* 371 */
21,
/* 372 */
[813, 373],
/* 373 */
[814, 374],
/* 374 */
[815, 375, 376, 377],
/* 375 */
25,
/* 376 */
26,
/* 377 */
27,
/* 378 */
28,
/* 379 */
[816, 380],
/* 380 */
[817, 381],
/* 381 */
[818, 382, 383],
/* 382 */
32,
/* 383 */
33,
/* 384 */
34,
/* 385 */
35,
/* 386 */
36,
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var OptGroup = function (_React$Component) {
	  _inherits(OptGroup, _React$Component);

	  function OptGroup() {
	    _classCallCheck(this, OptGroup);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(OptGroup).apply(this, arguments));
	  }

	  return OptGroup;
	}(_react2["default"].Component);

	exports["default"] = OptGroup;
	module.exports = exports['default'];

/***/ },
/* 388 */
[831, 389],
/* 389 */
[832, 390, 391, 396],
/* 390 */
77,
/* 391 */
[833, 392, 396],
/* 392 */
[834, 393, 394],
/* 393 */
80,
/* 394 */
[835, 395, 395],
/* 395 */
82,
/* 396 */
83,
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.UNSELECTABLE_ATTRIBUTE = exports.UNSELECTABLE_STYLE = undefined;
	exports.getValuePropValue = getValuePropValue;
	exports.getPropValue = getPropValue;
	exports.isCombobox = isCombobox;
	exports.isMultipleOrTags = isMultipleOrTags;
	exports.isMultipleOrTagsOrCombobox = isMultipleOrTagsOrCombobox;
	exports.isSingleMode = isSingleMode;
	exports.toArray = toArray;
	exports.preventDefaultEvent = preventDefaultEvent;
	exports.findIndexInValueByKey = findIndexInValueByKey;
	exports.getSelectKeys = getSelectKeys;

	var _rcMenu = __webpack_require__(398);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function getValuePropValue(child) {
	  var props = child.props;
	  if ('value' in props) {
	    return props.value;
	  }
	  if (child.key) {
	    return child.key;
	  }
	  throw new Error('no key or value for ' + child);
	}

	function getPropValue(child, prop) {
	  if (prop === 'value') {
	    return getValuePropValue(child);
	  }
	  return child.props[prop];
	}

	function isCombobox(props) {
	  return props.combobox;
	}

	function isMultipleOrTags(props) {
	  return props.multiple || props.tags;
	}

	function isMultipleOrTagsOrCombobox(props) {
	  return isMultipleOrTags(props) || isCombobox(props);
	}

	function isSingleMode(props) {
	  return !isMultipleOrTagsOrCombobox(props);
	}

	function toArray(value) {
	  var ret = value;
	  if (value === undefined) {
	    ret = [];
	  } else if (!Array.isArray(value)) {
	    ret = [value];
	  }
	  return ret;
	}

	function preventDefaultEvent(e) {
	  e.preventDefault();
	}

	function findIndexInValueByKey(value, key) {
	  var index = -1;
	  for (var i = 0; i < value.length; i++) {
	    if (value[i].key === key) {
	      index = i;
	      break;
	    }
	  }
	  return index;
	}

	function getSelectKeys(menuItems, value) {
	  if (value === null || value === undefined) {
	    return [];
	  }
	  var selectedKeys = [];
	  _react2["default"].Children.forEach(menuItems, function (item) {
	    if (item.type === _rcMenu.ItemGroup) {
	      selectedKeys = selectedKeys.concat(getSelectKeys(item.props.children, value));
	    } else {
	      var itemValue = getValuePropValue(item);
	      var itemKey = item.key;
	      if (findIndexInValueByKey(value, itemValue) !== -1 && itemKey) {
	        selectedKeys.push(itemKey);
	      }
	    }
	  });
	  return selectedKeys;
	}

	var UNSELECTABLE_STYLE = exports.UNSELECTABLE_STYLE = {
	  userSelect: 'none',
	  WebkitUserSelect: 'none'
	};

	var UNSELECTABLE_ATTRIBUTE = exports.UNSELECTABLE_ATTRIBUTE = {
	  unselectable: 'unselectable'
		};

/***/ },
/* 398 */
[843, 399, 406, 409, 410, 411],
/* 399 */
[844, 400, 383, 404],
/* 400 */
[845, 366, 401, 383, 404, 405],
/* 401 */
[846, 402],
/* 402 */
[847, 403],
/* 403 */
/***/ function(module, exports) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var RE_NUM = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source;

	function getClientPosition(elem) {
	  var box = undefined;
	  var x = undefined;
	  var y = undefined;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  // 根据 GBS 最新数据，A-Grade Browsers 都已支持 getBoundingClientRect 方法，不用再考虑传统的实现方式
	  box = elem.getBoundingClientRect();

	  // 注：jQuery 还考虑减去 docElem.clientLeft/clientTop
	  // 但测试发现，这样反而会导致当 html 和 body 有边距/边框样式时，获取的值不正确
	  // 此外，ie6 会忽略 html 的 margin 值，幸运地是没有谁会去设置 html 的 margin

	  x = box.left;
	  y = box.top;

	  // In IE, most of the time, 2 extra pixels are added to the top and left
	  // due to the implicit 2-pixel inset border.  In IE6/7 quirks mode and
	  // IE6 standards mode, this border can be overridden by setting the
	  // document element's border to zero -- thus, we cannot rely on the
	  // offset always being 2 pixels.

	  // In quirks mode, the offset can be determined by querying the body's
	  // clientLeft/clientTop, but in standards mode, it is found by querying
	  // the document element's clientLeft/clientTop.  Since we already called
	  // getClientBoundingRect we have already forced a reflow, so it is not
	  // too expensive just to query them all.

	  // ie 下应该减去窗口的边框吧，毕竟默认 absolute 都是相对窗口定位的
	  // 窗口边框标准是设 documentElement ,quirks 时设置 body
	  // 最好禁止在 body 和 html 上边框 ，但 ie < 9 html 默认有 2px ，减去
	  // 但是非 ie 不可能设置窗口边框，body html 也不是窗口 ,ie 可以通过 html,body 设置
	  // 标准 ie 下 docElem.clientTop 就是 border-top
	  // ie7 html 即窗口边框改变不了。永远为 2
	  // 但标准 firefox/chrome/ie9 下 docElem.clientTop 是窗口边框，即使设了 border-top 也为 0

	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;

	  return {
	    left: x,
	    top: y
	  };
	}

	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}

	function getScrollLeft(w) {
	  return getScroll(w);
	}

	function getScrollTop(w) {
	  return getScroll(w, true);
	}

	function getOffset(el) {
	  var pos = getClientPosition(el);
	  var doc = el.ownerDocument;
	  var w = doc.defaultView || doc.parentWindow;
	  pos.left += getScrollLeft(w);
	  pos.top += getScrollTop(w);
	  return pos;
	}
	function _getComputedStyle(elem, name, computedStyle_) {
	  var val = '';
	  var d = elem.ownerDocument;
	  var computedStyle = computedStyle_ || d.defaultView.getComputedStyle(elem, null);

	  // https://github.com/kissyteam/kissy/issues/61
	  if (computedStyle) {
	    val = computedStyle.getPropertyValue(name) || computedStyle[name];
	  }

	  return val;
	}

	var _RE_NUM_NO_PX = new RegExp('^(' + RE_NUM + ')(?!px)[a-z%]+$', 'i');
	var RE_POS = /^(top|right|bottom|left)$/;
	var CURRENT_STYLE = 'currentStyle';
	var RUNTIME_STYLE = 'runtimeStyle';
	var LEFT = 'left';
	var PX = 'px';

	function _getComputedStyleIE(elem, name) {
	  // currentStyle maybe null
	  // http://msdn.microsoft.com/en-us/library/ms535231.aspx
	  var ret = elem[CURRENT_STYLE] && elem[CURRENT_STYLE][name];

	  // 当 width/height 设置为百分比时，通过 pixelLeft 方式转换的 width/height 值
	  // 一开始就处理了! CUSTOM_STYLE.height,CUSTOM_STYLE.width ,cssHook 解决@2011-08-19
	  // 在 ie 下不对，需要直接用 offset 方式
	  // borderWidth 等值也有问题，但考虑到 borderWidth 设为百分比的概率很小，这里就不考虑了

	  // From the awesome hack by Dean Edwards
	  // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
	  // If we're not dealing with a regular pixel number
	  // but a number that has a weird ending, we need to convert it to pixels
	  // exclude left right for relativity
	  if (_RE_NUM_NO_PX.test(ret) && !RE_POS.test(name)) {
	    // Remember the original values
	    var style = elem.style;
	    var left = style[LEFT];
	    var rsLeft = elem[RUNTIME_STYLE][LEFT];

	    // prevent flashing of content
	    elem[RUNTIME_STYLE][LEFT] = elem[CURRENT_STYLE][LEFT];

	    // Put in the new values to get a computed value out
	    style[LEFT] = name === 'fontSize' ? '1em' : ret || 0;
	    ret = style.pixelLeft + PX;

	    // Revert the changed values
	    style[LEFT] = left;

	    elem[RUNTIME_STYLE][LEFT] = rsLeft;
	  }
	  return ret === '' ? 'auto' : ret;
	}

	var getComputedStyleX = undefined;
	if (typeof window !== 'undefined') {
	  getComputedStyleX = window.getComputedStyle ? _getComputedStyle : _getComputedStyleIE;
	}

	function each(arr, fn) {
	  for (var i = 0; i < arr.length; i++) {
	    fn(arr[i]);
	  }
	}

	function isBorderBoxFn(elem) {
	  return getComputedStyleX(elem, 'boxSizing') === 'border-box';
	}

	var BOX_MODELS = ['margin', 'border', 'padding'];
	var CONTENT_INDEX = -1;
	var PADDING_INDEX = 2;
	var BORDER_INDEX = 1;
	var MARGIN_INDEX = 0;

	function swap(elem, options, callback) {
	  var old = {};
	  var style = elem.style;
	  var name = undefined;

	  // Remember the old values, and insert the new ones
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      old[name] = style[name];
	      style[name] = options[name];
	    }
	  }

	  callback.call(elem);

	  // Revert the old values
	  for (name in options) {
	    if (options.hasOwnProperty(name)) {
	      style[name] = old[name];
	    }
	  }
	}

	function getPBMWidth(elem, props, which) {
	  var value = 0;
	  var prop = undefined;
	  var j = undefined;
	  var i = undefined;
	  for (j = 0; j < props.length; j++) {
	    prop = props[j];
	    if (prop) {
	      for (i = 0; i < which.length; i++) {
	        var cssProp = undefined;
	        if (prop === 'border') {
	          cssProp = prop + which[i] + 'Width';
	        } else {
	          cssProp = prop + which[i];
	        }
	        value += parseFloat(getComputedStyleX(elem, cssProp)) || 0;
	      }
	    }
	  }
	  return value;
	}

	/**
	 * A crude way of determining if an object is a window
	 * @member util
	 */
	function isWindow(obj) {
	  // must use == for ie8
	  /* eslint eqeqeq:0 */
	  return obj != null && obj == obj.window;
	}

	var domUtils = {};

	each(['Width', 'Height'], function (name) {
	  domUtils['doc' + name] = function (refWin) {
	    var d = refWin.document;
	    return Math.max(
	    // firefox chrome documentElement.scrollHeight< body.scrollHeight
	    // ie standard mode : documentElement.scrollHeight> body.scrollHeight
	    d.documentElement['scroll' + name],
	    // quirks : documentElement.scrollHeight 最大等于可视窗口多一点？
	    d.body['scroll' + name], domUtils['viewport' + name](d));
	  };

	  domUtils['viewport' + name] = function (win) {
	    // pc browser includes scrollbar in window.innerWidth
	    var prop = 'client' + name;
	    var doc = win.document;
	    var body = doc.body;
	    var documentElement = doc.documentElement;
	    var documentElementProp = documentElement[prop];
	    // 标准模式取 documentElement
	    // backcompat 取 body
	    return doc.compatMode === 'CSS1Compat' && documentElementProp || body && body[prop] || documentElementProp;
	  };
	});

	/*
	 得到元素的大小信息
	 @param elem
	 @param name
	 @param {String} [extra]  'padding' : (css width) + padding
	 'border' : (css width) + padding + border
	 'margin' : (css width) + padding + border + margin
	 */
	function getWH(elem, name, extra) {
	  if (isWindow(elem)) {
	    return name === 'width' ? domUtils.viewportWidth(elem) : domUtils.viewportHeight(elem);
	  } else if (elem.nodeType === 9) {
	    return name === 'width' ? domUtils.docWidth(elem) : domUtils.docHeight(elem);
	  }
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
	  var borderBoxValue = name === 'width' ? elem.offsetWidth : elem.offsetHeight;
	  var computedStyle = getComputedStyleX(elem);
	  var isBorderBox = isBorderBoxFn(elem, computedStyle);
	  var cssBoxValue = 0;
	  if (borderBoxValue == null || borderBoxValue <= 0) {
	    borderBoxValue = undefined;
	    // Fall back to computed then un computed css if necessary
	    cssBoxValue = getComputedStyleX(elem, name);
	    if (cssBoxValue == null || Number(cssBoxValue) < 0) {
	      cssBoxValue = elem.style[name] || 0;
	    }
	    // Normalize '', auto, and prepare for extra
	    cssBoxValue = parseFloat(cssBoxValue) || 0;
	  }
	  if (extra === undefined) {
	    extra = isBorderBox ? BORDER_INDEX : CONTENT_INDEX;
	  }
	  var borderBoxValueOrIsBorderBox = borderBoxValue !== undefined || isBorderBox;
	  var val = borderBoxValue || cssBoxValue;
	  if (extra === CONTENT_INDEX) {
	    if (borderBoxValueOrIsBorderBox) {
	      return val - getPBMWidth(elem, ['border', 'padding'], which, computedStyle);
	    }
	    return cssBoxValue;
	  }
	  if (borderBoxValueOrIsBorderBox) {
	    var padding = extra === PADDING_INDEX ? -getPBMWidth(elem, ['border'], which, computedStyle) : getPBMWidth(elem, ['margin'], which, computedStyle);
	    return val + (extra === BORDER_INDEX ? 0 : padding);
	  }
	  return cssBoxValue + getPBMWidth(elem, BOX_MODELS.slice(extra), which, computedStyle);
	}

	var cssShow = {
	  position: 'absolute',
	  visibility: 'hidden',
	  display: 'block'
	};

	// fix #119 : https://github.com/kissyteam/kissy/issues/119
	function getWHIgnoreDisplay(elem) {
	  var val = undefined;
	  var args = arguments;
	  // in case elem is window
	  // elem.offsetWidth === undefined
	  if (elem.offsetWidth !== 0) {
	    val = getWH.apply(undefined, args);
	  } else {
	    swap(elem, cssShow, function () {
	      val = getWH.apply(undefined, args);
	    });
	  }
	  return val;
	}

	function css(el, name, v) {
	  var value = v;
	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	    for (var i in name) {
	      if (name.hasOwnProperty(i)) {
	        css(el, i, name[i]);
	      }
	    }
	    return undefined;
	  }
	  if (typeof value !== 'undefined') {
	    if (typeof value === 'number') {
	      value += 'px';
	    }
	    el.style[name] = value;
	    return undefined;
	  }
	  return getComputedStyleX(el, name);
	}

	each(['width', 'height'], function (name) {
	  var first = name.charAt(0).toUpperCase() + name.slice(1);
	  domUtils['outer' + first] = function (el, includeMargin) {
	    return el && getWHIgnoreDisplay(el, name, includeMargin ? MARGIN_INDEX : BORDER_INDEX);
	  };
	  var which = name === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];

	  domUtils[name] = function (elem, val) {
	    if (val !== undefined) {
	      if (elem) {
	        var computedStyle = getComputedStyleX(elem);
	        var isBorderBox = isBorderBoxFn(elem);
	        if (isBorderBox) {
	          val += getPBMWidth(elem, ['padding', 'border'], which, computedStyle);
	        }
	        return css(elem, name, val);
	      }
	      return undefined;
	    }
	    return elem && getWHIgnoreDisplay(elem, name, CONTENT_INDEX);
	  };
	});

	// 设置 elem 相对 elem.ownerDocument 的坐标
	function setOffset(elem, offset) {
	  // set position first, in-case top/left are set even on static elem
	  if (css(elem, 'position') === 'static') {
	    elem.style.position = 'relative';
	  }

	  var old = getOffset(elem);
	  var ret = {};
	  var current = undefined;
	  var key = undefined;

	  for (key in offset) {
	    if (offset.hasOwnProperty(key)) {
	      current = parseFloat(css(elem, key)) || 0;
	      ret[key] = current + offset[key] - old[key];
	    }
	  }
	  css(elem, ret);
	}

	module.exports = _extends({
	  getWindow: function getWindow(node) {
	    var doc = node.ownerDocument || node;
	    return doc.defaultView || doc.parentWindow;
	  },
	  offset: function offset(el, value) {
	    if (typeof value !== 'undefined') {
	      setOffset(el, value);
	    } else {
	      return getOffset(el);
	    }
	  },

	  isWindow: isWindow,
	  each: each,
	  css: css,
	  clone: function clone(obj) {
	    var ret = {};
	    for (var i in obj) {
	      if (obj.hasOwnProperty(i)) {
	        ret[i] = obj[i];
	      }
	    }
	    var overflow = obj.overflow;
	    if (overflow) {
	      for (var i in obj) {
	        if (obj.hasOwnProperty(i)) {
	          ret.overflow[i] = obj.overflow[i];
	        }
	      }
	    }
	    return ret;
	  },
	  scrollLeft: function scrollLeft(w, v) {
	    if (isWindow(w)) {
	      if (v === undefined) {
	        return getScrollLeft(w);
	      }
	      window.scrollTo(v, getScrollTop(w));
	    } else {
	      if (v === undefined) {
	        return w.scrollLeft;
	      }
	      w.scrollLeft = v;
	    }
	  },
	  scrollTop: function scrollTop(w, v) {
	    if (isWindow(w)) {
	      if (v === undefined) {
	        return getScrollTop(w);
	      }
	      window.scrollTo(getScrollLeft(w), v);
	    } else {
	      if (v === undefined) {
	        return w.scrollTop;
	      }
	      w.scrollTop = v;
	    }
	  },

	  viewportWidth: 0,
	  viewportHeight: 0
		}, domUtils);

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.noop = noop;
	exports.getKeyFromChildrenIndex = getKeyFromChildrenIndex;
	exports.loopMenuItem = loopMenuItem;

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var now = Date.now();

	function noop() {}

	function getKeyFromChildrenIndex(child, menuEventKey, index) {
	  var prefix = menuEventKey || '';
	  return child.key || prefix + 'item_' + now + '_' + index;
	}

	function loopMenuItem(children, cb) {
	  var index = -1;
	  _react2['default'].Children.forEach(children, function (c) {
	    index++;
	    if (c && c.type.isMenuItemGroup) {
	      _react2['default'].Children.forEach(c.props.children, function (c2) {
	        index++;
	        cb(c2, index);
	      });
	    } else {
	      cb(c, index);
	    }
	  });
		}

/***/ },
/* 405 */
[848, 383],
/* 406 */
[849, 407, 366, 383, 408],
/* 407 */
[850, 400, 383, 404, 388],
/* 408 */
[851, 366],
/* 409 */
[852, 366],
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var MenuItemGroup = _react2['default'].createClass({
	  displayName: 'MenuItemGroup',

	  propTypes: {
	    renderMenuItem: _react.PropTypes.func,
	    index: _react.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      disabled: true
	    };
	  },

	  renderInnerMenuItem: function renderInnerMenuItem(item, subIndex) {
	    var renderMenuItem = this.props.renderMenuItem;
	    return renderMenuItem(item, this.props.index, subIndex);
	  },

	  render: function render() {
	    var props = this.props;
	    var className = props.className || '';
	    var rootPrefixCls = props.rootPrefixCls;

	    className += ' ' + rootPrefixCls + '-item-group';
	    var titleClassName = rootPrefixCls + '-item-group-title';
	    var listClassName = rootPrefixCls + '-item-group-list';
	    return _react2['default'].createElement('li', { className: className }, _react2['default'].createElement('div', { className: titleClassName }, props.title), _react2['default'].createElement('ul', { className: listClassName }, _react2['default'].Children.map(props.children, this.renderInnerMenuItem)));
	  }
	});

	MenuItemGroup.isMenuItemGroup = true;

	exports['default'] = MenuItemGroup;
	module.exports = exports['default'];

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var Divider = _react2['default'].createClass({
	  displayName: 'Divider',

	  getDefaultProps: function getDefaultProps() {
	    return {
	      disabled: true
	    };
	  },

	  render: function render() {
	    var props = this.props;
	    var className = props.className || '';
	    var rootPrefixCls = props.rootPrefixCls;
	    className += ' ' + (rootPrefixCls + '-item-divider');
	    return _react2['default'].createElement('li', _extends({}, props, { className: className }));
	  }
	});

	exports['default'] = Divider;
	module.exports = exports['default'];

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _rcTrigger = __webpack_require__(413);

	var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _DropdownMenu = __webpack_require__(430);

	var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}

	var BUILT_IN_PLACEMENTS = {
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    offset: [0, 4],
	    overflow: {
	      adjustX: 0,
	      adjustY: 1
	    }
	  },
	  topLeft: {
	    points: ['bl', 'tl'],
	    offset: [0, -4],
	    overflow: {
	      adjustX: 0,
	      adjustY: 1
	    }
	  }
	};

	var SelectTrigger = _react2["default"].createClass({
	  displayName: 'SelectTrigger',

	  propTypes: {
	    onPopupFocus: _react.PropTypes.func,
	    dropdownMatchSelectWidth: _react.PropTypes.bool,
	    dropdownAlign: _react.PropTypes.object,
	    visible: _react.PropTypes.bool,
	    multiple: _react.PropTypes.bool,
	    inputValue: _react.PropTypes.string,
	    filterOption: _react.PropTypes.any,
	    options: _react.PropTypes.any,
	    prefixCls: _react.PropTypes.string,
	    popupClassName: _react.PropTypes.string,
	    children: _react.PropTypes.any
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    var _props = this.props;
	    var visible = _props.visible;
	    var dropdownMatchSelectWidth = _props.dropdownMatchSelectWidth;

	    if (visible) {
	      var dropdownDOMNode = this.getPopupDOMNode();
	      if (dropdownDOMNode) {
	        var widthProp = dropdownMatchSelectWidth ? 'width' : 'minWidth';
	        dropdownDOMNode.style[widthProp] = _reactDom2["default"].findDOMNode(this).offsetWidth + 'px';
	      }
	    }
	  },
	  getInnerMenu: function getInnerMenu() {
	    return this.popupMenu && this.popupMenu.refs.menu;
	  },
	  getPopupDOMNode: function getPopupDOMNode() {
	    return this.refs.trigger.getPopupDomNode();
	  },
	  getDropdownElement: function getDropdownElement(newProps) {
	    var props = this.props;
	    return _react2["default"].createElement(_DropdownMenu2["default"], _extends({
	      ref: this.saveMenu
	    }, newProps, {
	      prefixCls: this.getDropdownPrefixCls(),
	      onMenuSelect: props.onMenuSelect,
	      onMenuDeselect: props.onMenuDeselect,
	      value: props.value,
	      defaultActiveFirstOption: props.defaultActiveFirstOption,
	      dropdownMenuStyle: props.dropdownMenuStyle
	    }));
	  },
	  getDropdownTransitionName: function getDropdownTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = this.getDropdownPrefixCls() + '-' + props.animation;
	    }
	    return transitionName;
	  },
	  getDropdownPrefixCls: function getDropdownPrefixCls() {
	    return this.props.prefixCls + '-dropdown';
	  },
	  saveMenu: function saveMenu(menu) {
	    this.popupMenu = menu;
	  },
	  render: function render() {
	    var _popupClassName;

	    var _props2 = this.props;
	    var onPopupFocus = _props2.onPopupFocus;

	    var props = _objectWithoutProperties(_props2, ['onPopupFocus']);

	    var multiple = props.multiple;
	    var visible = props.visible;
	    var inputValue = props.inputValue;
	    var dropdownAlign = props.dropdownAlign;

	    var dropdownPrefixCls = this.getDropdownPrefixCls();
	    var popupClassName = (_popupClassName = {}, _defineProperty(_popupClassName, props.dropdownClassName, !!props.dropdownClassName), _defineProperty(_popupClassName, dropdownPrefixCls + '--' + (multiple ? 'multiple' : 'single'), 1), _popupClassName);
	    var popupElement = this.getDropdownElement({
	      menuItems: props.options,
	      onPopupFocus: onPopupFocus,
	      multiple: multiple,
	      inputValue: inputValue,
	      visible: visible
	    });
	    return _react2["default"].createElement(_rcTrigger2["default"], _extends({}, props, {
	      showAction: props.disabled ? [] : ['click'],
	      hideAction: props.disabled ? [] : ['blur'],
	      ref: 'trigger',
	      popupPlacement: 'bottomLeft',
	      builtinPlacements: BUILT_IN_PLACEMENTS,
	      prefixCls: dropdownPrefixCls,
	      popupTransitionName: this.getDropdownTransitionName(),
	      onPopupVisibleChange: props.onDropdownVisibleChange,
	      popup: popupElement,
	      popupAlign: dropdownAlign,
	      popupVisible: visible,
	      getPopupContainer: props.getPopupContainer,
	      popupClassName: (0, _classnames2["default"])(popupClassName),
	      popupStyle: props.dropdownStyle
	    }), props.children);
	  }
	});

	exports["default"] = SelectTrigger;
	module.exports = exports['default'];

/***/ },
/* 413 */
[820, 414],
/* 414 */
[821, 366, 415, 429],
/* 415 */
[822, 416, 388, 427, 428],
/* 416 */
[823, 417],
/* 417 */
[824, 418, 366, 426],
/* 418 */
[825, 419, 420, 421, 422, 423, 424],
/* 419 */
67,
/* 420 */
[826, 419],
/* 421 */
[827, 419, 420],
/* 422 */
[828, 419],
/* 423 */
[829, 419],
/* 424 */
[830, 425],
/* 425 */
73,
/* 426 */
74,
/* 427 */
[836, 428],
/* 428 */
85,
/* 429 */
86,
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _util = __webpack_require__(397);

	var _rcMenu = __webpack_require__(398);

	var _rcMenu2 = _interopRequireDefault(_rcMenu);

	var _domScrollIntoView = __webpack_require__(401);

	var _domScrollIntoView2 = _interopRequireDefault(_domScrollIntoView);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	var DropdownMenu = _react2["default"].createClass({
	  displayName: 'DropdownMenu',

	  propTypes: {
	    defaultActiveFirstOption: _react.PropTypes.bool,
	    value: _react.PropTypes.any,
	    dropdownMenuStyle: _react.PropTypes.object,
	    multiple: _react.PropTypes.bool,
	    onPopupFocus: _react.PropTypes.func,
	    onMenuDeSelect: _react.PropTypes.func,
	    onMenuSelect: _react.PropTypes.func,
	    prefixCls: _react.PropTypes.string,
	    menuItems: _react.PropTypes.any,
	    inputValue: _react.PropTypes.string,
	    visible: _react.PropTypes.bool
	  },

	  componentWillMount: function componentWillMount() {
	    this.lastInputValue = this.props.inputValue;
	  },
	  componentDidMount: function componentDidMount() {
	    this.scrollActiveItemToView();
	    this.lastVisible = this.props.visible;
	  },
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    if (!nextProps.visible) {
	      this.lastVisible = false;
	    }
	    // freeze when hide
	    return nextProps.visible;
	  },
	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var props = this.props;
	    if (!prevProps.visible && props.visible) {
	      this.scrollActiveItemToView();
	    }
	    this.lastVisible = props.visible;
	    this.lastInputValue = props.inputValue;
	  },
	  scrollActiveItemToView: function scrollActiveItemToView() {
	    // scroll into view
	    var itemComponent = (0, _reactDom.findDOMNode)(this.firstActiveItem);
	    if (itemComponent) {
	      (0, _domScrollIntoView2["default"])(itemComponent, (0, _reactDom.findDOMNode)(this.refs.menu), {
	        onlyScrollIfNeeded: true
	      });
	    }
	  },
	  renderMenu: function renderMenu() {
	    var _this = this;

	    var props = this.props;
	    var menuItems = props.menuItems;
	    var defaultActiveFirstOption = props.defaultActiveFirstOption;
	    var value = props.value;
	    var prefixCls = props.prefixCls;
	    var multiple = props.multiple;
	    var onMenuSelect = props.onMenuSelect;
	    var inputValue = props.inputValue;

	    if (menuItems && menuItems.length) {
	      var _ret = function () {
	        var menuProps = {};
	        if (multiple) {
	          menuProps.onDeselect = props.onMenuDeselect;
	          menuProps.onSelect = onMenuSelect;
	        } else {
	          menuProps.onClick = onMenuSelect;
	        }

	        var selectedKeys = (0, _util.getSelectKeys)(menuItems, value);
	        var activeKeyProps = {};

	        var clonedMenuItems = menuItems;
	        if (selectedKeys.length) {
	          (function () {
	            if (props.visible && !_this.lastVisible) {
	              activeKeyProps.activeKey = selectedKeys[0];
	            }
	            var foundFirst = false;
	            // set firstActiveItem via cloning menus
	            // for scroll into view
	            var clone = function clone(item) {
	              if (!foundFirst && selectedKeys.indexOf(item.key) !== -1) {
	                foundFirst = true;
	                return (0, _react.cloneElement)(item, {
	                  ref: function ref(_ref) {
	                    _this.firstActiveItem = _ref;
	                  }
	                });
	              }
	              return item;
	            };

	            clonedMenuItems = menuItems.map(function (item) {
	              if (item.type === _rcMenu.ItemGroup) {
	                var children = item.props.children.map(clone);
	                return (0, _react.cloneElement)(item, {}, children);
	              }
	              return clone(item);
	            });
	          })();
	        }

	        // clear activeKey when inputValue change
	        if (inputValue !== _this.lastInputValue) {
	          activeKeyProps.activeKey = '';
	        }

	        return {
	          v: _react2["default"].createElement(_rcMenu2["default"], _extends({
	            ref: 'menu',
	            style: _this.props.dropdownMenuStyle,
	            defaultActiveFirst: defaultActiveFirstOption
	          }, activeKeyProps, {
	            multiple: multiple,
	            focusable: false
	          }, menuProps, {
	            selectedKeys: selectedKeys,
	            prefixCls: prefixCls + '-menu'
	          }), clonedMenuItems)
	        };
	      }();

	      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	    }
	    return null;
	  },
	  render: function render() {
	    return _react2["default"].createElement('div', {
	      style: { overflow: 'auto' },
	      onFocus: this.props.onPopupFocus,
	      onMouseDown: _util.preventDefaultEvent
	    }, this.renderMenu());
	  }
	});

	exports["default"] = DropdownMenu;
	module.exports = exports['default'];

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _OptGroup = __webpack_require__(387);

	var _OptGroup2 = _interopRequireDefault(_OptGroup);

	var _util = __webpack_require__(397);

	var _rcMenu = __webpack_require__(398);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	exports["default"] = {
	  filterOption: function filterOption(input, child) {
	    if (!input) {
	      return true;
	    }
	    var filterOption = this.props.filterOption;
	    if (!filterOption) {
	      return true;
	    }
	    if (child.props.disabled) {
	      return false;
	    }
	    return filterOption.call(this, input, child);
	  },
	  renderFilterOptions: function renderFilterOptions(inputValue) {
	    return this.renderFilterOptionsFromChildren(this.props.children, true, inputValue);
	  },
	  renderFilterOptionsFromChildren: function renderFilterOptionsFromChildren(children, showNotFound, iv) {
	    var _this = this;

	    var sel = [];
	    var props = this.props;
	    var inputValue = iv === undefined ? this.state.inputValue : iv;
	    var childrenKeys = [];
	    var tags = props.tags;
	    _react2["default"].Children.forEach(children, function (child) {
	      if (child.type === _OptGroup2["default"]) {
	        var innerItems = _this.renderFilterOptionsFromChildren(child.props.children, false);
	        if (innerItems.length) {
	          var label = child.props.label;
	          var key = child.key;
	          if (!key && typeof label === 'string') {
	            key = label;
	          } else if (!label && key) {
	            label = key;
	          }
	          sel.push(_react2["default"].createElement(_rcMenu.ItemGroup, { key: key, title: label }, innerItems));
	        }
	        return;
	      }
	      var childValue = (0, _util.getValuePropValue)(child);
	      if (_this.filterOption(inputValue, child)) {
	        sel.push(_react2["default"].createElement(_rcMenu.Item, _extends({
	          style: _util.UNSELECTABLE_STYLE,
	          attribute: _util.UNSELECTABLE_ATTRIBUTE,
	          value: childValue,
	          key: childValue
	        }, child.props)));
	      }
	      if (tags && !child.props.disabled) {
	        childrenKeys.push(childValue);
	      }
	    });
	    if (tags) {
	      // tags value must be string
	      var value = this.state.value || [];
	      value = value.filter(function (singleValue) {
	        return childrenKeys.indexOf(singleValue.key) === -1 && (!inputValue || String(singleValue.key).indexOf(String(inputValue)) > -1);
	      });
	      sel = sel.concat(value.map(function (singleValue) {
	        var key = singleValue.key;
	        return _react2["default"].createElement(_rcMenu.Item, {
	          style: _util.UNSELECTABLE_STYLE,
	          attribute: _util.UNSELECTABLE_ATTRIBUTE,
	          value: key,
	          key: key
	        }, key);
	      }));
	      if (inputValue) {
	        var notFindInputItem = sel.every(function (option) {
	          return (0, _util.getValuePropValue)(option) !== inputValue;
	        });
	        if (notFindInputItem) {
	          sel.unshift(_react2["default"].createElement(_rcMenu.Item, {
	            style: _util.UNSELECTABLE_STYLE,
	            attribute: _util.UNSELECTABLE_ATTRIBUTE,
	            value: inputValue,
	            key: inputValue
	          }, inputValue));
	        }
	      }
	    }
	    if (!sel.length && showNotFound && props.notFoundContent) {
	      sel = [_react2["default"].createElement(_rcMenu.Item, {
	        style: _util.UNSELECTABLE_STYLE,
	        attribute: _util.UNSELECTABLE_ATTRIBUTE,
	        disabled: true,
	        value: 'NOT_FOUND',
	        key: 'NOT_FOUND'
	      }, props.notFoundContent)];
	    }
	    return sel;
	  }
	};
		module.exports = exports['default'];

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Option = function (_React$Component) {
	  _inherits(Option, _React$Component);

	  function Option() {
	    _classCallCheck(this, Option);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Option).apply(this, arguments));
	  }

	  return Option;
	}(_react2["default"].Component);

	exports["default"] = Option;
	module.exports = exports['default'];

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var InputFormField = __webpack_require__(351);
	var Formatter = __webpack_require__(155);
	var assign = __webpack_require__(334);

	var NumberInputFormField = function (_InputFormField) {
	    _inherits(NumberInputFormField, _InputFormField);

	    function NumberInputFormField(props) {
	        _classCallCheck(this, NumberInputFormField);

	        return _possibleConstructorReturn(this, _InputFormField.call(this, props));
	    }

	    NumberInputFormField.prototype.formatValue = function formatValue(value) {
	        if (value === undefined || value === null) return "";
	        var me = this;
	        value = value + "";
	        if (me.props.jsxtype == "money") {
	            if (value.match(/\.(\d+)/) && value.match(/\.(\d+)/)[1].length > me.props.fixedNum) {
	                return Formatter.money(value, me.props.delimiter, me.props.fixedNum);
	            } else {
	                return Formatter.money(value, me.props.delimiter);
	            }
	        } else if (me.props.jsxtype == "cnmobile") {
	            return Formatter.cnmobile(value, me.props.delimiter);
	        } else if (me.props.jsxtype == "card") {
	            return Formatter.card(value, me.props.delimiter);
	        } else {
	            return value;
	        }
	    };

	    NumberInputFormField.prototype.deFormatValue = function deFormatValue(value) {
	        var me = this;
	        if (me.props.jsxtype == "money" || me.props.jsxtype == "cnmobile" || me.props.jsxtype == "card") {
	            return value.split(me.props.delimiter).join("");
	        } else {
	            return value;
	        }
	    };

	    NumberInputFormField.prototype.addSpecificClass = function addSpecificClass() {
	        var me = this;
	        if (me.props.jsxprefixCls == "kuma-uxform-field") {
	            return me.props.jsxprefixCls + " kuma-number-input-uxform-field";
	        } else {
	            return me.props.jsxprefixCls;
	        }
	    };

	    return NumberInputFormField;
	}(InputFormField);

	NumberInputFormField.displayName = "NumberInputFormField";
	NumberInputFormField.propTypes = assign({}, InputFormField.propTypes, {
	    jsxtype: React.PropTypes.string,
	    delimiter: React.PropTypes.string,
	    fixedNum: React.PropTypes.number
	});
	NumberInputFormField.defaultProps = assign({}, InputFormField.defaultProps, {
	    jsxtype: '',
	    delimiter: ' '
	});

		module.exports = NumberInputFormField;

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];for (var key in source) {
	            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }return target;
	};

	function _objectWithoutProperties(obj, keys) {
	    var target = {};for (var i in obj) {
	        if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	    }return target;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var FormField = __webpack_require__(333);
	var Constants = __webpack_require__(223);
	var classnames = __webpack_require__(5);
	var Calendar = __webpack_require__(9);
	var assign = __webpack_require__(334);
	var update = React.addons.update;
	var deepcopy = __webpack_require__(342);

	var DateFormField = function (_FormField) {
	    _inherits(DateFormField, _FormField);

	    function DateFormField(props) {
	        _classCallCheck(this, DateFormField);

	        return _possibleConstructorReturn(this, _FormField.call(this, props));
	    }

	    DateFormField.prototype.handleChange = function handleChange(value) {
	        var me = this;
	        me.handleDataChange(new Date(value).toJSON());
	    };

	    DateFormField.prototype.handleCascadeChange = function handleCascadeChange(i, value) {
	        var me = this;
	        var values = deepcopy(me.state.value) || [];
	        values[i] = new Date(value).toJSON();
	        if (i == 0 && !!values[1] && new Date(value).getTime() > new Date(values[1]).getTime()) {
	            values.pop();
	        }
	        if (i == 1 && !!values[0] && new Date(value).getTime() < new Date(values[0]).getTime()) {
	            values[0] = undefined;
	        }
	        me.handleDataChange(values);
	    };

	    DateFormField.prototype.addSpecificClass = function addSpecificClass() {
	        var me = this;
	        if (me.props.jsxprefixCls == "kuma-uxform-field") {
	            var str = me.props.jsxprefixCls + " kuma-date-uxform-field";
	            if (me.props.jsxtype == "cascade") {
	                str += " kuma-cascade-date-uxform-field";
	            }
	            return str;
	        } else {
	            return me.props.jsxprefixCls;
	        }
	    };

	    DateFormField.prototype.renderField = function renderField() {
	        var me = this;
	        var _me$props = me.props;
	        var onSelect = _me$props.onSelect;
	        var style = _me$props.style;
	        var prefixCls = _me$props.prefixCls;
	        var value = _me$props.value;
	        var jsxtype = _me$props.jsxtype;
	        var jsxfrom = _me$props.jsxfrom;
	        var jsxto = _me$props.jsxto;
	        var disabledDate = _me$props.disabledDate;

	        var others = _objectWithoutProperties(_me$props, ['onSelect', 'style', 'prefixCls', 'value', 'jsxtype', 'jsxfrom', 'jsxto', 'disabledDate']);

	        var from = !!jsxfrom ? new Date(jsxfrom).getTime() : 0;
	        var to = !!jsxto ? new Date(jsxto).getTime() : Infinity;
	        var mode = me.props.jsxmode || me.props.mode;
	        if (mode == Constants.MODE.EDIT) {
	            if (jsxtype == "single") {
	                return React.createElement(Calendar, _extends({
	                    value: me.state.value,
	                    onSelect: me.handleChange.bind(me),
	                    disabledDate: function disabledDate(current, value) {
	                        return current.getTime() < from || current.getTime() > to;
	                    }
	                }, others));
	            } else if (jsxtype == "cascade") {
	                var arr = [];
	                var others1 = assign({}, others);
	                var others2 = assign({}, others);
	                if (me.state.value && me.state.value[0]) {
	                    others1 = assign({}, others, {
	                        value: me.state.value[0]
	                    });
	                } else {
	                    others1 = assign({}, others, {
	                        value: null
	                    });
	                }
	                if (me.state.value && me.state.value[1]) {
	                    others2 = assign({}, others, {
	                        value: me.state.value[1]
	                    });
	                } else {
	                    others2 = assign({}, others, {
	                        value: null
	                    });
	                }
	                arr.push(React.createElement(Calendar, _extends({
	                    key: 'calendar1',
	                    onSelect: me.handleCascadeChange.bind(me, 0),
	                    disabledDate: function disabledDate(current, value) {
	                        return current.getTime() < from || current.getTime() > to;
	                    }
	                }, others1)));
	                arr.push(React.createElement('span', { key: 'split', className: 'kuma-uxform-split' }, '-'));

	                arr.push(React.createElement(Calendar, _extends({
	                    key: 'calendar2',
	                    onSelect: me.handleCascadeChange.bind(me, 1),
	                    disabledDate: function disabledDate(current, value) {
	                        var now = current.getTime();
	                        var first = me.state.value ? me.state.value[0] : 0;
	                        first = new Date(first).getTime();
	                        return now < from || now > to || now < first;
	                    }
	                }, others2)));
	                return arr;
	            }
	        } else if (mode == Constants.MODE.VIEW) {
	            if (jsxtype == "single") {
	                return React.createElement('span', null, me.state.value);
	            } else {
	                return React.createElement('span', null, !!me.state.value ? me.state.value.join(" - ") : "");
	            }
	        }
	    };

	    return DateFormField;
	}(FormField);

	DateFormField.displayName = "DateFormField";
	DateFormField.propTypes = assign(FormField.propTypes, {
	    jsxtype: React.PropTypes.string
	});
	DateFormField.defaultProps = assign(FormField.defaultProps, {
	    locale: 'zh-cn',
	    hasTrigger: true,
	    jsxtype: "single"
	});
		module.exports = DateFormField;

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var FormField = __webpack_require__(333);
	var Constants = __webpack_require__(223);
	var CheckboxGroup = __webpack_require__(216);
	var Item = CheckboxGroup.Item;

	var CheckboxGroupFormField = function (_FormField) {
	    _inherits(CheckboxGroupFormField, _FormField);

	    function CheckboxGroupFormField(props) {
	        _classCallCheck(this, CheckboxGroupFormField);

	        return _possibleConstructorReturn(this, _FormField.call(this, props));
	    }

	    CheckboxGroupFormField.prototype.handleChange = function handleChange(value) {
	        var me = this;
	        me.handleDataChange(value);
	    };

	    CheckboxGroupFormField.prototype.addSpecificClass = function addSpecificClass() {
	        var me = this;
	        if (me.props.jsxprefixCls == "kuma-uxform-field") {
	            return me.props.jsxprefixCls + " kuma-checkbox-group-uxform-field";
	        } else {
	            return me.props.jsxprefixCls;
	        }
	    };

	    CheckboxGroupFormField.prototype.renderField = function renderField() {
	        var me = this;
	        var mode = me.props.jsxmode || me.props.mode;
	        if (mode == Constants.MODE.EDIT) {
	            return React.createElement(CheckboxGroup, { disabled: !!me.props.jsxdisabled, onChange: me.handleChange.bind(me), value: me.state.value || [] }, me.props.children);
	        } else {
	            if (me.state.value instanceof Array) {
	                var textArr = me.props.children.filter(function (child, index) {
	                    return me.state.value.indexOf(child.props.value) != -1;
	                }).map(function (item, index) {
	                    return item.props.text;
	                });
	                return React.createElement("span", null, textArr.join(" "));
	            }
	        }
	    };

	    return CheckboxGroupFormField;
	}(FormField);

	CheckboxGroupFormField.Item = Item;
	CheckboxGroupFormField.propTypes = FormField.propTypes;
	CheckboxGroupFormField.defaultProps = FormField.defaultProps;
	CheckboxGroupFormField.displayName = "CheckboxGroupFormField";

	module.exports = CheckboxGroupFormField;

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];for (var key in source) {
	            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }return target;
	};

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var FormField = __webpack_require__(333);
	var Constants = __webpack_require__(223);
	var Select = __webpack_require__(362);
	var Option = Select.Option;

	var assign = __webpack_require__(334);
	var update = React.addons.update;

	var CascadeSelectFormField = function (_FormField) {
	    _inherits(CascadeSelectFormField, _FormField);

	    function CascadeSelectFormField(props) {
	        _classCallCheck(this, CascadeSelectFormField);

	        return _possibleConstructorReturn(this, _FormField.call(this, props));
	    }

	    CascadeSelectFormField.prototype.getDataLength = function getDataLength() {
	        var me = this;
	        return me.props.jsxdata.length;
	    };

	    CascadeSelectFormField.prototype.handleChange = function handleChange(i, value) {
	        var me = this;
	        var values = update(me.state.value, {}) || [];
	        if (!!values[i]) {
	            values = values.slice(0, i);
	            values.push(value);
	        } else {
	            values[i] = value;
	        }
	        me.handleDataChange(values);
	    };

	    CascadeSelectFormField.prototype.addSpecificClass = function addSpecificClass() {
	        var me = this;
	        if (me.props.jsxprefixCls == "kuma-uxform-field") {
	            return me.props.jsxprefixCls + " kuma-cascade-select-uxform-field";
	        } else {
	            return me.props.jsxprefixCls;
	        }
	    };

	    CascadeSelectFormField.prototype.renderField = function renderField() {
	        var me = this;
	        var length = me.getDataLength();
	        var arr = [];
	        var data = {};
	        var mode = me.props.jsxmode || me.props.mode;
	        if (mode == Constants.MODE.EDIT) {
	            var _ret = function () {
	                try {
	                    data = me.props.jsxdata.contents;
	                } catch (e) {
	                    console.warn(e.message);
	                    return {
	                        v: void 0
	                    };
	                }

	                /*
	                 * 如果 value 存在相应的值，则填充下一级的选择，
	                 * 如果 value 不存在，则填充空数组，
	                 * 如果 data 中不包含 contents，则证明级联选择生成已结束，则跳出循环
	                 */
	                var stateValue = me.state.value || []; // 预防 value 是 undefined 的情况

	                var _loop = function _loop(i) {
	                    var options = data.map(function (item, index) {
	                        return React.createElement(Option, { key: index, value: item.value }, item.text);
	                    });

	                    var selectOptions = {
	                        ref: "el",
	                        key: "select",
	                        optionLabelProp: "children",
	                        style: me.props.jsxstyle,
	                        showSearch: me.props.jsxshowSearch,
	                        placeholder: me.props.jsxplaceholder
	                    };
	                    selectOptions.onChange = me.handleChange.bind(me, i);
	                    selectOptions.value = stateValue[i] || null;
	                    if (i != 0) {
	                        arr.push(React.createElement('span', { key: "split" + i, className: 'kuma-uxform-split' }, '-'));
	                    }
	                    arr.push(React.createElement(Select, _extends({}, selectOptions, { key: i }), options));
	                    if (!!stateValue[i]) {
	                        data = data.filter(function (item) {
	                            return item.value == stateValue[i];
	                        })[0];
	                        data = data.contents;
	                        if (!data) return 'break';
	                    } else {
	                        data = [];
	                    }
	                };

	                for (var i = 0; i < length; i++) {
	                    var _ret2 = _loop(i);

	                    if (_ret2 === 'break') break;
	                }
	            }();

	            if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	        } else if (mode == Constants.MODE.VIEW) {
	            if (me.state.value instanceof Array) {
	                (function () {
	                    var data = me.props.jsxdata;
	                    var textArr = me.state.value.map(function (item, index) {
	                        data = data.contents.filter(function (ele, i) {
	                            return ele.value == item;
	                        })[0];
	                        return data.text;
	                    });
	                    arr.push(React.createElement('span', { key: 'cascade' }, textArr.join(" ")));
	                })();
	            }
	        }

	        return arr;
	    };

	    return CascadeSelectFormField;
	}(FormField);

	CascadeSelectFormField.propTypes = assign({}, FormField.propTypes, {
	    jsxstyle: React.PropTypes.object,
	    jsxshowSearch: React.PropTypes.bool,
	    jsxplaceholder: React.PropTypes.string,
	    jsxdata: React.PropTypes.object
	});
	CascadeSelectFormField.defaultProps = assign({}, FormField.defaultProps, {
	    jsxshowSearch: false,
	    jsxplaceholder: "请下拉选择"
	});
	CascadeSelectFormField.displayName = "CascadeSelectFormField";

	module.exports = CascadeSelectFormField;

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(334);

	var OtherFormField = function (_React$Component) {
	    _inherits(OtherFormField, _React$Component);

	    function OtherFormField(props) {
	        _classCallCheck(this, OtherFormField);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    OtherFormField.prototype.render = function render() {
	        var _classnames;

	        var me = this;
	        return React.createElement('div', { className: classnames((_classnames = {}, _classnames[me.props.jsxprefixCls] = true, _classnames[me.props.className] = !!me.props.className, _classnames)), style: assign({}, me.props.style, {
	                display: me.props.jsxshow ? "table" : "none"
	            }) }, me.props.children);
	    };

	    return OtherFormField;
	}(React.Component);

	OtherFormField.defaultProps = {
	    jsxprefixCls: "kuma-uxform-field kuma-other-uxform-field", // 默认类名
	    jsxflex: 1, // 占 Form 的比例，类似于 css3 中的 flex-box
	    jsxshow: true
	};

	OtherFormField.propTypes = {
	    jsxprefixCls: React.PropTypes.string,
	    jsxflex: React.PropTypes.number,
	    jsxshow: React.PropTypes.bool
	};

	OtherFormField.displayName = "OtherFormField";

	module.exports = OtherFormField;

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(334);

	var ButtonGroupFormField = function (_React$Component) {
	    _inherits(ButtonGroupFormField, _React$Component);

	    function ButtonGroupFormField(props) {
	        _classCallCheck(this, ButtonGroupFormField);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    ButtonGroupFormField.prototype._processChild = function _processChild() {
	        var me = this;
	        var length = React.Children.count(me.props.children);
	        if (!length) {
	            return false;
	        }
	        var elements = React.Children.map(me.props.children, function (child, index) {
	            var props = {};
	            if (child.props.action == "submit") {
	                props.onClick = function () {
	                    var data = me.props.getValues();
	                    child.props.onClick(data);
	                };
	            }
	            if (child.props.action == "reset") {
	                props.onClick = function () {
	                    console.log("reset");
	                    me.props.resetValues();
	                };
	            }
	            return React.cloneElement(child, props);
	        });

	        return elements;
	    };

	    ButtonGroupFormField.prototype.render = function render() {
	        var _classnames;

	        var me = this;
	        var elements = me._processChild();
	        return React.createElement('div', { className: classnames((_classnames = {}, _classnames[me.props.jsxprefixCls] = true, _classnames[me.props.className] = !!me.props.className, _classnames)), style: assign({}, me.props.style, {
	                display: me.props.jsxshow ? "table" : "none"
	            }) }, !!elements && elements);
	    };

	    return ButtonGroupFormField;
	}(React.Component);

	ButtonGroupFormField.propTypes = {
	    jsxprefixCls: React.PropTypes.string,
	    jsxflex: React.PropTypes.number,
	    jsxshow: React.PropTypes.bool
	};
	ButtonGroupFormField.defaultProps = {
	    jsxprefixCls: "kuma-uxform-field kuma-button-group-uxform-field", // 默认类名
	    jsxflex: 1, // 占 Form 的比例，类似于 css3 中的 flex-box
	    jsxshow: true
	};
	ButtonGroupFormField.displayName = "ButtonGroupFormField";

	module.exports = ButtonGroupFormField;

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var FormField = __webpack_require__(333);
	var Constants = __webpack_require__(223);
	var Tinymce = __webpack_require__(440);
	var assign = __webpack_require__(334);

	var EditorFormField = function (_FormField) {
	    _inherits(EditorFormField, _FormField);

	    function EditorFormField(props) {
	        _classCallCheck(this, EditorFormField);

	        return _possibleConstructorReturn(this, _FormField.call(this, props));
	    }

	    EditorFormField.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        var me = this;
	        if (!me._isEqual(nextProps.value, me.props.value)) {
	            me.handleDataChange(nextProps.value, true);
	        }
	    };

	    EditorFormField.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	        var me = this;
	        var prevMode = prevProps.jsxmode || prevProps.mode;
	        var mode = me.props.jsxmode || me.props.mode;
	        if (prevMode == Constants.MODE.VIEW && mode == Constants.MODE.EDIT) {
	            me.refs.tinymce.resetValue(me.state.value == undefined || me.state.value == null ? "" : me.state.value);
	        }
	    };

	    EditorFormField.prototype._isEqual = function _isEqual(a, b) {
	        return JSON.stringify(a) == JSON.stringify(b);
	    };

	    EditorFormField.prototype.handleChange = function handleChange(e, editor) {
	        var me = this;
	        me.handleDataChange(editor.getContent());
	    };

	    EditorFormField.prototype.handleKeyup = function handleKeyup(e, editor) {
	        var me = this;
	        me.handleDataChange(editor.getContent());
	    };

	    EditorFormField.prototype.addSpecificClass = function addSpecificClass() {
	        var me = this;
	        if (me.props.jsxprefixCls == "kuma-uxform-field") {
	            return me.props.jsxprefixCls + " kuma-editor-uxform-field";
	        } else {
	            return me.props.jsxprefixCls;
	        }
	    };

	    EditorFormField.prototype.renderField = function renderField() {
	        var me = this;
	        var mode = me.props.jsxmode || me.props.mode;
	        if (me.state.fromReset && mode == Constants.MODE.EDIT) {
	            me.refs.tinymce.resetValue(me.props.jsxcontent);
	        }
	        if (mode == Constants.MODE.EDIT) {
	            return React.createElement(Tinymce, { ref: "tinymce",
	                placeholder: me.props.placeholder,
	                config: me.props.jsxconfig,
	                content: me.state.value || "",
	                onChange: me.handleChange.bind(me),
	                onKeyup: me.handleKeyup.bind(me) });
	        } else {
	            return React.createElement("span", { key: "text", dangerouslySetInnerHTML: { __html: me.state.value } });
	        }
	    };

	    return EditorFormField;
	}(FormField);

	EditorFormField.propTypes = assign({}, FormField.propTypes);
	EditorFormField.defaultProps = assign({}, FormField.defaultProps, {
	    jsxconfig: {},
	    jsxcontent: ""
	});
	EditorFormField.displayName = "EditorFormField";

	module.exports = EditorFormField;

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Tinymce Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(441);

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Tinymce Component for uxcore
	 * Inspired by react-tinymce: https://github.com/mzabriskie/react-tinymce
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var util = __webpack_require__(442);
	var EditorConfig = __webpack_require__(443);
	var assign = __webpack_require__(444);
	// Include all of the Native DOM and custom events from:
	// https://github.com/tinymce/tinymce/blob/master/tools/docs/tinymce.Editor.js#L5-L12
	var EVENTS = ['focusin', 'focusout', 'click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'beforepaste', 'paste', 'cut', 'copy', 'selectionchange', 'mouseout', 'mouseenter', 'mouseleave', 'keydown', 'keypress', 'keyup', 'contextmenu', 'dragend', 'dragover', 'draggesture', 'dragdrop', 'drop', 'drag', 'BeforeRenderUI', 'SetAttrib', 'PreInit', 'PostRender', 'init', 'deactivate', 'activate', 'NodeChange', 'BeforeExecCommand', 'ExecCommand', 'show', 'hide', 'ProgressState', 'LoadContent', 'SaveContent', 'BeforeSetContent', 'SetContent', 'BeforeGetContent', 'GetContent', 'VisualAid', 'remove', 'submit', 'reset', 'BeforeAddUndo', 'AddUndo', 'change', 'undo', 'redo', 'ClearUndos', 'ObjectSelected', 'ObjectResizeStart', 'ObjectResized', 'PreProcess', 'PostProcess', 'focus', 'blur'];

	// Note: because the capitalization of the events is weird, we're going to get
	// some inconsistently-named handlers, for example compare:
	// 'onMouseleave' and 'onNodeChange'
	var HANDLER_NAMES = EVENTS.map(function (event) {
	    return 'on' + util.uc_first(event);
	});

	var Tinymce = function (_React$Component) {
	    _inherits(Tinymce, _React$Component);

	    function Tinymce(props) {
	        _classCallCheck(this, Tinymce);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    Tinymce.prototype.componentWillMount = function componentWillMount() {
	        if ((typeof tinymce === 'undefined' ? 'undefined' : _typeof(tinymce)) !== 'object') {
	            console.warn("TinyMCE is not found in global, init failed");
	        }
	        this.id = this.id || util.uuid();
	    };

	    Tinymce.prototype.componentDidMount = function componentDidMount() {
	        this._init(this.props.config);
	    };

	    Tinymce.prototype.componentWillUnmount = function componentWillUnmount() {
	        this._remove();
	    };

	    Tinymce.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!util.isEqual(nextProps.config, this.props.config)) {
	            this._init(nextProps.config, nextProps.content);
	        }
	    };

	    Tinymce.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	        return !util.isEqual(this.props.content, nextProps.content) || !util.isEqual(this.props.config, nextProps.config);
	    };

	    Tinymce.prototype.resetValue = function resetValue(value) {
	        tinymce.get(this.id).setContent(value);
	    };

	    Tinymce.prototype._init = function _init(config, content) {
	        var me = this;
	        if (me._isInit) {
	            me._remove();
	        }
	        // hide the textarea until init finished
	        ReactDOM.findDOMNode(me).style.visibility = 'hidden';
	        config.selector = '#' + me.id;
	        config = assign({}, EditorConfig, config);
	        if (!config.language) {
	            config.language = 'zh_CN';
	        }
	        config.setup = function (editor) {
	            EVENTS.forEach(function (event, index) {
	                var handler = me.props[HANDLER_NAMES[index]];
	                if (typeof handler !== 'function') return;
	                editor.on(event, function (e) {
	                    // native DOM events don't have access to the editor so we pass it here
	                    handler(e, editor);
	                });
	            });
	            // need to set content here because the textarea will still have the
	            // old `this.props.content`
	            if (content) {
	                editor.on('init', function () {
	                    editor.setContent(content);
	                });
	            }
	        };
	        tinymce.baseURL = '//g.alicdn.com/uxcore/uxcore-lib/tinymce/4.2.5/';
	        tinymce.init(config);
	        ReactDOM.findDOMNode(me).style.visibility = "";
	        me._isInit = true;
	    };

	    Tinymce.prototype._remove = function _remove() {
	        tinymce.EditorManager.execCommand("mceRemoveEditor", true, this.id);
	        this._isInit = false;
	    };

	    Tinymce.prototype.render = function render() {
	        return React.createElement('textarea', { id: this.id, defaultValue: this.props.content, placeholder: this.props.placeholder });
	    };

	    return Tinymce;
	}(React.Component);

	Tinymce.defaultProps = {
	    config: {}
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	Tinymce.propTypes = {
	    config: React.PropTypes.object,
	    content: React.PropTypes.string
	};

	//add handler propTypes
	HANDLER_NAMES.forEach(function (name) {
	    Tinymce.propTypes[name] = React.PropTypes.func;
	});

	Tinymce.displayName = "Tinymce";

	module.exports = Tinymce;

/***/ },
/* 442 */
/***/ function(module, exports) {

	'use strict';

	var count = 0;

	module.exports = {
	    uc_first: function uc_first(str) {
	        return str.substring(0, 1).toUpperCase() + str.substring(1);
	    },
	    uuid: function uuid() {
	        return 'uxcore-tinymce-' + count++;
	    },
	    isEqual: function isEqual(a, b) {
	        return JSON.stringify(a) == JSON.stringify(b);
	    }
		};

/***/ },
/* 443 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var plugins = ['lists', 'hr', 'emoticons', 'textcolor', 'insertdatetime', 'link', 'table', 'paste', 'preview', 'wordcount', 'image', 'upload', 'placeholder'];

	exports["default"] = {
		theme: 'modern',
		height: 400,
		external_plugins: {
			'emoticons': '//g.alicdn.com/uxcore/uxcore-lib/tinymce/4.2.5/plugins/emoticons/plugin.min.js',
			'upload': '//g.alicdn.com/uxcore/uxcore-lib/tinymce/4.2.5/plugins/upload/plugin.min.js',
			'textcolor': '//g.alicdn.com/uxcore/uxcore-lib/tinymce/4.2.5/plugins/textcolor/plugin.min.js',
			'hr': '//g.alicdn.com/uxcore/uxcore-lib/tinymce/4.2.5/plugins/hr/plugin.min.js',
			'placeholder': '//g.alicdn.com/uxcore/uxcore-lib/tinymce/4.2.5/plugins/placeholder/plugin.min.js'
		},
		resize: true, // 是否可以鼠标拖动编辑器改变大小
		border_width: 1, // 编辑器的边框宽度
		convert_urls: false, // 当你insertContent的时候，取消一些节点src的转换
		visual: true, // table的虚框是否显示，由于大文本设置虚框很耗性能，所以取消掉
		keep_values: false, // 必须设置false用来提高性能
		forced_root_block: 'div', // 当空文本的时候，tinymce会设置一个根节点，默认是P，我们要改成div比较合理
		show_system_default_font: true, // 是否开启系统字体的探测。
		link_title: true, // link plugins enable title edit
		plugins: plugins,
		cssFiles: ['styles/skin.css', 'styles/skin-ext.css'],
		toolbar1: 'preview undo redo | fontselect fontsizeselect | bold italic underline strikethrough removeformat | forecolor backcolor | link | emoticons upload',
		toolbar2: 'alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | table hr inserttime',
		uploadConfig: {
			"inputName": "imageUploadInput",
			"actionUrl": "http://test.alibaba-inc.com/work/xservice/http/uploadimage.json",
			"errorCallback": function errorCallback() {
				console.log('errorCallback', arguments);
			},
			"progressCallback": function progressCallback() {
				console.log('progressCallback', arguments);
			}
		},
		wordcount_countregex: /[^\x00-\xff]+/g
	};
		module.exports = exports['default'];

/***/ },
/* 444 */
33,
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _objectWithoutProperties(obj, keys) {
	    var target = {};for (var i in obj) {
	        if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	    }return target;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Created by xy on 15/4/13.
	 */
	var SelectFormField = __webpack_require__(446);
	var Constants = __webpack_require__(223);
	var Select = __webpack_require__(362);
	var assign = __webpack_require__(334);
	var deepcopy = __webpack_require__(342);
	var classnames = __webpack_require__(5);
	var Option = Select.Option;

	var selectOptions = ['onSelect', 'onDeselect', 'getPopupContainer', 'filterOption', 'allowClear', 'searchPlaceholder', 'tags', 'disabled', 'showSearch', 'placeholder', 'optionLabelProp', 'maxTagTextLength', 'dropdownMatchSelectWidth', 'dropdownClassName', 'notFoundContent'];

	var SearchFormField = function (_SelectFormField) {
	    _inherits(SearchFormField, _SelectFormField);

	    function SearchFormField(props) {
	        _classCallCheck(this, SearchFormField);

	        return _possibleConstructorReturn(this, _SelectFormField.call(this, props));
	    }

	    SearchFormField.prototype.addSpecificClass = function addSpecificClass() {
	        var me = this;
	        if (me.props.jsxprefixCls == "kuma-uxform-field") {
	            return me.props.jsxprefixCls + " kuma-search-uxform-field";
	        } else {
	            return me.props.jsxprefixCls;
	        }
	    };

	    SearchFormField.prototype._processAdvanced = function _processAdvanced() {
	        var me = this;
	        var advancedOptions = me.props.advancedOptions;

	        return advancedOptions.map(function (item) {
	            return React.createElement(Option, { key: item.value, title: item.text }, item.text);
	        });
	    };

	    SearchFormField.prototype._processClassOptions = function _processClassOptions() {
	        var me = this;
	        var classOptions = me.props.classOptions;

	        return classOptions.map(function (item) {
	            return React.createElement(Option, { key: item.value, title: item.text }, item.text);
	        });
	    };

	    SearchFormField.prototype.handleChange = function handleChange(value, label) {
	        var me = this;
	        var stateValue = deepcopy(me.state.value) || {};
	        stateValue.main = value;
	        me.handleDataChange(stateValue, false, label);
	    };

	    SearchFormField.prototype.handleClassChange = function handleClassChange(value) {
	        var me = this;
	        var stateValue = deepcopy(me.state.value) || {};
	        var label = me.state.label;
	        stateValue["class"] = value;
	        me.handleDataChange(stateValue, false, label);
	    };

	    SearchFormField.prototype.handleAdvancedChange = function handleAdvancedChange(value) {
	        var me = this;
	        var stateValue = deepcopy(me.state.value) || {};
	        var label = me.state.label;
	        stateValue.advanced = value;
	        me.handleDataChange(stateValue, false, label);
	    };

	    SearchFormField.prototype.handleIconClick = function handleIconClick(e) {
	        var me = this;
	        me.props.onIconClick(e);
	    };

	    SearchFormField.prototype.renderField = function renderField() {
	        var _options;

	        var me = this;
	        var arr = [];
	        var mode = me.props.jsxmode || me.props.mode;

	        var options = (_options = {
	            ref: "el",
	            key: "select",
	            optionFilterProp: me.props.optionFilterProp,
	            combobox: me.props.combobox,
	            onChange: me.handleChange.bind(me),
	            onSearch: me.handleSearch.bind(me)
	        }, _options['key'] = 'search', _options);

	        selectOptions.forEach(function (item, index) {
	            if (item in me.props) {
	                options[item] = me.props[item];
	            }
	        });

	        if (Object.keys(me.props.jsxdata).length > 0) {
	            options.optionFilterProp = 'title';
	        }

	        // only jsxfetchUrl mode need pass label, for the options always change.
	        // when mounted, state.label is undefined, which cause defalutValue cannot be used.
	        if (!!me.props.jsxfetchUrl && !!me.state.label && me.state.label.length !== 0) {
	            options.label = me.state.label || [];
	        }

	        if (!me.props.combobox || me.state.fromReset) {
	            options.value = me.state.value.main || [];
	        }

	        if (!!me.props.jsxfetchUrl) {
	            options.filterOption = false;
	        }
	        if (!me.props.tidy && me.props.classOptions instanceof Array && me.props.classOptions.length > 0) {
	            arr.push(me.renderClassOptions());
	        }
	        arr.push(React.createElement(Select, options, me._processData()));

	        if (!me.props.tidy && me.props.advancedOptions instanceof Array && me.props.advancedOptions.length > 0) {
	            arr.push(me.renderAdvancedOptions());
	        }
	        arr.push(React.createElement('span', { className: classnames({
	                "kuma-search-uxform-field-icon": true,
	                "tidy-pattern": me.props.tidy
	            }), key: 'icon', onClick: me.handleIconClick.bind(me) }, React.createElement('i', { className: 'kuma-icon kuma-icon-search' })));
	        return arr;
	    };

	    SearchFormField.prototype.renderClassOptions = function renderClassOptions() {
	        var _classnames, _classnames2;

	        var me = this;
	        var _me$props$classConfig = me.props.classConfig;
	        var className = _me$props$classConfig.className;
	        var dropdownClassName = _me$props$classConfig.dropdownClassName;
	        var onChange = _me$props$classConfig.onChange;

	        var otherOptions = _objectWithoutProperties(_me$props$classConfig, ['className', 'dropdownClassName', 'onChange']);

	        var options = assign({}, {
	            showSearch: false,
	            key: 'class',
	            dropdownClassName: classnames((_classnames = {
	                "kuma-uxform-class-dropdown": true
	            }, _classnames[dropdownClassName] = !!dropdownClassName, _classnames)),
	            className: classnames((_classnames2 = {
	                "kuma-uxform-class-search": true
	            }, _classnames2[className] = !!className, _classnames2)),
	            onChange: me.handleClassChange.bind(me)
	        }, otherOptions);
	        return React.createElement(Select, options, me._processClassOptions());
	    };

	    SearchFormField.prototype.renderAdvancedOptions = function renderAdvancedOptions() {
	        var _classnames3;

	        var me = this;
	        var _me$props$advancedCon = me.props.advancedConfig;
	        var className = _me$props$advancedCon.className;
	        var onChange = _me$props$advancedCon.onChange;

	        var otherOptions = _objectWithoutProperties(_me$props$advancedCon, ['className', 'onChange']);

	        var options = assign({}, {
	            showSearch: false,
	            key: 'advanced',
	            className: classnames((_classnames3 = {
	                'kuma-uxform-advanced-search': true
	            }, _classnames3[className] = !!className, _classnames3)),
	            onChange: me.handleAdvancedChange.bind(me)
	        }, otherOptions);
	        return React.createElement(Select, options, me._processAdvanced());
	    };

	    return SearchFormField;
	}(SelectFormField);

	SearchFormField.Option = Option;
	SearchFormField.displayName = "SearchFormField";
	SearchFormField.propTypes = assign({}, SelectFormField.propTypes, {
	    advancedOptions: React.PropTypes.array,
	    advancedConfig: React.PropTypes.object,
	    classOptions: React.PropTypes.array,
	    classConfig: React.PropTypes.object,
	    tidy: React.PropTypes.bool,
	    onIconClick: React.PropTypes.func
	});
	SearchFormField.defaultProps = assign({}, SelectFormField.defaultProps, {
	    jsxshowLabel: false,
	    combobox: true,
	    advancedConfig: {},
	    classConfig: {},
	    tidy: false,
	    onIconClick: function onIconClick() {}
	});

		module.exports = SearchFormField;

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Created by xy on 15/4/13.
	 */
	var FormField = __webpack_require__(333);
	var Constants = __webpack_require__(223);
	var Select = __webpack_require__(362);
	var assign = __webpack_require__(334);
	var Validator = __webpack_require__(339);
	var isObject = Validator.isObject;
	var isArray = Validator.isArray;
	var Option = Select.Option;

	var selectOptions = ['onSelect', 'onDeselect', 'getPopupContainer', 'multiple', 'filterOption', 'allowClear', 'combobox', 'searchPlaceholder', 'tags', 'disabled', 'showSearch', 'placeholder', 'optionLabelProp', 'maxTagTextLength', 'dropdownMatchSelectWidth', 'dropdownClassName', 'notFoundContent'];

	var SelectFormField = function (_FormField) {
	    _inherits(SelectFormField, _FormField);

	    function SelectFormField(props) {
	        _classCallCheck(this, SelectFormField);

	        var _this = _possibleConstructorReturn(this, _FormField.call(this, props));

	        var me = _this;
	        assign(me.state, {
	            data: props.jsxdata
	        });
	        return _this;
	    }

	    SelectFormField.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        var me = this;
	        if (!me._isEqual(nextProps.value, me.props.value)) {
	            me.handleDataChange(me._processValue(nextProps.value), true);
	        }
	        if (!me._isEqual(nextProps.jsxdata, me.props.jsxdata)) {
	            me.setState({
	                data: nextProps.jsxdata
	            });
	        }
	    };

	    SelectFormField.prototype.componentWillMount = function componentWillMount() {
	        var me = this;
	        if (me.props.jsxfetchUrl) {
	            me.fetchData();
	        }
	    };

	    SelectFormField.prototype.componentDidMount = function componentDidMount() {
	        var me = this;
	        if (!me.props.standalone) {
	            me.props.attachFormField(me);
	            me.props.handleDataChange(me, {
	                value: me._processValue(me.props.value),
	                pass: true
	            }, true);
	        }
	        me.hasDeprecatedProps();
	    };

	    SelectFormField.prototype.handleDataChange = function handleDataChange(value, fromReset) {
	        var me = this;
	        me.setState({
	            value: value,
	            formatValue: me.formatValue(value),
	            error: !!fromReset ? false : me.state.error,
	            /*
	             * why set state fromReset? some field like editor cannot be reset in the common way
	             * so set this state to tell the field that you need to reset by yourself.
	             */
	            fromReset: fromReset
	        }, function () {
	            var pass = true;
	            if (!fromReset) {
	                pass = me.doValidate();
	            }
	            me.props.handleDataChange(me, {
	                value: value,
	                pass: pass
	            });
	        });
	    };

	    SelectFormField.prototype.fetchData = function fetchData(value) {
	        var me = this;
	        var ajaxOptions = {
	            url: me.props.jsxfetchUrl,
	            dataType: me.props.dataType,
	            data: me.props.beforeFetch({
	                q: value
	            }),
	            success: function success(data) {
	                var fetchData = me.props.afterFetch(data);
	                if (!!me.props.jsxdata) {
	                    fetchData = assign({}, fetchData, me.props.jsxdata);
	                }
	                me.setState({
	                    data: fetchData
	                });
	            },
	            fail: function fail() {
	                console.log("Fetch Data failed");
	            }
	        };
	        if (/\.jsonp/.test(me.props.jsxfetchUrl)) {
	            ajaxOptions.dataType = "jsonp";
	        }
	        $.ajax(ajaxOptions);
	    };

	    SelectFormField.prototype.handleChange = function handleChange(value, label) {
	        var me = this;
	        me.handleDataChange(value, false, label);
	    };

	    SelectFormField.prototype.handleSearch = function handleSearch(value) {
	        var me = this;
	        if (me.props.jsxfetchUrl) {
	            me.fetchData(value);
	        } else {
	            me.props.onSearch && me.props.onSearch(value);
	        }
	    };

	    SelectFormField.prototype._processData = function _processData() {
	        var me = this;
	        var values = Object.keys(me.state.data);
	        var children = me.props.children;
	        if (!values.length) {
	            // console.warn("You need to pass data to initialize Select.");
	            if (!!children) {
	                return children;
	            }
	        } else {
	            var arr = values.map(function (value, index) {
	                var content = "";
	                var _me$props = me.props;
	                var multiple = _me$props.multiple;
	                var jsxmultiple = _me$props.jsxmultiple;
	                var combobox = _me$props.combobox;
	                var jsxcombobox = _me$props.jsxcombobox;

	                if (multiple == true || jsxmultiple == true || combobox == true || jsxcombobox == true) {
	                    content = me.state.data[value];
	                } else {
	                    content = React.createElement('span', { title: me.state.data[value] }, me.state.data[value]);
	                }
	                return React.createElement(Option, { key: value, title: me.state.data[value] }, content);
	            });
	            return arr;
	        }
	    };

	    SelectFormField.prototype._processValue = function _processValue(value) {
	        var me = this;
	        value = value || me.state.value;
	        if (!me.props.jsxfetchUrl && !me.props.onSearch) {
	            return value;
	        }
	        if (typeof value == "string") {
	            return {
	                key: value
	            };
	        } else if (value instanceof Array) {
	            return value.map(function (item) {
	                if (typeof item == "string") {
	                    return {
	                        key: item
	                    };
	                } else {
	                    return item;
	                }
	            });
	        } else {
	            return value;
	        }
	    };

	    SelectFormField.prototype.addSpecificClass = function addSpecificClass() {
	        var me = this;
	        if (me.props.jsxprefixCls == "kuma-uxform-field") {
	            return me.props.jsxprefixCls + " kuma-select-uxform-field";
	        } else {
	            return me.props.jsxprefixCls;
	        }
	    };

	    SelectFormField.prototype.hasDeprecatedProps = function hasDeprecatedProps() {
	        var arr = ['jsxmultiple', 'jsxallowClear', 'jsxcombobox', 'jsxsearchPlaceholder', 'jsxtags', 'jsxdisabled', 'jsxshowSearch', 'jsxplaceholder'];
	        var me = this;
	        var keys = Object.keys(me.props);
	        var hasDeprecated = keys.some(function (item, index) {
	            return arr.indexOf(item) != -1;
	        });
	        if (hasDeprecated) {
	            console.warn("SelectFormField: props same as uxcore-select2 can be passed without prefix 'jsx' now (exclude style). we will remove the support of the props mentioned above with prefix 'jsx' at uxcore-form@1.3.0 .");
	        }
	    };

	    SelectFormField.prototype.renderField = function renderField() {
	        var me = this;
	        var arr = [];
	        var mode = me.props.jsxmode || me.props.mode;

	        if (mode == Constants.MODE.EDIT) {
	            (function () {
	                var options = {
	                    ref: "el",
	                    key: "select",
	                    optionLabelProp: me.props.optionLabelProp,
	                    style: me.props.jsxstyle,
	                    multiple: me.props.jsxmultiple,
	                    allowClear: me.props.jsxallowClear,
	                    combobox: me.props.jsxcombobox,
	                    searchPlaceholder: me.props.jsxsearchPlaceholder,
	                    tags: me.props.jsxtags,
	                    optionFilterProp: me.props.optionFilterProp,
	                    disabled: !!me.props.jsxdisabled,
	                    showSearch: me.props.jsxshowSearch,
	                    placeholder: me.props.jsxplaceholder,
	                    onChange: me.handleChange.bind(me),
	                    onSearch: me.handleSearch.bind(me)
	                };

	                selectOptions.forEach(function (item, index) {
	                    if (item in me.props) {
	                        options[item] = me.props[item];
	                    }
	                });

	                if (Object.keys(me.props.jsxdata).length > 0) {
	                    options.optionFilterProp = 'title';
	                }

	                // only jsxfetchUrl mode need pass label, for the options always change.
	                // when mount, state.label is undefined, which cause defalutValue cannot be used.
	                if (!!me.props.jsxfetchUrl || !!me.props.onSearch) {
	                    options.labelInValue = true;
	                }

	                if (!me.props.combobox || me.state.fromReset) {
	                    options.value = me._processValue() || [];
	                }

	                if (!!me.props.jsxfetchUrl) {
	                    options.filterOption = false;
	                }
	                arr.push(React.createElement(Select, options, me._processData()));
	            })();
	        } else if (mode == Constants.MODE.VIEW) {
	            var str = '';
	            if (me.state.value) {
	                var value = me._processValue();
	                var values = !isArray(value) ? [value] : value;
	                str = values.map(function (item) {
	                    return item.key;
	                }).join(" ");
	            }
	            arr.push(React.createElement('span', { key: 'select' }, str));
	        }
	        return arr;
	    };

	    return SelectFormField;
	}(FormField);

	SelectFormField.Option = Option;
	SelectFormField.displayName = "SelectFormField";
	SelectFormField.propTypes = assign({}, FormField.propTypes, {
	    jsxstyle: React.PropTypes.object,
	    jsxplaceholder: React.PropTypes.string,
	    jsxcombobox: React.PropTypes.bool,
	    jsxdata: React.PropTypes.object,
	    beforeFetch: React.PropTypes.func,
	    afterFetch: React.PropTypes.func,
	    jsxshowSearch: React.PropTypes.bool,
	    jsxtags: React.PropTypes.bool,
	    jsxmultiple: React.PropTypes.bool,
	    jsxallowClear: React.PropTypes.bool,
	    jsxsearchPlaceholder: React.PropTypes.string,
	    optionFilterProp: React.PropTypes.string,
	    dataType: React.PropTypes.string
	});
	SelectFormField.defaultProps = assign({}, FormField.defaultProps, {
	    jsxstyle: {},
	    jsxplaceholder: "请下拉选择",
	    jsxcombobox: false,
	    jsxdata: {},
	    beforeFetch: function beforeFetch(obj) {
	        return obj;
	    },
	    afterFetch: function afterFetch(obj) {
	        return obj;
	    },
	    jsxshowSearch: true,
	    jsxallowClear: false,
	    jsxtags: false,
	    jsxmultiple: false,
	    jsxsearchPlaceholder: "",
	    optionFilterProp: "children",
	    optionLabelProp: "children",
	    dataType: 'json'
	});

		module.exports = SelectFormField;

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Grid Component for uxcore
	 * @author eternalky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(448);

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];for (var key in source) {
	            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }return target;
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/*
	 * Inspired by react-bootstrap: https://github.com/react-bootstrap/react-bootstrap/ 
	 */

	var classNames = __webpack_require__(5);
	var elementType = __webpack_require__(449);
	var Row = __webpack_require__(451);
	var Col = __webpack_require__(452);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Grid = function (_React$Component) {
	    _inherits(Grid, _React$Component);

	    function Grid(props) {
	        _classCallCheck(this, Grid);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(Grid).call(this, props));
	    }

	    _createClass(Grid, [{
	        key: 'render',
	        value: function render() {
	            var ComponentClass = this.props.componentClass;
	            var className = this.props.fluid ? 'kuma-container-fluid' : 'kuma-container';

	            return React.createElement(ComponentClass, _extends({}, this.props, {
	                className: classNames(this.props.className, className) }), this.props.children);
	        }
	    }]);

	    return Grid;
	}(React.Component);

	Grid.displayName = "Grid";
	Grid.propTypes = {
	    /**
	     * Turn any fixed-width grid layout into a full-width layout by this property.
	     *
	     * Adds `container-fluid` class.
	     */
	    fluid: React.PropTypes.bool,
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: elementType
	};

	Grid.defaultProps = {
	    componentClass: 'div',
	    fluid: false
	};

	Grid.Row = Row;
	Grid.Col = Col;

	module.exports = Grid;

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _common = __webpack_require__(450);

	/**
	 * Checks whether a prop provides a type of element.
	 *
	 * The type of element can be provided in two forms:
	 * - tag name (string)
	 * - a return value of React.createClass(...)
	 *
	 * @param props
	 * @param propName
	 * @param componentName
	 * @returns {Error|undefined}
	 */

	function validate(props, propName, componentName) {
	  var errBeginning = _common.errMsg(props, propName, componentName, '. Expected an Element `type`');

	  if (typeof props[propName] !== 'function') {
	    if (_react2['default'].isValidElement(props[propName])) {
	      return new Error(errBeginning + ', not an actual Element');
	    }

	    if (typeof props[propName] !== 'string') {
	      return new Error(errBeginning + ' such as a tag name or return value of React.createClass(...)');
	    }
	  }
	}

	exports['default'] = _common.createChainableTypeChecker(validate);
	module.exports = exports['default'];

/***/ },
/* 450 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.errMsg = errMsg;
	exports.createChainableTypeChecker = createChainableTypeChecker;

	function errMsg(props, propName, componentName, msgContinuation) {
	  return 'Invalid prop \'' + propName + '\' of value \'' + props[propName] + '\'' + (' supplied to \'' + componentName + '\'' + msgContinuation);
	}

	/**
	 * Create chain-able isRequired validator
	 *
	 * Largely copied directly from:
	 *  https://github.com/facebook/react/blob/0.11-stable/src/core/ReactPropTypes.js#L94
	 */

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName) {
	    componentName = componentName || '<<anonymous>>';
	    if (props[propName] == null) {
	      if (isRequired) {
	        return new Error('Required prop \'' + propName + '\' was not specified in \'' + componentName + '\'.');
	      }
	    } else {
	      return validate(props, propName, componentName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
		}

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];for (var key in source) {
	            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }return target;
	};

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var classNames = __webpack_require__(5);
	var elementType = __webpack_require__(449);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Row = function (_React$Component) {
	    _inherits(Row, _React$Component);

	    function Row(props) {
	        _classCallCheck(this, Row);

	        return _possibleConstructorReturn(this, Object.getPrototypeOf(Row).call(this, props));
	    }

	    _createClass(Row, [{
	        key: 'render',
	        value: function render() {
	            var ComponentClass = this.props.componentClass;

	            return React.createElement(ComponentClass, _extends({}, this.props, { className: classNames(this.props.className, 'kuma-row') }), this.props.children);
	        }
	    }]);

	    return Row;
	}(React.Component);

	Row.displayName = "Row";
	Row.propTypes = {
	    /**
	     * You can use a custom element for this component
	     */
	    componentClass: elementType
	};
	Row.defaultProps = {
	    componentClass: 'div'
	};
		module.exports = Row;

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var classNames = __webpack_require__(5);
	var styleMaps = __webpack_require__(453);
	var elementType = __webpack_require__(449);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Col = function (_React$Component) {
	  _inherits(Col, _React$Component);

	  function Col(props) {
	    _classCallCheck(this, Col);

	    return _possibleConstructorReturn(this, Object.getPrototypeOf(Col).call(this, props));
	  }

	  _createClass(Col, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var ComponentClass = this.props.componentClass;
	      var classes = {};

	      Object.keys(styleMaps.SIZES).forEach(function (key) {
	        var size = styleMaps.SIZES[key];
	        var prop = size;
	        var classPart = size + '-';

	        if (_this2.props[prop]) {
	          classes['col-' + classPart + _this2.props[prop]] = true;
	        }

	        prop = size + 'Offset';
	        classPart = size + '-offset-';
	        if (_this2.props[prop] >= 0) {
	          classes['col-' + classPart + _this2.props[prop]] = true;
	        }

	        prop = size + 'Push';
	        classPart = size + '-push-';
	        if (_this2.props[prop] >= 0) {
	          classes['col-' + classPart + _this2.props[prop]] = true;
	        }

	        prop = size + 'Pull';
	        classPart = size + '-pull-';
	        if (_this2.props[prop] >= 0) {
	          classes['col-' + classPart + _this2.props[prop]] = true;
	        }
	      }, this);

	      return React.createElement(ComponentClass, _extends({}, this.props, { className: classNames(this.props.className, classes) }), this.props.children);
	    }
	  }]);

	  return Col;
	}(React.Component);

	Col.displayName = "Col";
	Col.propTypes = {
	  /**
	   * The number of columns you wish to span
	   *
	   * for Extra small devices Phones (<768px)
	   *
	   * class-prefix `col-xs-`
	   */
	  xs: React.PropTypes.number,
	  /**
	   * The number of columns you wish to span
	   *
	   * for Small devices Tablets (≥768px)
	   *
	   * class-prefix `col-sm-`
	   */
	  sm: React.PropTypes.number,
	  /**
	   * The number of columns you wish to span
	   *
	   * for Medium devices Desktops (≥992px)
	   *
	   * class-prefix `col-md-`
	   */
	  md: React.PropTypes.number,
	  /**
	   * The number of columns you wish to span
	   *
	   * for Large devices Desktops (≥1200px)
	   *
	   * class-prefix `col-lg-`
	   */
	  lg: React.PropTypes.number,
	  /**
	   * Move columns to the right
	   *
	   * for Extra small devices Phones
	   *
	   * class-prefix `col-xs-offset-`
	   */
	  xsOffset: React.PropTypes.number,
	  /**
	   * Move columns to the right
	   *
	   * for Small devices Tablets
	   *
	   * class-prefix `col-sm-offset-`
	   */
	  smOffset: React.PropTypes.number,
	  /**
	   * Move columns to the right
	   *
	   * for Medium devices Desktops
	   *
	   * class-prefix `col-md-offset-`
	   */
	  mdOffset: React.PropTypes.number,
	  /**
	   * Move columns to the right
	   *
	   * for Large devices Desktops
	   *
	   * class-prefix `col-lg-offset-`
	   */
	  lgOffset: React.PropTypes.number,
	  /**
	   * Change the order of grid columns to the right
	   *
	   * for Extra small devices Phones
	   *
	   * class-prefix `col-xs-push-`
	   */
	  xsPush: React.PropTypes.number,
	  /**
	   * Change the order of grid columns to the right
	   *
	   * for Small devices Tablets
	   *
	   * class-prefix `col-sm-push-`
	   */
	  smPush: React.PropTypes.number,
	  /**
	   * Change the order of grid columns to the right
	   *
	   * for Medium devices Desktops
	   *
	   * class-prefix `col-md-push-`
	   */
	  mdPush: React.PropTypes.number,
	  /**
	   * Change the order of grid columns to the right
	   *
	   * for Large devices Desktops
	   *
	   * class-prefix `col-lg-push-`
	   */
	  lgPush: React.PropTypes.number,
	  /**
	   * Change the order of grid columns to the left
	   *
	   * for Extra small devices Phones
	   *
	   * class-prefix `col-xs-pull-`
	   */
	  xsPull: React.PropTypes.number,
	  /**
	   * Change the order of grid columns to the left
	   *
	   * for Small devices Tablets
	   *
	   * class-prefix `col-sm-pull-`
	   */
	  smPull: React.PropTypes.number,
	  /**
	   * Change the order of grid columns to the left
	   *
	   * for Medium devices Desktops
	   *
	   * class-prefix `col-md-pull-`
	   */
	  mdPull: React.PropTypes.number,
	  /**
	   * Change the order of grid columns to the left
	   *
	   * for Large devices Desktops
	   *
	   * class-prefix `col-lg-pull-`
	   */
	  lgPull: React.PropTypes.number,
	  /**
	   * You can use a custom element for this component
	   */
	  componentClass: elementType
	};

	Col.defaultProps = {
	  componentClass: 'div'
	};

		module.exports = Col;

/***/ },
/* 453 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	    SIZES: {
	        'large': 'lg',
	        'medium': 'md',
	        'small': 'sm',
	        'xsmall': 'xs',
	        'lg': 'lg',
	        'md': 'md',
	        'sm': 'sm',
	        'xs': 'xs'
	    }
		};

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Layout Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(455);

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	function _defineProperty(obj, key, value) {
	    if (key in obj) {
	        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	    } else {
	        obj[key] = value;
	    }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	* @author: eternalsky
	* @time:   10/26 2015
	*/

	var Left = __webpack_require__(456);
	var Right = __webpack_require__(459);
	var classnames = __webpack_require__(5);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Layout = function (_React$Component) {
	    _inherits(Layout, _React$Component);

	    function Layout(props) {
	        _classCallCheck(this, Layout);

	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Layout).call(this, props));

	        _this.state = {};
	        return _this;
	    }

	    _createClass(Layout, [{
	        key: "processChildren",
	        value: function processChildren() {
	            var me = this;
	            var children = me.props.children;
	            var leftAdaptive = false;
	            var rightAdaptive = false;
	            React.Children.map(children, function (child) {
	                if (child && typeof child.type == 'function' && child.type.displayName == 'Left') {
	                    me.left = child;
	                    leftAdaptive = !!child.props.adaptive;
	                } else if (child && typeof child.type == 'function' && child.type.displayName == 'Right') {
	                    me.right = child;
	                    rightAdaptive = !!child.props.adaptive;
	                }
	            });

	            me.suffix = me.getSuffix(leftAdaptive, rightAdaptive);
	            if (me.suffix == 'rf') {
	                me.rightStyle = {
	                    marginLeft: -me.right.props.width
	                };
	                me.leftStyle = {
	                    paddingRight: me.right.props.width
	                };
	            } else if (me.suffix == 'lf') {
	                me.rightStyle = {
	                    paddingLeft: me.left.props.width
	                };
	                me.leftStyle = {
	                    marginRight: -me.left.props.width
	                };
	            }
	            return me.generateClass(me.suffix);
	        }
	    }, {
	        key: "getSuffix",
	        value: function getSuffix(leftAdaptive, rightAdaptive) {
	            var suffix = '';
	            // 如果都是非自适应，则为 fixed
	            if (!leftAdaptive && !rightAdaptive) {
	                suffix = 'fixed';
	            }
	            // 左侧定宽，右侧自适应，lf
	            else if (!leftAdaptive && rightAdaptive) {
	                    suffix = 'lf';
	                }
	                // 左侧自适应，右侧定宽，rf
	                else if (leftAdaptive && !rightAdaptive) {
	                        suffix = 'rf';
	                    } else {
	                        console.error("left and right cannot be both adaptive, layout generation failed");
	                    }
	            return suffix;
	        }
	    }, {
	        key: "generateClass",
	        value: function generateClass(suffix) {
	            var me = this;
	            var length = React.Children.count(me.props.children);
	            var layoutCls = '';
	            var leftCls = '';
	            var rightCls = '';

	            if (length == 2) {
	                layoutCls = 'kuma-layout-2c';
	            } else if (lengthCls == 3) {
	                layoutCls = 'kuma-layout-3c';
	            } else {
	                console.error("children length should be 2 or 3, layout generation failed");
	            }

	            leftCls = layoutCls + '-left-' + suffix;
	            rightCls = layoutCls + '-right-' + suffix;
	            return {
	                layoutCls: layoutCls,
	                leftCls: leftCls,
	                rightCls: rightCls
	            };
	        }
	    }, {
	        key: "renderLeft",
	        value: function renderLeft(cls) {
	            var me = this;
	            if (!!me.left) {
	                var _classnames;

	                return React.cloneElement(me.left, {
	                    className: classnames((_classnames = {}, _defineProperty(_classnames, me.left.props.className, !!me.left.props.className), _defineProperty(_classnames, cls.leftCls, true), _classnames)),
	                    style: me.leftStyle || {},
	                    key: 'left'
	                });
	            }
	        }
	    }, {
	        key: "renderRight",
	        value: function renderRight(cls) {
	            var me = this;
	            if (!!me.right) {
	                var _classnames2;

	                return React.cloneElement(me.right, {
	                    className: classnames((_classnames2 = {}, _defineProperty(_classnames2, me.right.props.className, !!me.right.props.className), _defineProperty(_classnames2, cls.rightCls, true), _classnames2)),
	                    style: me.rightStyle || {},
	                    key: 'right'
	                });
	            }
	        }
	    }, {
	        key: "renderLayout",
	        value: function renderLayout(cls) {
	            var me = this;
	            var arr = [];
	            if (me.suffix == 'lf') {
	                arr.push(me.renderRight(cls));
	                arr.push(me.renderLeft(cls));
	            } else {
	                arr.push(me.renderLeft(cls));
	                arr.push(me.renderRight(cls));
	            }
	            return arr;
	        }
	    }, {
	        key: "render",
	        value: function render() {
	            var _classnames3;

	            var me = this;
	            var cls = me.processChildren();
	            return React.createElement("div", { className: classnames((_classnames3 = {}, _defineProperty(_classnames3, me.props.className, !!me.props.className), _defineProperty(_classnames3, cls.layoutCls, true), _defineProperty(_classnames3, "fn-clear", true), _classnames3)) }, me.renderLayout(cls));
	        }
	    }]);

	    return Layout;
	}(React.Component);

	Layout.Left = Left;
	Layout.Right = Right;
	Layout.displayName = "Layout";
	Layout.defaultProps = {};
	Layout.propTypes = {};
	module.exports = Layout;

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Item = __webpack_require__(457);

	var Left = function (_Item) {
	    _inherits(Left, _Item);

	    function Left(props) {
	        _classCallCheck(this, Left);

	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Left).call(this, props));

	        _this.state = {};
	        return _this;
	    }

	    return Left;
	}(Item);

	Left.displayName = "Left";
	Left.defaultProps = Item.defaultProps;
	Left.propTypes = Item.propTypes;
	module.exports = Left;

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }return function (Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	    };
	}();

	function _defineProperty(obj, key, value) {
	    if (key in obj) {
	        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	    } else {
	        obj[key] = value;
	    }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(458);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var LayoutItem = function (_React$Component) {
	    _inherits(LayoutItem, _React$Component);

	    function LayoutItem(props) {
	        _classCallCheck(this, LayoutItem);

	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LayoutItem).call(this, props));

	        _this.state = {};
	        return _this;
	    }

	    _createClass(LayoutItem, [{
	        key: 'render',
	        value: function render() {
	            var me = this;
	            var style = {};
	            if (!me.props.adaptive) {
	                style.width = me.props.width;
	            }
	            return React.createElement('div', { className: classnames(_defineProperty({}, me.props.className, !!me.props.className)), style: assign({}, style, me.props.style) }, me.props.children);
	        }
	    }]);

	    return LayoutItem;
	}(React.Component);

	LayoutItem.displayName = "LayoutItem";
	LayoutItem.defaultProps = {
	    width: 500
	};
	LayoutItem.propTypes = {
	    width: React.PropTypes.number,
	    adaptive: React.PropTypes.bool
	};
		module.exports = LayoutItem;

/***/ },
/* 458 */
33,
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Item = __webpack_require__(457);

	var Right = function (_Item) {
	    _inherits(Right, _Item);

	    function Right(props) {
	        _classCallCheck(this, Right);

	        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Right).call(this, props));

	        _this.state = {};
	        return _this;
	    }

	    return Right;
	}(Item);

	Right.displayName = "Right";
	Right.defaultProps = Item.defaultProps;
	Right.propTypes = Item.propTypes;
	module.exports = Right;

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Mention Component for uxcore
	 * @author
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(461);

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _panel = __webpack_require__(462);

	var _panel2 = _interopRequireDefault(_panel);

	var _editor = __webpack_require__(463);

	var _editor2 = _interopRequireDefault(_editor);

	var _keycode = __webpack_require__(466);

	var _util = __webpack_require__(465);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * @author: vincent.bian
	   */

	var __matchTimer = void 0;

	var Mention = function (_React$Component) {
	    _inherits(Mention, _React$Component);

	    function Mention(props) {
	        _classCallCheck(this, Mention);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            target: null,
	            mentionList: [],
	            cursorPosition: {
	                x: 0,
	                y: 0
	            },
	            panelVisible: false,
	            panelIdx: 0
	        };
	        return _this;
	    }

	    Mention.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
	        if (prevState.mentionList.length !== this.state.mentionList.length) {
	            this.setState({
	                panelVisible: this.state.mentionList.length > 0
	            });
	        }
	        if (!prevState.panelVisible && this.state.panelVisible) {
	            this.setState({
	                panelIdx: 0
	            });
	        }
	    };

	    Mention.prototype.selectItem = function selectItem(data) {
	        this.setState({
	            target: {
	                data: data,
	                t: new Date().getTime()
	            },
	            mentionList: []
	        });
	    };

	    Mention.prototype.runMatcher = function runMatcher(str) {
	        var _this2 = this;

	        __matchTimer && clearTimeout(__matchTimer);
	        __matchTimer = setTimeout(function () {
	            _this2._matcher(str);
	        }.bind(this), this.props.delay);
	    };

	    Mention.prototype._matcher = function _matcher(str) {
	        // console.log(`matcher run with: ${str}`);
	        var _props = this.props;
	        var source = _props.source;
	        var matchRange = _props.matchRange;

	        this.setState({
	            panelVisible: false,
	            mentionList: []
	        });
	        if (str.length >= matchRange[0] && str.length <= matchRange[1]) {
	            if (Array.isArray(source)) {
	                this._next(source.filter(function (item) {
	                    return item.indexOf(str) !== -1;
	                }));
	            } else {
	                source(str, this._next.bind(this));
	            }
	        }
	    };

	    Mention.prototype.setPanelPos = function setPanelPos(pos) {
	        var offset = (0, _util.getScrollOffset)();
	        pos = {
	            x: pos.x + offset.x,
	            y: pos.y + offset.y
	        };
	        this.setState({
	            cursorPosition: pos
	        });
	    };

	    Mention.prototype._next = function _next(matchResult) {
	        if (this.props.formatter) {
	            matchResult = this.props.formatter(matchResult);
	        }
	        this.setState({
	            mentionList: matchResult
	        });
	    };

	    Mention.prototype.onKeyup = function onKeyup(e) {
	        if (this.state.panelVisible) {
	            var count = this.state.mentionList.length;
	            switch (e.keyCode) {
	                case _keycode.KEYCODE.UP:
	                    this.setState({
	                        panelIdx: this.state.panelIdx === 0 ? count - 1 : this.state.panelIdx - 1
	                    });
	                    break;
	                case _keycode.KEYCODE.DOWN:
	                    this.setState({
	                        panelIdx: this.state.panelIdx === count - 1 ? 0 : this.state.panelIdx + 1
	                    });
	                    break;
	                case _keycode.KEYCODE.ENTER:
	                    this.selectItem(this.state.mentionList[this.state.panelIdx]);
	                    break;
	                default:
	                    this.setState({
	                        mentionList: []
	                    });
	                    break;
	            }
	        }
	    };

	    Mention.prototype.render = function render() {
	        var props = this.props;
	        var panelPosition = {
	            left: this.state.cursorPosition.x,
	            top: this.state.cursorPosition.y
	        };
	        var width = props.width;
	        var height = props.height;
	        var prefixCls = props.prefixCls;

	        return _react2["default"].createElement('div', { onKeyUp: this.onKeyup.bind(this) }, _react2["default"].createElement(_editor2["default"], {
	            width: width,
	            height: height,
	            prefixCls: prefixCls,
	            panelVisible: this.state.panelVisible,
	            matcher: this.runMatcher.bind(this),
	            mentionTarget: this.state.target,
	            setCursorPos: this.setPanelPos.bind(this),
	            formatter: props.mentionFormatter,
	            onChange: props.onChange
	        }, props.children), _react2["default"].createElement(_panel2["default"], {
	            prefixCls: prefixCls,
	            visible: this.state.panelVisible,
	            idx: this.state.panelIdx,
	            list: this.state.mentionList,
	            onSelect: this.selectItem.bind(this),
	            formatter: props.panelFormatter,
	            style: panelPosition }));
	    };

	    return Mention;
	}(_react2["default"].Component);

	exports["default"] = Mention;

	Mention.displayName = 'uxcore-mention';
	Mention.propType = {
	    prefixCls: _react2["default"].PropTypes.string,
	    width: _react2["default"].PropTypes.number,
	    height: _react2["default"].PropTypes.number,
	    source: _react2["default"].PropTypes.oneOfType([_react2["default"].PropTypes.array, _react2["default"].PropTypes.func]),
	    delay: _react2["default"].PropTypes.number,
	    matchRange: _react2["default"].PropTypes.arrayOf(_react2["default"].PropTypes.number),
	    formatter: _react2["default"].PropTypes.func,
	    panelFormatter: _react2["default"].PropTypes.func,
	    mentionFormatter: _react2["default"].PropTypes.func,
	    onChange: _react2["default"].PropTypes.func
	};
	Mention.defaultProps = {
	    prefixCls: 'kuma-mention',
	    width: 200,
	    height: 100,
	    source: [],
	    delay: 100,
	    matchRange: [2, 8],
	    formatter: function formatter(data) {
	        return data;
	    },
	    panelFormatter: function panelFormatter(data) {
	        return '' + data.text;
	    },
	    mentionFormatter: function mentionFormatter(data) {
	        return '@' + data.text;
	    },
	    onChange: function onChange(e, value) {}
	};
		module.exports = exports['default'];

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Panel = function (_React$Component) {
		_inherits(Panel, _React$Component);

		function Panel(props) {
			_classCallCheck(this, Panel);

			return _possibleConstructorReturn(this, _React$Component.call(this, props));
		}

		Panel.prototype.render = function render() {
			var _this2 = this;

			var props = this.props;
			var onSelect = props.onSelect;
			var list = props.list;
			var style = props.style;
			var visible = props.visible;
			var idx = props.idx;
			var formatter = props.formatter;
			var prefixCls = props.prefixCls;

			var clsObj = {};
			clsObj[prefixCls + '-panel'] = true;
			clsObj[prefixCls + '-panel-visible'] = visible;
			var cls = (0, _classnames2["default"])(clsObj);
			return _react2["default"].createElement('ul', { className: cls, style: style }, list.map(function (item, index) {
				var itemClsObj = {};
				itemClsObj[prefixCls + '-panel-item'] = true;
				itemClsObj[prefixCls + '-panel-item-current'] = idx === index;
				var itemCls = (0, _classnames2["default"])(itemClsObj);
				return _react2["default"].createElement('li', { className: itemCls, key: index, onClick: onSelect.bind(_this2, item) }, _react2["default"].createElement('div', { dangerouslySetInnerHTML: { __html: formatter(item) } }));
			}));
		};

		return Panel;
	}(_react2["default"].Component);

	exports["default"] = Panel;

	Panel.displayName = 'uxcore-mention-panel';
	Panel.propType = {
		prefixCls: _react2["default"].PropTypes.string,
		list: _react2["default"].PropTypes.array,
		style: _react2["default"].PropTypes.object,
		idx: _react2["default"].PropTypes.number,
		onSelect: _react2["default"].PropTypes.func,
		formatter: _react2["default"].PropTypes.func
	};
	Panel.defaultProps = {
		prefixCls: '',
		list: [],
		style: {},
		idx: 0,
		onSelect: null,
		formatter: ''
	};
		module.exports = exports['default'];

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	__webpack_require__(464);

	var _util = __webpack_require__(465);

	var _keycode = __webpack_require__(466);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	// import rangy from 'rangy';

	var __store = {};
	//webkit browsers support 'plaintext-only'
	var contentEditableValue = function () {
	    var div = document.createElement('div');
	    div.setAttribute('contenteditable', 'PLAINTEXT-ONLY');
	    return div.contentEditable === 'plaintext-only' ? 'plaintext-only' : true;
	}();

	var Editor = function (_React$Component) {
	    _inherits(Editor, _React$Component);

	    function Editor(props) {
	        _classCallCheck(this, Editor);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    Editor.prototype.componentDidMount = function componentDidMount() {
	        // let editor = this.refs.editor;
	    };

	    Editor.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (nextProps.mentionTarget && (!this.props.mentionTarget || this.props.mentionTarget.t !== nextProps.mentionTarget.t)) {
	            this.insertMentionTarget(nextProps.mentionTarget.data);
	        }
	    };

	    Editor.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
	        if (this.props.children !== nextProps.children) {
	            return true;
	        }
	        return false;
	    };

	    Editor.prototype.onKeydown = function onKeydown(e) {
	        switch (e.keyCode) {
	            case _keycode.KEYCODE.UP:
	            case _keycode.KEYCODE.DOWN:
	                if (this.props.panelVisible) {
	                    e.preventDefault();
	                }
	                break;
	            case _keycode.KEYCODE.ENTER:
	                // insert br at the end of line
	                e.preventDefault();
	                if (!this.props.panelVisible) {
	                    var editor = this.refs.editor;
	                    var sel = rangy.getSelection();
	                    var range = sel.getRangeAt(0);

	                    // make sure the last element of the editor is br
	                    // refer to: http://stackoverflow.com/questions/6023307/dealing-with-line-breaks-on-contenteditable-div
	                    if (!editor.lastChild || editor.lastChild.nodeName.toLowerCase() !== 'br') {
	                        editor.appendChild(document.createElement('br'));
	                    }
	                    var nodeBr = document.createElement('br');
	                    range.deleteContents();
	                    range.insertNode(nodeBr);
	                    range.setStartAfter(nodeBr);
	                    sel.setSingleRange(range);
	                }
	                break;
	                // default:
	                //     this.props.onChange('xxx');
	                break;
	        }
	    };

	    Editor.prototype.onKeyup = function onKeyup(e) {
	        // if (this.props.panelVisible) {return;}
	        switch (e.keyCode) {
	            case _keycode.KEYCODE.UP:
	            case _keycode.KEYCODE.DOWN:
	                if (this.props.panelVisible) {
	                    e.preventDefault();
	                }
	                break;
	            case _keycode.KEYCODE.ENTER:
	                break;
	            default:
	                var sel = rangy.getSelection();
	                var range = sel.getRangeAt(0);
	                if (range.commonAncestorContainer.nodeType === 3) {
	                    range.setStart(range.commonAncestorContainer, 0);
	                    var originStr = range.toString();
	                    var str = (0, _util.parseStrByDelimiter)(originStr, '@');
	                    // send str to matcher
	                    this.props.matcher(str);
	                    if (str) {
	                        this.props.setCursorPos(range.getEndClientPos());
	                        // set range's start position before delimiter
	                        range.setStart(range.commonAncestorContainer, originStr.length - str.length - 1);
	                        // save range position
	                        __store.bookmark = range.getBookmark(range.commonAncestorContainer);
	                    }
	                }
	                break;
	        }
	    };

	    Editor.prototype.insertMentionTarget = function insertMentionTarget(mentionData) {
	        // console.log(mentionData);
	        var editor = this.refs.editor;
	        var sel = rangy.getSelection();
	        var formatter = this.props.formatter;
	        if (__store.bookmark) {
	            var range = sel.getRangeAt(0);
	            range.moveToBookmark(__store.bookmark);
	            var mentionNode = document.createElement('input');
	            mentionNode.setAttribute('type', 'button');
	            mentionNode.setAttribute('tabindex', '-1');
	            mentionNode.className = this.props.prefixCls + '-node';
	            mentionNode.value = formatter(mentionData);
	            // delete origin content in range
	            range.deleteContents();
	            range.insertNode(mentionNode);
	            range.collapseAfter(mentionNode);
	            range.select();
	            setTimeout(function () {
	                editor.focus();
	            }, 0);
	        }
	    };

	    Editor.prototype.render = function render() {
	        var style = {
	            width: this.props.width,
	            height: this.props.height
	        };
	        var className = (0, _classnames2["default"])(this.props.prefixCls, this.props.prefixCls + '-editor');
	        return _react2["default"].createElement('div', { className: className, ref: 'editor',
	            onKeyUp: this.onKeyup.bind(this),
	            onKeyDown: this.onKeydown.bind(this),
	            contentEditable: contentEditableValue,
	            onInput: this.emitChange.bind(this),
	            onBlur: this.emitChange.bind(this),
	            style: style }, this.props.children);
	    };

	    Editor.prototype.emitChange = function emitChange(e) {
	        var editor = this.refs.editor;
	        var nodes = editor.childNodes;
	        var content = '';
	        for (var i = 0, len = nodes.length; i < len; i += 1) {
	            if (nodes[i].nodeType === 1) {
	                var tagName = nodes[i].tagName.toLowerCase();
	                if (tagName === 'input') {
	                    content += ' ' + nodes[i].value + ' ';
	                } else if (tagName === 'br') {
	                    content += '\n';
	                }
	            } else if (nodes[i].nodeType === 3) {
	                content += nodes[i].textContent || nodes[i].nodeValue;
	            }
	        }
	        this.props.onChange(e, content);
	    };

	    return Editor;
	}(_react2["default"].Component);

	exports["default"] = Editor;

	Editor.displayName = 'uxcore-mention-editor';
	Editor.propType = {
	    prefixCls: _react2["default"].PropTypes.string,
	    width: _react2["default"].PropTypes.number,
	    height: _react2["default"].PropTypes.number,
	    mentionTarget: _react2["default"].PropTypes.object,
	    matcher: _react2["default"].PropTypes.func,
	    setCursorPos: _react2["default"].PropTypes.func,
	    panelVisible: _react2["default"].PropTypes.bool,
	    formatter: _react2["default"].PropTypes.func,
	    onChange: _react2["default"].PropTypes.func
	};
	Editor.defaultProps = {
	    prefixCls: '',
	    width: 200,
	    height: 100,
	    mentionTarget: null,
	    matcher: function matcher() {},
	    setCursorPos: function setCursorPos() {},
	    panelVisible: false,
	    formatter: function formatter() {},
	    onChange: function onChange() {}
	};
		module.exports = exports['default'];

/***/ },
/* 464 */
/***/ function(module, exports) {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	/**
	 * Position module for Rangy.
	 * Extensions to Range and Selection objects to provide access to pixel positions relative to the viewport or document.
	 *
	 * Part of Rangy, a cross-browser JavaScript range and selection library
	 * https://github.com/timdown/rangy
	 *
	 * Depends on Rangy core.
	 *
	 * Copyright %%build:year%%, Tim Down
	 * Licensed under the MIT license.
	 * Version: %%build:version%%
	 * Build date: %%build:date%%
	 */
	// import rangy from 'rangy';
	if (typeof rangy !== 'undefined') {
	    rangy.createModule("Position", ["WrappedSelection"], function (api, module) {
	        //var log = log4javascript.getLogger("rangy.position");

	        var NUMBER = "number",
	            UNDEF = "undefined";
	        var WrappedRange = api.WrappedRange;
	        var WrappedTextRange = api.WrappedTextRange;
	        var dom = api.dom,
	            util = api.util,
	            DomPosition = dom.DomPosition;

	        // Feature detection

	        //var caretPositionFromPointSupported = (typeof document.caretPositionFromPoint != UNDEF);

	        // Since Rangy can deal with multiple documents which could be in different modes, we have to do the checks every
	        // time, unless we cache a getScrollPosition function in each document. This would necessarily pollute the
	        // document's global namespace, which I'm choosing to view as a greater evil than a slight performance hit.
	        function getScrollPosition(win) {
	            var x = 0,
	                y = 0;
	            if (_typeof(win.pageXOffset) == NUMBER && _typeof(win.pageYOffset) == NUMBER) {
	                x = win.pageXOffset;
	                y = win.pageYOffset;
	            } else {
	                var doc = win.document;
	                var docEl = doc.documentElement;
	                var compatMode = doc.compatMode;
	                var scrollEl = typeof compatMode == "string" && compatMode.indexOf("CSS") >= 0 && docEl ? docEl : dom.getBody(doc);

	                if (scrollEl && _typeof(scrollEl.scrollLeft) == NUMBER && _typeof(scrollEl.scrollTop) == NUMBER) {
	                    try {
	                        x = scrollEl.scrollLeft;
	                        y = scrollEl.scrollTop;
	                    } catch (ex) {}
	                }
	            }
	            return { x: x, y: y };
	        }

	        function getAncestorElement(node, tagName) {
	            tagName = tagName.toLowerCase();
	            while (node) {
	                if (node.nodeType == 1 && node.tagName.toLowerCase() == tagName) {
	                    return node;
	                }
	                node = node.parentNode;
	            }
	            return null;
	        }

	        function Rect(top, right, bottom, left) {
	            this.top = top;
	            this.right = right;
	            this.bottom = bottom;
	            this.left = left;
	            this.width = right - left;
	            this.height = bottom - top;
	        }

	        function createRelativeRect(rect, dx, dy) {
	            return new Rect(rect.top + dy, rect.right + dx, rect.bottom + dy, rect.left + dx);
	        }

	        function adjustClientRect(rect, doc) {
	            // Older IEs have an issue with a two pixel margin on the body element
	            var dx = 0,
	                dy = 0;
	            var docEl = doc.documentElement,
	                body = dom.getBody(doc);
	            var container = docEl.clientWidth === 0 && _typeof(body.clientTop) == NUMBER ? body : docEl;
	            var clientLeft = container.clientLeft,
	                clientTop = container.clientTop;
	            if (clientLeft) {
	                dx = -clientLeft;
	            }
	            if (clientTop) {
	                dy = -clientTop;
	            }
	            return createRelativeRect(rect, dx, dy);
	        }

	        function mergeRects(rects) {
	            var tops = [],
	                bottoms = [],
	                lefts = [],
	                rights = [];
	            for (var i = 0, len = rects.length, rect; i < len; ++i) {
	                rect = rects[i];
	                if (rect) {
	                    tops.push(rect.top);
	                    bottoms.push(rect.bottom);
	                    lefts.push(rect.left);
	                    rights.push(rect.right);
	                }
	            }
	            return new Rect(Math.min.apply(Math, tops), Math.max.apply(Math, rights), Math.max.apply(Math, bottoms), Math.min.apply(Math, lefts));
	        }

	        function getTextRangePosition(doc, x, y) {
	            var textRange = dom.getBody(doc).createTextRange();
	            textRange.moveToPoint(x, y);
	            var range = new api.WrappedTextRange(textRange);
	            return new DomPosition(range.startContainer, range.startOffset);
	        }

	        function caretPositionFromPoint(doc, x, y) {
	            var pos = doc.caretPositionFromPoint(x, y);
	            return new DomPosition(pos.offsetNode, pos.offset);
	        }

	        function caretRangeFromPoint(doc, x, y) {
	            var range = doc.caretRangeFromPoint(x, y);
	            return new DomPosition(range.startContainer, range.startOffset);
	        }

	        function getLastRangeRect(range) {
	            var rects = (range.nativeRange || range).getClientRects();
	            return rects.length > 0 ? rects[rects.length - 1] : null;
	        }

	        function pointIsInOrAboveRect(x, y, rect) {
	            console.log("pointIsInOrAboveRect", x, y, Math.floor(rect.top), Math.floor(rect.right), Math.floor(rect.bottom), Math.floor(rect.left));
	            return y < rect.bottom && x >= rect.left && x <= rect.right;
	        }

	        function positionFromPoint(doc, x, y, favourPrecedingPosition) {
	            var el = doc.elementFromPoint(x, y);

	            console.log("elementFromPoint is ", el);

	            var range = api.createRange(doc);
	            range.selectNodeContents(el);
	            range.collapse(true);

	            var node = el.firstChild,
	                offset,
	                rect,
	                textLen;

	            if (!node) {
	                node = el.parentNode;
	                offset = dom.getNodeIndex(el);
	                if (!favourPrecedingPosition) {
	                    ++offset;
	                }
	            } else {
	                // Search through the text node children of el
	                main: while (node) {
	                    console.log(node);
	                    if (node.nodeType == 3) {
	                        // Go through the text node character by character
	                        for (offset = 0, textLen = node.length; offset <= textLen; ++offset) {
	                            range.setEnd(node, offset);
	                            rect = getLastRangeRect(range);
	                            if (rect && pointIsInOrAboveRect(x, y, rect)) {
	                                // We've gone past the point. Now we check which side (left or right) of the character the point is nearer to
	                                if (rect.right - x > x - rect.left) {
	                                    --offset;
	                                }
	                                break main;
	                            }
	                        }
	                    } else {
	                        // Handle elements
	                        range.setEndAfter(node);
	                        rect = getLastRangeRect(range);
	                        if (rect && pointIsInOrAboveRect(x, y, rect)) {
	                            offset = dom.getNodeIndex(node);
	                            node = el.parentNode;
	                            if (!favourPrecedingPosition) {
	                                ++offset;
	                            }
	                            break;
	                        }
	                    }

	                    node = node.nextSibling;
	                }
	                if (!node) {
	                    node = el;
	                    offset = el.childNodes.length;
	                }
	            }

	            return new DomPosition(node, offset);
	        }

	        function createCaretPositionFromPointGetter(doc) {
	            if (api.features.implementsTextRange) {
	                return getTextRangePosition;
	            } else if (_typeof(doc.caretPositionFromPoint) != UNDEF) {
	                return caretPositionFromPoint;
	            } else if (_typeof(doc.caretRangeFromPoint) != UNDEF) {
	                return caretRangeFromPoint;
	            } else if (_typeof(doc.elementFromPoint) != UNDEF && rangeSupportsGetClientRects) {
	                return positionFromPoint;
	            } else {
	                throw module.createError("createCaretPositionFromPointGetter(): Browser does not provide a recognised method to create a selection from pixel coordinates");
	            }
	        }

	        function createRangeFromPoints(startX, startY, endX, endY, doc) {
	            doc = dom.getContentDocument(doc, module, "createRangeFromPoints");
	            var positionFinder = createCaretPositionFromPointGetter(doc);
	            var startPos = positionFinder(doc, startX, startY, false);
	            var endPos = positionFinder(doc, endX, endY, true);
	            console.log(startPos.node, startPos.offset, endPos.node, endPos.offset);
	            var range = api.createRange(doc);
	            range.setStartAndEnd(startPos.node, startPos.offset, endPos.node, endPos.offset);
	            return range;
	        }

	        function moveSelectionToPoints(anchorX, anchorY, focusX, focusY, doc) {
	            var startX, startY, endX, endY;

	            // Detect backward selection for coordinates and flip start and end coordinates if necessary
	            var backward = focusY < anchorY || anchorY == focusY && focusX < anchorX;

	            if (backward) {
	                startX = focusX;
	                startY = focusY;
	                endX = anchorX;
	                endY = anchorY;
	            } else {
	                startX = anchorX;
	                startY = anchorY;
	                endX = focusX;
	                endY = focusY;
	            }

	            var sel = rangy.getSelection(doc);
	            var range = createRangeFromPoints(startX, startY, endX, endY, doc);
	            sel.setSingleRange(range);
	            return sel;
	        }

	        // Test that <span> elements support getBoundingClientRect
	        var span = document.createElement("span");
	        var elementSupportsGetBoundingClientRect = util.isHostMethod(span, "getBoundingClientRect");
	        span = null;

	        // Test for getBoundingClientRect support in Range
	        var rangeSupportsGetClientRects = false,
	            rangeSupportsGetBoundingClientRect = false;
	        if (api.features.implementsDomRange) {
	            var testRange = api.createNativeRange();
	            rangeSupportsGetClientRects = util.isHostMethod(testRange, "getClientRects");
	            rangeSupportsGetBoundingClientRect = util.isHostMethod(testRange, "getBoundingClientRect");
	        }

	        util.extend(api.features, {
	            rangeSupportsGetBoundingClientRect: rangeSupportsGetBoundingClientRect,
	            rangeSupportsGetClientRects: rangeSupportsGetClientRects,
	            elementSupportsGetBoundingClientRect: elementSupportsGetBoundingClientRect
	        });

	        var createClientBoundaryPosGetter = function createClientBoundaryPosGetter(isStart) {
	            return function () {
	                // var boundaryRange = this.cloneRange();
	                // boundaryRange.collapse(isStart);
	                // var rect = boundaryRange.getBoundingClientRect();
	                var rect = this.getBoundingClientRect();
	                return {
	                    x: rect[isStart ? "left" : "right"],
	                    y: rect[isStart ? "top" : "bottom"]
	                };
	            };
	        };

	        var rangeProto = api.rangePrototype;

	        if (api.features.implementsTextRange && elementSupportsGetBoundingClientRect) {
	            rangeProto.getBoundingClientRect = function () {
	                // We need a TextRange
	                var textRange = WrappedTextRange.rangeToTextRange(this);

	                // Work around table problems (table cell bounding rects seem not to count if TextRange spans cells)
	                var cells = this.getNodes([1], function (el) {
	                    return (/^t[dh]$/i.test(el.tagName)
	                    );
	                });

	                // Merge rects for each cell selected by the range into overall rect
	                var rect,
	                    rects = [];
	                if (cells.length > 0) {
	                    var lastTable = getAncestorElement(this.startContainer, "table");

	                    for (var i = 0, cell, tempTextRange, table, subRange; cell = cells[i]; ++i) {
	                        // Handle non-table sections of the range
	                        table = getAncestorElement(cell, "table");
	                        if (!lastTable || table != lastTable) {
	                            // There is a section of the range prior to the current table, or lying between tables.
	                            // Merge in its rect
	                            subRange = this.cloneRange();
	                            if (lastTable) {
	                                subRange.setStartAfter(lastTable);
	                            }
	                            subRange.setEndBefore(table);
	                            rects.push(WrappedTextRange.rangeToTextRange(subRange).getBoundingClientRect());
	                        }

	                        if (this.containsNode(cell)) {
	                            rects.push(cell.getBoundingClientRect());
	                        } else {
	                            tempTextRange = textRange.duplicate();
	                            tempTextRange.moveToElementText(cell);
	                            if (tempTextRange.compareEndPoints("StartToStart", textRange) == -1) {
	                                tempTextRange.setEndPoint("StartToStart", textRange);
	                            } else if (tempTextRange.compareEndPoints("EndToEnd", textRange) == 1) {
	                                tempTextRange.setEndPoint("EndToEnd", textRange);
	                            }
	                            rects.push(tempTextRange.getBoundingClientRect());
	                        }
	                        lastTable = table;
	                    }

	                    // Merge in the rect for any content lying after the final table
	                    var endTable = getAncestorElement(this.endContainer, "table");
	                    if (!endTable && lastTable) {
	                        subRange = this.cloneRange();
	                        subRange.setStartAfter(lastTable);
	                        rects.push(WrappedTextRange.rangeToTextRange(subRange).getBoundingClientRect());
	                    }
	                    rect = mergeRects(rects);
	                } else {
	                    rect = textRange.getBoundingClientRect();
	                }

	                return adjustClientRect(rect, dom.getDocument(this.startContainer));
	            };
	        } else if (api.features.implementsDomRange) {
	            var createWrappedRange = function createWrappedRange(range) {
	                return range instanceof WrappedRange ? range : new WrappedRange(range);
	            };
	            if (rangeSupportsGetBoundingClientRect) {
	                rangeProto.getBoundingClientRect = function () {
	                    var nativeRange = createWrappedRange(this).nativeRange;
	                    // Test for WebKit getBoundingClientRect bug (https://bugs.webkit.org/show_bug.cgi?id=65324)
	                    var rect = nativeRange.getBoundingClientRect() || nativeRange.getClientRects()[0];
	                    return adjustClientRect(rect, dom.getDocument(this.startContainer));
	                };

	                if (rangeSupportsGetClientRects) {

	                    createClientBoundaryPosGetter = function createClientBoundaryPosGetter(isStart) {
	                        return function () {
	                            var rect,
	                                nativeRange = createWrappedRange(this).nativeRange;
	                            var rects = nativeRange.getClientRects();

	                            if (rects.length === 0 && elementSupportsGetBoundingClientRect) {
	                                if (isStart) {}

	                                console.log(nativeRange, nativeRange.getClientRects(), nativeRange.getBoundingClientRect());
	                                if (this.collapsed && this.startContainer.nodeType === 1 && this.startOffset < this.startContainer.childNodes.length) {
	                                    var n = this.startContainer.childNodes[this.startOffset];
	                                    if (n.getClientRects) {
	                                        console.log(n, n.getClientRects(), this.startContainer.getClientRects());
	                                    }
	                                }
	                            }

	                            if (rects.length > 0) {
	                                if (isStart) {
	                                    rect = rects[0];
	                                    return { x: rect.left, y: rect.top };
	                                } else {
	                                    rect = rects[rects.length - 1];
	                                    return { x: rect.right, y: rect.bottom };
	                                }
	                            } else {
	                                throw module.createError("Cannot get position for range " + this.inspect());
	                            }
	                        };
	                    };
	                }
	            } else {
	                var getElementBoundingClientRect = elementSupportsGetBoundingClientRect ? function (el) {
	                    return adjustClientRect(el.getBoundingClientRect(), dom.getDocument(el));
	                } :

	                // This implementation is very naive. There are many browser quirks that make it extremely
	                // difficult to get accurate element coordinates in all situations
	                function (el) {
	                    var x = 0,
	                        y = 0,
	                        offsetEl = el,
	                        width = el.offsetWidth,
	                        height = el.offsetHeight;
	                    while (offsetEl) {
	                        x += offsetEl.offsetLeft;
	                        y += offsetEl.offsetTop;
	                        offsetEl = offsetEl.offsetParent;
	                    }

	                    return adjustClientRect(new Rect(y, x + width, y + height, x), dom.getDocument(el));
	                };

	                var getRectFromBoundaries = function getRectFromBoundaries(range) {
	                    var rect;
	                    range.splitBoundaries();
	                    var span = document.createElement("span");

	                    if (range.collapsed) {
	                        range.insertNode(span);
	                        rect = getElementBoundingClientRect(span);
	                        span.parentNode.removeChild(span);
	                    } else {
	                        // TODO: This isn't right. I'm not sure it can be made right sensibly. Consider what to do.
	                        // This doesn't consider all the line boxes it needs to consider.
	                        var workingRange = range.cloneRange();

	                        // Get the start rectangle
	                        workingRange.collapse(true);
	                        workingRange.insertNode(span);
	                        var startRect = getElementBoundingClientRect(span);
	                        span.parentNode.removeChild(span);

	                        // Get the end rectangle
	                        workingRange.collapseToPoint(range.endContainer, range.endOffset);
	                        workingRange.insertNode(span);
	                        var endRect = getElementBoundingClientRect(span);
	                        span.parentNode.removeChild(span);

	                        // Merge the start and end rects
	                        var rects = [startRect, endRect];

	                        // Merge in rectangles for all elements in the range
	                        var elements = range.getNodes([1], function (el) {
	                            return range.containsNode(el);
	                        });

	                        for (var i = 0, len = elements.length; i < len; ++i) {
	                            rects.push(getElementBoundingClientRect(elements[i]));
	                        }
	                        rect = mergeRects(rects);
	                    }

	                    // Clean up
	                    range.normalizeBoundaries();
	                    return rect;
	                };

	                rangeProto.getBoundingClientRect = function (range) {
	                    return getRectFromBoundaries(createWrappedRange(range));
	                };
	            }
	        }
	        function createDocumentBoundaryPosGetter(isStart) {
	            return function () {
	                var pos = this["get" + (isStart ? "Start" : "End") + "ClientPos"]();
	                var scrollPos = getScrollPosition(dom.getWindow(this.startContainer));
	                return { x: pos.x + scrollPos.x, y: pos.y + scrollPos.y };
	            };
	        }

	        util.extend(rangeProto, {
	            getBoundingDocumentRect: function getBoundingDocumentRect() {
	                var scrollPos = getScrollPosition(dom.getWindow(this.startContainer));
	                return createRelativeRect(this.getBoundingClientRect(), scrollPos.x, scrollPos.y);
	            },

	            getStartClientPos: createClientBoundaryPosGetter(true),
	            getEndClientPos: createClientBoundaryPosGetter(false),

	            getStartDocumentPos: createDocumentBoundaryPosGetter(true),
	            getEndDocumentPos: createDocumentBoundaryPosGetter(false)
	        });

	        // Add Selection methods
	        function compareRanges(r1, r2) {
	            return r1.compareBoundaryPoints(r2.START_TO_START, r2);
	        }

	        function createSelectionRectGetter(isDocument) {
	            return function () {
	                var rangeMethodName = "getBounding" + (isDocument ? "Document" : "Client") + "Rect";
	                var rects = [];
	                for (var i = 0; i < this.rangeCount; ++i) {
	                    rects.push(this.getRangeAt(i)[rangeMethodName]());
	                }
	                return mergeRects(rects);
	            };
	        }

	        function createSelectionBoundaryPosGetter(isStart, isDocument) {
	            return function () {
	                if (this.rangeCount === 0) {
	                    return null;
	                }

	                var posType = isDocument ? "Document" : "Client";

	                var ranges = this.getAllRanges();
	                if (ranges.length > 1) {
	                    // Order the ranges by position within the DOM
	                    ranges.sort(compareRanges);
	                }

	                return isStart ? ranges[0]["getStart" + posType + "Pos"]() : ranges[ranges.length - 1]["getEnd" + posType + "Pos"]();
	            };
	        }

	        util.extend(api.selectionPrototype, {
	            getBoundingClientRect: createSelectionRectGetter(false),
	            getBoundingDocumentRect: createSelectionRectGetter(true),

	            getStartClientPos: createSelectionBoundaryPosGetter(true, false),
	            getEndClientPos: createSelectionBoundaryPosGetter(false, false),

	            getStartDocumentPos: createSelectionBoundaryPosGetter(true, true),
	            getEndDocumentPos: createSelectionBoundaryPosGetter(false, true)
	        });

	        api.positionFromPoint = function (x, y, doc) {
	            doc = dom.getContentDocument(doc, module, "positionFromPoint");
	            return createCaretPositionFromPointGetter(doc)(doc, x, y);
	        };

	        api.createRangeFromPoints = createRangeFromPoints;
	        api.moveSelectionToPoints = moveSelectionToPoints;
	    });
		}

/***/ },
/* 465 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	/**
	 * [parseStrByDelimiter description]
	 * @method parseStrByDelimiter
	 * @param  {[string]} str       = ''  [origin str]
	 * @param  {[string]} delimiter = '@' [delimiter str]
	 * @return {[string]}
	 */
	function parseStrByDelimiter() {
		var str = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
		var delimiter = arguments.length <= 1 || arguments[1] === undefined ? '@' : arguments[1];

		var idx = str.lastIndexOf(delimiter);
		if (idx !== -1) {
			str = str.substring(idx + 1);
		} else {
			str = '';
		}
		return str;
	}

	/**
	 * [get window scroll offset]
	 * @method getScrollOffset
	 */
	function getScrollOffset() {
		var offset = {};
		if (window.pageXOffset) {
			offset.x = window.pageXOffset;
		} else {
			offset.x = document.documentElement.scrollLeft;
		}
		if (window.pageYOffset) {
			offset.y = window.pageYOffset;
		} else {
			offset.y = document.documentElement.scrollTop;
		}
		return offset;
	}

	exports.parseStrByDelimiter = parseStrByDelimiter;
	exports.getScrollOffset = getScrollOffset;

/***/ },
/* 466 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var KEYCODE = exports.KEYCODE = {
	   DOWN: 40,
	   UP: 38,
	   ESC: 27,
	   TAB: 9,
	   ENTER: 13,
	   CTRL: 17,
	   BACKSPACE: 8,
	   DELETE: 46
		};

/***/ },
/* 467 */
[853, 468],
/* 468 */
[854, 469],
/* 469 */
[843, 470, 498, 510, 511, 512],
/* 470 */
[844, 471, 489, 496],
/* 471 */
[845, 472, 493, 489, 496, 497],
/* 472 */
[810, 473, 474, 476, 477, 478, 479, 484, 485, 490, 491, 492],
/* 473 */
17,
/* 474 */
[811, 475],
/* 475 */
19,
/* 476 */
[812, 475],
/* 477 */
21,
/* 478 */
[813, 479],
/* 479 */
[814, 480],
/* 480 */
[815, 481, 482, 483],
/* 481 */
25,
/* 482 */
26,
/* 483 */
27,
/* 484 */
28,
/* 485 */
[816, 486],
/* 486 */
[817, 487],
/* 487 */
[818, 488, 489],
/* 488 */
32,
/* 489 */
33,
/* 490 */
34,
/* 491 */
35,
/* 492 */
36,
/* 493 */
[846, 494],
/* 494 */
[847, 495],
/* 495 */
403,
/* 496 */
404,
/* 497 */
[848, 489],
/* 498 */
[849, 499, 472, 489, 509],
/* 499 */
[850, 471, 489, 496, 500],
/* 500 */
[831, 501],
/* 501 */
[832, 502, 503, 508],
/* 502 */
77,
/* 503 */
[833, 504, 508],
/* 504 */
[834, 505, 506],
/* 505 */
80,
/* 506 */
[835, 507, 507],
/* 507 */
82,
/* 508 */
83,
/* 509 */
[851, 472],
/* 510 */
[852, 472],
/* 511 */
410,
/* 512 */
411,
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Multiselect Component for uxcore
	 * @author peijie.dpj
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(514);

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * MultiSelect Component for uxcore
	 * @author peijie.dpj
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var Dropdown = __webpack_require__(277);
	var CheckboxGroup = __webpack_require__(216);
	var Button = __webpack_require__(515);
	var assign = __webpack_require__(517);
	var classnames = __webpack_require__(5);

	var MultiSelect = function (_React$Component) {
	  _inherits(MultiSelect, _React$Component);

	  function MultiSelect(props) {
	    _classCallCheck(this, MultiSelect);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      visible: false
	    };

	    _this.lastValue = _this.props.value || [];
	    return _this;
	  }

	  MultiSelect.prototype.handleChange = function handleChange(value) {
	    var me = this,
	        props = this.props;

	    var newValue = [];
	    if (props.maxSelect && value.length > props.maxSelect) {
	      newValue = me.lastValue;
	    } else {
	      newValue = value;
	      me.lastValue = value;
	    }

	    props.onChange(newValue);
	  };

	  MultiSelect.prototype.handleSelectAll = function handleSelectAll() {
	    var me = this,
	        props = this.props;

	    var valueList = [];
	    if (props.disabled) {
	      return;
	    } else {
	      React.Children.map(props.children, function (item) {
	        if (!item.props.disabled || me._hasSelected.call(me, item.props.value)) {
	          valueList.push(item.props.value);
	        }
	      });
	    }

	    props.onChange(valueList);
	  };

	  MultiSelect.prototype.handleClear = function handleClear() {
	    var me = this,
	        props = this.props;

	    var valueList = [];

	    if (props.disabled) {
	      return;
	    } else {
	      React.Children.map(props.children, function (item) {
	        if (item.props.disabled && me._hasSelected.call(me, item.props.value)) {
	          valueList.push(item.props.value);
	        }
	      });
	    }

	    props.onChange(valueList);
	  };

	  MultiSelect.prototype.handleSubmit = function handleSubmit() {
	    var me = this,
	        props = this.props;

	    var labelList = [],
	        valueList = [];

	    React.Children.map(props.children, function (item) {
	      if (me._hasSelected.call(me, item.props.value)) {
	        labelList.push(item.props[props.optionLabelProp]);
	        valueList.push(item.props.value);
	      }
	    });

	    props.onSubmit(valueList, labelList);

	    me.setState({
	      visible: false
	    });
	  };

	  MultiSelect.prototype._processLabel = function _processLabel(type) {
	    var me = this,
	        props = this.props;

	    var res = [];
	    res = React.Children.map(props.children, function (item) {
	      if (me._hasSelected.call(me, item.props.value)) {
	        switch (type) {
	          case 'content':
	            return React.createElement('span', { className: props.prefixCls + '-selection__choice__content' }, item.props[props.optionLabelProp], React.createElement('span', { className: props.prefixCls + '-selection__choice__break' }, props.titleBreakStr));
	            break;

	          case 'title':
	            return item.props[props.optionLabelProp] + props.titleBreakStr;
	            break;
	        }
	      }
	    });

	    if (res.length == 0) {
	      switch (type) {
	        case 'content':
	          res = React.createElement('span', { className: props.prefixCls + '-selection__placeholder' }, props.placeholder);
	          break;

	        case 'title':
	          res = [props.placeholder];
	          break;
	      }
	    } else {
	      if (type == 'title') {
	        var len = res.length;
	        res[len - 1] = res[len - 1].slice(0, res[len - 1].length - 1);
	      }
	    }

	    return type == 'title' ? res.join('') : res;
	  };

	  MultiSelect.prototype._hasSelected = function _hasSelected(value) {
	    var me = this;

	    return me.props.value.indexOf(value) != -1;
	  };

	  MultiSelect.prototype._handleVisbleChange = function _handleVisbleChange(visible) {
	    var props = this.props;

	    if (props.disabled) {
	      return;
	    }
	    this.setState({
	      visible: visible
	    });
	  };

	  MultiSelect.prototype.render = function render() {
	    var _classnames, _classnames2, _classnames3, _classnames4;

	    var me = this,
	        props = this.props;

	    // 检查是否可以点击 全选
	    var canSelectItemNumbers = 0;

	    React.Children.map(props.children, function (item, index) {
	      !item.props.disabled && canSelectItemNumbers++;
	    });

	    var menu = React.createElement('div', { className: props.prefixCls + '-dropdown-border' }, React.createElement('div', { className: props.prefixCls + '-content' }, React.createElement(CheckboxGroup, { onChange: me.handleChange.bind(me),
	      value: props.value }, React.Children.map(props.children, function (item, index) {
	      return React.createElement(CheckboxGroup.Item, _extends({}, item.props, { key: index, jsxdisabled: props.disabled }));
	    }))), React.createElement('div', { className: props.prefixCls + '-footer' }, !!props.maxSelect && React.createElement('p', null, '最多选', props.maxSelect, '个'), React.createElement(Button, { additionClass: classnames((_classnames = {}, _classnames[props.prefixCls + '-button'] = true, _classnames[props.prefixCls + '-button-hidden'] = !props.showSelectAll, _classnames)),
	      size: 'small',
	      disabled: props.maxSelect && props.maxSelect < canSelectItemNumbers ? true : false,
	      onClick: me.handleSelectAll.bind(me) }, '全选'), React.createElement(Button, { additionClass: classnames((_classnames2 = {}, _classnames2[props.prefixCls + '-button'] = true, _classnames2[props.prefixCls + '-button-hidden'] = !props.showClear, _classnames2)),
	      size: 'small',
	      onClick: me.handleClear.bind(me) }, '清空'), React.createElement(Button, { additionClass: props.prefixCls + '-button',
	      size: 'small',
	      onClick: me.handleSubmit.bind(me) }, '确认')));

	    return React.createElement('div', null, React.createElement(Dropdown, { overlay: menu,
	      minOverlayWidthMatchTrigger: false,
	      visible: me.state.visible,
	      onVisibleChange: me._handleVisbleChange.bind(me),
	      trigger: ["click"],
	      overlayClassName: classnames((_classnames3 = {}, _classnames3[props.prefixCls + '-dropdown'] = true, _classnames3[props.dropdownClassName] = !!props.dropdownClassName, _classnames3)) }, React.createElement('span', { className: classnames((_classnames4 = {}, _classnames4[props.prefixCls] = true, _classnames4[props.className] = !!props.className, _classnames4[props.prefixCls + '-open'] = me.state.visible, _classnames4[props.prefixCls + '-disabled'] = props.disabled, _classnames4)) }, React.createElement('span', { className: props.prefixCls + '-selection ' + props.prefixCls + '-selection--multiple' }, React.createElement('span', { className: props.prefixCls + '-selection--multiple--content', title: me._processLabel('title') }, me._processLabel('content')), React.createElement('span', { className: props.prefixCls + '-arrow' })))));
	  };

	  return MultiSelect;
	}(React.Component);

	MultiSelect.defaultProps = {
	  prefixCls: 'kuma-multi-select',
	  className: '',
	  dropdownClassName: '',
	  value: [],
	  disabled: false,
	  placeholder: '',
	  titleBreakStr: "、",
	  optionLabelProp: "text",
	  showSelectAll: true,
	  showClear: true,
	  onChange: function onChange() {},
	  onSubmit: function onSubmit() {}
	};

	MultiSelect.propTypes = {
	  prefixCls: React.PropTypes.string,
	  className: React.PropTypes.string,
	  dropdownClassName: React.PropTypes.string,
	  value: React.PropTypes.array,
	  disabled: React.PropTypes.bool,
	  maxSelect: React.PropTypes.number,
	  placeholder: React.PropTypes.string,
	  titleBreakStr: React.PropTypes.string,
	  optionLabelProp: React.PropTypes.string,
	  showSelectAll: React.PropTypes.bool,
	  showClear: React.PropTypes.bool,
	  onChange: React.PropTypes.func,
	  onSubmit: React.PropTypes.func
	};

	// http://facebook.github.io/react/docs/reusable-components.html

	MultiSelect.Item = CheckboxGroup.Item;

	MultiSelect.displayName = "MultiSelect";

	module.exports = MultiSelect;

/***/ },
/* 515 */
[855, 516],
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var sizeMap = {
		small: 'sm',
		medium: '',
		large: 'lg'
	},
	    typeMap = {
		primary: 'primary',
		secondary: 'secondary',
		disabled: 'disabled'
	},
	    clsPrefix = 'kuma-button';

	var Button = function (_React$Component) {
		_inherits(Button, _React$Component);

		function Button(props) {
			_classCallCheck(this, Button);

			return _possibleConstructorReturn(this, _React$Component.call(this, props));
		}

		Button.prototype.render = function render() {
			var props = this.props;
			var type = props.disabled ? 'disabled' : props.type;
			var clsObj = {};
			if (props.className) {
				clsObj[props.className] = true;
			}
			if (sizeMap[props.size]) {
				clsObj[clsPrefix + '-' + sizeMap[props.size]] = true;
			}
			var className = (0, _classnames2["default"])(clsPrefix, clsPrefix + '-' + typeMap[type], clsObj);
			var propEvents = {};
			Object.keys(props).forEach(function (key) {
				if (key.indexOf('on') === 0) {
					propEvents[key] = props[key];
				}
			});
			return _react2["default"].createElement('button', _extends({ className: className, disabled: props.disabled }, propEvents), props.children);
		};

		return Button;
	}(_react2["default"].Component);

	Button.displayName = 'uxcore-button';
	Button.propTypes = {
		size: _react2["default"].PropTypes.oneOf(Object.keys(sizeMap)),
		type: _react2["default"].PropTypes.oneOf(Object.keys(typeMap)),
		disabled: _react2["default"].PropTypes.oneOf(['disabled', true, false]),
		className: _react2["default"].PropTypes.string
	};
	Button.defaultProps = {
		size: 'medium',
		type: 'primary',
		disabled: false,
		className: ''
	};

		module.exports = Button;

/***/ },
/* 517 */
33,
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Pagination Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(519);

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Forked from project rc-pagination
	 * @maintainer eternalsky
	 */

	var Select = __webpack_require__(520);
	var Pager = __webpack_require__(590);
	var Options = __webpack_require__(591);
	var KEYCODE = __webpack_require__(592);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var i18n = __webpack_require__(593);

	function noop() {}

	var Pagination = function (_React$Component) {
	  _inherits(Pagination, _React$Component);

	  function Pagination(props) {
	    _classCallCheck(this, Pagination);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      current: props.current,
	      _current: props.current,
	      pageSize: props.pageSize
	    };

	    ['render', '_handleChange', '_handleKeyUp', '_handleKeyDown', '_changePageSize', '_isValid', '_prev', '_next', '_hasPrev', '_hasNext', '_jumpPrev', '_jumpNext'].forEach(function (method) {
	      return _this[method] = _this[method].bind(_this);
	    });
	    return _this;
	  }

	  Pagination.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.current != this.props.current) {
	      this.setState({
	        current: nextProps.current,
	        _current: nextProps.current
	      });
	    }

	    if (nextProps.pageSize != this.props.pageSize) {
	      this.setState({
	        pageSize: nextProps.pageSize
	      });
	    }
	  };

	  Pagination.prototype.renderTotal = function renderTotal() {
	    var prefix = this.props.locale == 'zh-cn' ? "共" : "";
	    if (this.props.showTotal) {
	      return React.createElement('li', { className: this.props.prefixCls + "-total" }, prefix + this.props.total + i18n[this.props.locale]['item']);
	    }
	  };

	  Pagination.prototype.render = function render() {
	    var props = this.props;

	    var prefixCls = props.prefixCls;
	    var allPages = this._calcPage();
	    var pagerList = [];
	    var jumpPrev = null;
	    var jumpNext = null;
	    var firstPager = null;
	    var lastPager = null;

	    if (props.simple) {
	      return React.createElement('ul', { className: prefixCls + ' ' + prefixCls + '-simple ' + props.className }, React.createElement('div', { title: 'Page ' + this.state.current + ' of ' + allPages, className: prefixCls + '-simple-pager' }, React.createElement('span', { className: prefixCls + '-current' }, this.state._current), React.createElement('span', { className: prefixCls + '-slash' }, '/'), allPages), React.createElement('li', { title: 'Previous Page', onClick: this._prev, className: (this._hasPrev() ? '' : prefixCls + '-disabled ') + (prefixCls + '-prev') }, React.createElement('a', { className: 'kuma-icon kuma-icon-triangle-left' })), React.createElement('li', { title: 'Next Page', onClick: this._next, className: (this._hasNext() ? '' : prefixCls + '-disabled ') + (prefixCls + '-next') }, React.createElement('a', { className: 'kuma-icon kuma-icon-triangle-right' })));
	    }

	    if (allPages <= 9) {
	      for (var i = 1; i <= allPages; i++) {
	        var active = this.state.current === i;
	        pagerList.push(React.createElement(Pager, { rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, i), key: i, page: i, active: active }));
	      }
	    } else {
	      jumpPrev = React.createElement('li', { title: 'Previous 5 Page', key: 'prev', onClick: this._jumpPrev, className: prefixCls + '-jump-prev' }, React.createElement('a', null));
	      jumpNext = React.createElement('li', { title: 'Next 5 Page', key: 'next', onClick: this._jumpNext, className: prefixCls + '-jump-next' }, React.createElement('a', null));
	      lastPager = React.createElement(Pager, { last: true, rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, allPages), key: allPages, page: allPages, active: false });
	      firstPager = React.createElement(Pager, { rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, 1), key: 1, page: 1, active: false });

	      var current = this.state.current;

	      var left = Math.max(1, current - 2);
	      var right = Math.min(current + 2, allPages);

	      if (current - 1 <= 2) {
	        right = 1 + 4;
	      }

	      if (allPages - current <= 2) {
	        left = allPages - 4;
	      }

	      for (var _i = left; _i <= right; _i++) {
	        var _active = current === _i;
	        pagerList.push(React.createElement(Pager, { rootPrefixCls: prefixCls, onClick: this._handleChange.bind(this, _i), key: _i, page: _i, active: _active }));
	      }

	      if (current - 1 >= 4) {
	        pagerList.unshift(jumpPrev);
	      }
	      if (allPages - current >= 4) {
	        pagerList.push(jumpNext);
	      }

	      if (left !== 1) {
	        pagerList.unshift(firstPager);
	      }
	      if (right !== allPages) {
	        pagerList.push(lastPager);
	      }
	    }

	    return React.createElement('ul', { className: prefixCls + ' ' + props.className,
	      unselectable: 'unselectable' }, React.createElement('li', { title: 'Previous Page', onClick: this._prev, className: (this._hasPrev() ? '' : prefixCls + '-disabled ') + (prefixCls + '-prev') }, React.createElement('a', { className: 'kuma-icon kuma-icon-triangle-left' })), pagerList, React.createElement('li', { title: 'Next Page', onClick: this._next, className: (this._hasNext() ? '' : prefixCls + '-disabled ') + (prefixCls + '-next') }, React.createElement('a', { className: 'kuma-icon kuma-icon-triangle-right' })), this.renderTotal(), React.createElement(Options, { rootPrefixCls: prefixCls,
	      locale: props.locale,
	      selectComponentClass: props.selectComponentClass,
	      selectPrefixCls: props.selectPrefixCls,
	      changeSize: this.props.showSizeChanger ? this._changePageSize.bind(this) : null,
	      current: this.state.current,
	      pageSize: props.pageSize,
	      sizeOptions: props.sizeOptions,
	      quickGo: this.props.showQuickJumper ? this._handleChange.bind(this) : null }));
	  };

	  // private methods

	  Pagination.prototype._calcPage = function _calcPage(p) {
	    var pageSize = p;
	    if (typeof pageSize === 'undefined') {
	      pageSize = this.state.pageSize;
	    }
	    return Math.floor((this.props.total - 1) / pageSize) + 1;
	  };

	  Pagination.prototype._isValid = function _isValid(page) {
	    return typeof page === 'number' && page >= 1 && page !== this.state.current;
	  };

	  Pagination.prototype._handleKeyDown = function _handleKeyDown(evt) {
	    if (evt.keyCode === KEYCODE.ARROW_UP || evt.keyCode === KEYCODE.ARROW_DOWN) {
	      evt.preventDefault();
	    }
	  };

	  Pagination.prototype._handleKeyUp = function _handleKeyUp(evt) {
	    var _val = evt.target.value;
	    var val = void 0;

	    if (_val === '') {
	      val = _val;
	    } else if (isNaN(Number(_val))) {
	      val = this.state._current;
	    } else {
	      val = Number(_val);
	    }

	    this.setState({
	      _current: val
	    });

	    if (evt.keyCode === KEYCODE.ENTER) {
	      this._handleChange(val);
	    } else if (evt.keyCode === KEYCODE.ARROW_UP) {
	      this._handleChange(val - 1);
	    } else if (evt.keyCode === KEYCODE.ARROW_DOWN) {
	      this._handleChange(val + 1);
	    }
	  };

	  Pagination.prototype._changePageSize = function _changePageSize(size) {
	    if (typeof size === 'number') {
	      var current = this.state.current;

	      this.setState({
	        pageSize: size
	      });

	      if (this.state.current > this._calcPage(size)) {
	        current = this._calcPage(size);
	        this.setState({
	          current: current,
	          _current: current
	        });
	      }

	      this.props.onShowSizeChange(current, size);
	    }
	  };

	  Pagination.prototype._handleChange = function _handleChange(p) {
	    var page = p;
	    var me = this;
	    if (this._isValid(page)) {
	      if (page > this._calcPage()) {
	        page = this._calcPage();
	      }
	      this.setState({
	        current: page,
	        _current: page
	      }, function () {
	        me.props.onChange(page);
	      });

	      return page;
	    }

	    return this.state.current;
	  };

	  Pagination.prototype._prev = function _prev() {
	    if (this._hasPrev()) {
	      this._handleChange(this.state.current - 1);
	    }
	  };

	  Pagination.prototype._next = function _next() {
	    if (this._hasNext()) {
	      this._handleChange(this.state.current + 1);
	    }
	  };

	  Pagination.prototype._jumpPrev = function _jumpPrev() {
	    this._handleChange(Math.max(1, this.state.current - 5));
	  };

	  Pagination.prototype._jumpNext = function _jumpNext() {
	    this._handleChange(Math.min(this._calcPage(), this.state.current + 5));
	  };

	  Pagination.prototype._hasPrev = function _hasPrev() {
	    return this.state.current > 1;
	  };

	  Pagination.prototype._hasNext = function _hasNext() {
	    return this.state.current < this._calcPage();
	  };

	  return Pagination;
	}(React.Component);

	Pagination.propTypes = {
	  current: React.PropTypes.number,
	  total: React.PropTypes.number,
	  locale: React.PropTypes.string,
	  showTotal: React.PropTypes.bool,
	  pageSize: React.PropTypes.number,
	  sizeOptions: React.PropTypes.array,
	  onChange: React.PropTypes.func,
	  showSizeChanger: React.PropTypes.bool,
	  onShowSizeChange: React.PropTypes.func,
	  selectComponentClass: React.PropTypes.func,
	  showQuickJumper: React.PropTypes.bool
	};

	Pagination.defaultProps = {
	  current: 1,
	  total: 0,
	  locale: 'zh-cn',
	  showTotal: false,
	  pageSize: 10,
	  sizeOptions: [10, 20, 30, 40],
	  onChange: noop,
	  className: '',
	  selectPrefixCls: 'kuma-select2',
	  prefixCls: 'kuma-page',
	  selectComponentClass: Select,
	  showQuickJumper: false,
	  showSizeChanger: false,
	  onShowSizeChange: noop
	};

	Pagination.displayName = 'Pagination';

	module.exports = Pagination;

/***/ },
/* 520 */
[842, 521],
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var RcSelect = __webpack_require__(522);
	var assign = __webpack_require__(541);

	var Select2 = function (_RcSelect) {
	    _inherits(Select2, _RcSelect);

	    function Select2(props) {
	        _classCallCheck(this, Select2);

	        return _possibleConstructorReturn(this, _RcSelect.call(this, props));
	    }

	    return Select2;
	}(RcSelect);

	Select2.displayName = 'Select2';
	Select2.defaultProps = assign({}, RcSelect.defaultProps, {
	    prefixCls: "kuma-select2",
	    optionLabelProp: "children",
	    transitionName: 'slideUp'
	});

		module.exports = Select2;

/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _Select = __webpack_require__(523);

	var _Select2 = _interopRequireDefault(_Select);

	var _Option = __webpack_require__(589);

	var _Option2 = _interopRequireDefault(_Option);

	var _OptGroup = __webpack_require__(545);

	var _OptGroup2 = _interopRequireDefault(_OptGroup);

	_Select2['default'].Option = _Option2['default'];
	_Select2['default'].OptGroup = _OptGroup2['default'];
	exports['default'] = _Select2['default'];
	module.exports = exports['default'];

/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcUtil = __webpack_require__(524);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _OptGroup = __webpack_require__(545);

	var _OptGroup2 = _interopRequireDefault(_OptGroup);

	var _rcAnimate = __webpack_require__(546);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _util = __webpack_require__(555);

	var _SelectTrigger = __webpack_require__(570);

	var _SelectTrigger2 = _interopRequireDefault(_SelectTrigger);

	function noop() {}

	function filterFn(input, child) {
	  return String((0, _util.getPropValue)(child, this.props.optionFilterProp)).indexOf(input) > -1;
	}

	function saveRef(name, component) {
	  this[name] = component;
	}

	var Select = _react2['default'].createClass({
	  displayName: 'Select',

	  propTypes: {
	    defaultActiveFirstOption: _react.PropTypes.bool,
	    multiple: _react.PropTypes.bool,
	    filterOption: _react.PropTypes.any,
	    showSearch: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    showArrow: _react.PropTypes.bool,
	    tags: _react.PropTypes.bool,
	    transitionName: _react.PropTypes.string,
	    optionLabelProp: _react.PropTypes.string,
	    optionFilterProp: _react.PropTypes.string,
	    animation: _react.PropTypes.string,
	    choiceTransitionName: _react.PropTypes.string,
	    onChange: _react.PropTypes.func,
	    onSelect: _react.PropTypes.func,
	    onSearch: _react.PropTypes.func,
	    searchPlaceholder: _react.PropTypes.string,
	    placeholder: _react.PropTypes.any,
	    onDeselect: _react.PropTypes.func,
	    value: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.string]),
	    defaultValue: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.string]),
	    label: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.any]),
	    defaultLabel: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.any]),
	    dropdownStyle: _react.PropTypes.object,
	    maxTagTextLength: _react.PropTypes.number
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-select',
	      filterOption: filterFn,
	      defaultActiveFirstOption: true,
	      showSearch: true,
	      allowClear: false,
	      placeholder: '',
	      searchPlaceholder: '',
	      defaultValue: [],
	      onChange: noop,
	      onSelect: noop,
	      onSearch: noop,
	      onDeselect: noop,
	      showArrow: true,
	      dropdownMatchSelectWidth: true,
	      dropdownStyle: {},
	      dropdownMenuStyle: {},
	      optionFilterProp: 'value',
	      optionLabelProp: 'value',
	      notFoundContent: 'Not Found'
	    };
	  },

	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var value = [];
	    if ('value' in props) {
	      value = (0, _util.toArray)(props.value);
	    } else {
	      value = (0, _util.toArray)(props.defaultValue);
	    }
	    var label = this.getLabelFromProps(props, value, 1);
	    var inputValue = '';
	    if (props.combobox) {
	      inputValue = value[0] || '';
	    }
	    this.saveInputRef = saveRef.bind(this, 'inputInstance');
	    return { value: value, inputValue: inputValue, label: label };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ('value' in nextProps) {
	      var value = (0, _util.toArray)(nextProps.value);
	      var label = this.getLabelFromProps(nextProps, value);
	      this.setState({
	        value: value,
	        label: label
	      });
	      if (nextProps.combobox) {
	        this.setState({
	          inputValue: value[0] || ''
	        });
	      }
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    var state = this.state;
	    var props = this.props;
	    if (state.open && (0, _util.isMultipleOrTags)(props)) {
	      var inputNode = this.getInputDOMNode();
	      if (inputNode.value) {
	        inputNode.style.width = '';
	        inputNode.style.width = inputNode.scrollWidth + 'px';
	      } else {
	        inputNode.style.width = '';
	      }
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this.dropdownContainer) {
	      _reactDom2['default'].unmountComponentAtNode(this.dropdownContainer);
	      document.body.removeChild(this.dropdownContainer);
	      this.dropdownContainer = null;
	    }
	  },

	  onInputChange: function onInputChange(event) {
	    var val = event.target.value;
	    var props = this.props;
	    this.setState({
	      inputValue: val,
	      open: true
	    });
	    if ((0, _util.isCombobox)(props)) {
	      this.fireChange([val], [val]);
	    }
	    props.onSearch(val);
	  },

	  onDropdownVisibleChange: function onDropdownVisibleChange(open) {
	    this.setOpenState(open);
	  },

	  // combobox ignore
	  onKeyDown: function onKeyDown(event) {
	    var props = this.props;
	    if (props.disabled) {
	      return;
	    }
	    var keyCode = event.keyCode;
	    if (this.state.open && !this.getInputDOMNode()) {
	      this.onInputKeyDown(event);
	    } else if (keyCode === _rcUtil.KeyCode.ENTER || keyCode === _rcUtil.KeyCode.DOWN) {
	      this.setOpenState(true);
	      event.preventDefault();
	    }
	  },

	  onInputKeyDown: function onInputKeyDown(event) {
	    var props = this.props;
	    var state = this.state;
	    var keyCode = event.keyCode;
	    if ((0, _util.isMultipleOrTags)(props) && !event.target.value && keyCode === _rcUtil.KeyCode.BACKSPACE) {
	      var value = state.value.concat();
	      if (value.length) {
	        var label = state.label.concat();
	        var popValue = value.pop();
	        label.pop();
	        props.onDeselect(popValue);
	        this.fireChange(value, label);
	      }
	      return;
	    }

	    if (keyCode === _rcUtil.KeyCode.DOWN) {
	      if (!state.open) {
	        this.openIfHasChildren();
	        event.preventDefault();
	        event.stopPropagation();
	        return;
	      }
	    } else if (keyCode === _rcUtil.KeyCode.ESC) {
	      if (state.open) {
	        this.setOpenState(false);
	        event.preventDefault();
	        event.stopPropagation();
	      }
	      return;
	    }

	    if (state.open) {
	      var menu = this.refs.trigger.getInnerMenu();
	      if (menu && menu.onKeyDown(event)) {
	        event.preventDefault();
	        event.stopPropagation();
	      }
	    }
	  },

	  onMenuSelect: function onMenuSelect(_ref) {
	    var item = _ref.item;

	    var value = this.state.value;
	    var label = this.state.label;
	    var props = this.props;
	    var selectedValue = (0, _util.getValuePropValue)(item);
	    var selectedLabel = this.getLabelFromOption(item);
	    props.onSelect(selectedValue, item);
	    if ((0, _util.isMultipleOrTags)(props)) {
	      if (value.indexOf(selectedValue) !== -1) {
	        return;
	      }
	      value = value.concat([selectedValue]);
	      label = label.concat([selectedLabel]);
	    } else {
	      if (value[0] === selectedValue) {
	        this.setOpenState(false);
	        return;
	      }
	      value = [selectedValue];
	      label = [selectedLabel];
	      this.setOpenState(false);
	    }
	    this.fireChange(value, label);
	    this.setState({
	      inputValue: ''
	    });
	    if ((0, _util.isCombobox)(props)) {
	      this.setState({
	        inputValue: (0, _util.getPropValue)(item, props.optionLabelProp)
	      });
	    }
	  },

	  onMenuDeselect: function onMenuDeselect(_ref2) {
	    var item = _ref2.item;
	    var domEvent = _ref2.domEvent;

	    if (domEvent.type === 'click') {
	      this.removeSelected((0, _util.getValuePropValue)(item));
	    }
	    if (!(0, _util.isMultipleOrTags)(this.props)) {
	      this.setOpenState(false);
	    }
	    this.setState({
	      inputValue: ''
	    });
	  },

	  onPlaceholderClick: function onPlaceholderClick() {
	    this.getInputDOMNode().focus();
	  },

	  onClearSelection: function onClearSelection(event) {
	    var props = this.props;
	    var state = this.state;
	    if (props.disabled) {
	      return;
	    }
	    event.stopPropagation();
	    if (state.inputValue || state.value.length) {
	      this.fireChange([], []);
	      this.setOpenState(false);
	      this.setState({
	        inputValue: ''
	      });
	    }
	  },

	  getLabelBySingleValue: function getLabelBySingleValue(children, value) {
	    var _this = this;

	    if (value === undefined) {
	      return null;
	    }
	    var label = null;
	    _react2['default'].Children.forEach(children, function (child) {
	      if (child.type === _OptGroup2['default']) {
	        var maybe = _this.getLabelBySingleValue(child.props.children, value);
	        if (maybe !== null) {
	          label = maybe;
	        }
	      } else if ((0, _util.getValuePropValue)(child) === value) {
	        label = _this.getLabelFromOption(child);
	      }
	    });
	    return label;
	  },

	  getLabelFromOption: function getLabelFromOption(child) {
	    return (0, _util.getPropValue)(child, this.props.optionLabelProp);
	  },

	  getLabelFromProps: function getLabelFromProps(props, value, init) {
	    var label = [];
	    if ('label' in props) {
	      label = (0, _util.toArray)(props.label);
	    } else if (init && 'defaultLabel' in props) {
	      label = (0, _util.toArray)(props.defaultLabel);
	    } else {
	      label = this.getLabelByValue(props.children, value);
	    }
	    return label;
	  },

	  getVLForOnChange: function getVLForOnChange(vls) {
	    if (vls !== undefined) {
	      return (0, _util.isMultipleOrTags)(this.props) ? vls : vls[0];
	    }
	    return vls;
	  },

	  getLabelByValue: function getLabelByValue(children, values) {
	    var _this2 = this;

	    return values.map(function (value) {
	      var label = _this2.getLabelBySingleValue(children, value);
	      if (label === null) {
	        return value;
	      }
	      return label;
	    });
	  },

	  getDropdownContainer: function getDropdownContainer() {
	    if (!this.dropdownContainer) {
	      this.dropdownContainer = document.createElement('div');
	      document.body.appendChild(this.dropdownContainer);
	    }
	    return this.dropdownContainer;
	  },

	  getSearchPlaceholderElement: function getSearchPlaceholderElement(hidden) {
	    var props = this.props;
	    if (props.searchPlaceholder) {
	      return _react2['default'].createElement('span', {
	        style: { display: hidden ? 'none' : 'block' },
	        onClick: this.onPlaceholderClick,
	        className: props.prefixCls + '-search__field__placeholder' }, props.searchPlaceholder);
	    }
	    return null;
	  },

	  getInputElement: function getInputElement() {
	    var props = this.props;
	    return _react2['default'].createElement('span', { className: props.prefixCls + '-search__field__wrap' }, _react2['default'].createElement('input', { ref: this.saveInputRef,
	      onChange: this.onInputChange,
	      onKeyDown: this.onInputKeyDown,
	      value: this.state.inputValue,
	      disabled: props.disabled,
	      className: props.prefixCls + '-search__field',
	      role: 'textbox' }), (0, _util.isMultipleOrTags)(props) ? null : this.getSearchPlaceholderElement(!!this.state.inputValue));
	  },

	  getInputDOMNode: function getInputDOMNode() {
	    return this.inputInstance;
	  },

	  getPopupDOMNode: function getPopupDOMNode() {
	    return this.refs.trigger.getPopupDOMNode();
	  },

	  getPopupMenuComponent: function getPopupMenuComponent() {
	    return this.refs.trigger.getInnerMenu();
	  },

	  setOpenState: function setOpenState(open) {
	    var _this3 = this;

	    var refs = this.refs;
	    this.setState({
	      open: open
	    }, function () {
	      if (open || (0, _util.isMultipleOrTagsOrCombobox)(_this3.props)) {
	        if (_this3.getInputDOMNode()) {
	          _this3.getInputDOMNode().focus();
	        }
	      } else if (refs.selection) {
	        refs.selection.focus();
	      }
	    });
	  },

	  removeSelected: function removeSelected(selectedValue) {
	    var props = this.props;
	    if (props.disabled) {
	      return;
	    }
	    var label = this.state.label.concat();
	    var index = this.state.value.indexOf(selectedValue);
	    var value = this.state.value.filter(function (singleValue) {
	      return singleValue !== selectedValue;
	    });
	    if (index !== -1) {
	      label.splice(index, 1);
	    }
	    var canMultiple = (0, _util.isMultipleOrTags)(props);
	    if (canMultiple) {
	      props.onDeselect(selectedValue);
	    }
	    this.fireChange(value, label);
	  },

	  openIfHasChildren: function openIfHasChildren() {
	    var props = this.props;
	    if (_react2['default'].Children.count(props.children) || (0, _util.isSingleMode)(props)) {
	      this.setOpenState(true);
	    }
	  },

	  fireChange: function fireChange(value, label) {
	    var props = this.props;
	    if (!('value' in props)) {
	      this.setState({
	        value: value, label: label
	      });
	    }
	    props.onChange(this.getVLForOnChange(value), this.getVLForOnChange(label));
	  },
	  renderTopControlNode: function renderTopControlNode() {
	    var _this4 = this;

	    var value = this.state.value;
	    var label = this.state.label;
	    var props = this.props;
	    var choiceTransitionName = props.choiceTransitionName;
	    var prefixCls = props.prefixCls;
	    var maxTagTextLength = props.maxTagTextLength;

	    // single and not combobox, input is inside dropdown
	    if ((0, _util.isSingleMode)(props)) {
	      var placeholder = _react2['default'].createElement('span', { key: 'placeholder',
	        className: prefixCls + '-selection__placeholder' }, props.placeholder);
	      var innerNode = placeholder;
	      if (this.state.label[0]) {
	        innerNode = _react2['default'].createElement('span', { key: 'value' }, this.state.label[0]);
	      }
	      return _react2['default'].createElement('span', { className: prefixCls + '-selection__rendered' }, innerNode);
	    }

	    var selectedValueNodes = [];
	    if ((0, _util.isMultipleOrTags)(props)) {
	      selectedValueNodes = value.map(function (singleValue, index) {
	        var content = label[index];
	        var title = content;
	        if (maxTagTextLength && typeof content === 'string' && content.length > maxTagTextLength) {
	          content = content.slice(0, maxTagTextLength) + '...';
	        }
	        return _react2['default'].createElement('li', { className: prefixCls + '-selection__choice',
	          key: singleValue,
	          title: title }, _react2['default'].createElement('span', { className: prefixCls + '-selection__choice__content' }, content), _react2['default'].createElement('span', { className: prefixCls + '-selection__choice__remove',
	          onClick: _this4.removeSelected.bind(_this4, singleValue) }));
	      });
	    }
	    selectedValueNodes.push(_react2['default'].createElement('li', { className: prefixCls + '-search ' + prefixCls + '-search--inline', key: '__input' }, this.getInputElement()));
	    var className = prefixCls + '-selection__rendered';
	    if ((0, _util.isMultipleOrTags)(props) && choiceTransitionName) {
	      return _react2['default'].createElement(_rcAnimate2['default'], { className: className,
	        component: 'ul',
	        transitionName: choiceTransitionName }, selectedValueNodes);
	    }
	    return _react2['default'].createElement('ul', { className: className }, selectedValueNodes);
	  },

	  render: function render() {
	    var _rootCls;

	    var props = this.props;
	    var multiple = (0, _util.isMultipleOrTags)(props);
	    var state = this.state;
	    var className = props.className;
	    var disabled = props.disabled;
	    var allowClear = props.allowClear;
	    var prefixCls = props.prefixCls;

	    var ctrlNode = this.renderTopControlNode();
	    var extraSelectionProps = {};
	    if (!(0, _util.isCombobox)(props)) {
	      extraSelectionProps = {
	        onKeyDown: this.onKeyDown,
	        tabIndex: 0
	      };
	    }
	    var rootCls = (_rootCls = {}, _defineProperty(_rootCls, className, !!className), _defineProperty(_rootCls, prefixCls, 1), _defineProperty(_rootCls, prefixCls + '-open', state.open), _defineProperty(_rootCls, prefixCls + '-combobox', (0, _util.isCombobox)(props)), _defineProperty(_rootCls, prefixCls + '-disabled', disabled), _defineProperty(_rootCls, prefixCls + '-enabled', !disabled), _rootCls);

	    var clear = _react2['default'].createElement('span', { key: 'clear',
	      className: prefixCls + '-selection__clear',
	      onClick: this.onClearSelection });
	    return _react2['default'].createElement(_SelectTrigger2['default'], _extends({}, props, {
	      options: props.children,
	      multiple: multiple,
	      disabled: disabled,
	      visible: state.open,
	      inputValue: state.inputValue,
	      inputElement: this.getInputElement(),
	      value: state.value,
	      onDropdownVisibleChange: this.onDropdownVisibleChange,
	      onMenuSelect: this.onMenuSelect,
	      onMenuDeselect: this.onMenuDeselect,
	      ref: 'trigger' }), _react2['default'].createElement('span', {
	      style: props.style,
	      className: (0, _classnames2['default'])(rootCls) }, _react2['default'].createElement('span', _extends({ ref: 'selection',
	      key: 'selection',
	      className: prefixCls + '-selection ' + prefixCls + '-selection--' + (multiple ? 'multiple' : 'single'),
	      role: 'combobox',
	      'aria-autocomplete': 'list',
	      'aria-haspopup': 'true',
	      'aria-expanded': state.open
	    }, extraSelectionProps), ctrlNode, allowClear && !(0, _util.isMultipleOrTags)(props) ? clear : null, multiple || !props.showArrow ? null : _react2['default'].createElement('span', { key: 'arrow', className: prefixCls + '-arrow', tabIndex: '-1', style: { outline: 'none' } }, _react2['default'].createElement('b', null)), multiple ? this.getSearchPlaceholderElement(!!this.state.inputValue || this.state.value.length) : null)));
	  }
	});

	exports['default'] = Select;
	module.exports = exports['default'];

/***/ },
/* 524 */
[810, 525, 526, 528, 529, 530, 531, 536, 537, 542, 543, 544],
/* 525 */
17,
/* 526 */
[811, 527],
/* 527 */
19,
/* 528 */
[812, 527],
/* 529 */
21,
/* 530 */
[813, 531],
/* 531 */
[814, 532],
/* 532 */
[815, 533, 534, 535],
/* 533 */
25,
/* 534 */
26,
/* 535 */
27,
/* 536 */
28,
/* 537 */
[816, 538],
/* 538 */
[817, 539],
/* 539 */
[818, 540, 541],
/* 540 */
32,
/* 541 */
33,
/* 542 */
34,
/* 543 */
35,
/* 544 */
36,
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _get = function get(_x, _x2, _x3) {
	  var _again = true;_function: while (_again) {
	    var object = _x,
	        property = _x2,
	        receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	      var parent = Object.getPrototypeOf(object);if (parent === null) {
	        return undefined;
	      } else {
	        _x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;
	      }
	    } else if ('value' in desc) {
	      return desc.value;
	    } else {
	      var getter = desc.get;if (getter === undefined) {
	        return undefined;
	      }return getter.call(receiver);
	    }
	  }
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError('Cannot call a class as a function');
	  }
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== 'function' && superClass !== null) {
	    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var OptGroup = function (_React$Component) {
	  _inherits(OptGroup, _React$Component);

	  function OptGroup() {
	    _classCallCheck(this, OptGroup);

	    _get(Object.getPrototypeOf(OptGroup.prototype), 'constructor', this).apply(this, arguments);
	  }

	  return OptGroup;
	}(_react2['default'].Component);

	exports['default'] = OptGroup;
	module.exports = exports['default'];

/***/ },
/* 546 */
[831, 547],
/* 547 */
[832, 548, 549, 554],
/* 548 */
77,
/* 549 */
[833, 550, 554],
/* 550 */
[834, 551, 552],
/* 551 */
80,
/* 552 */
[835, 553, 553],
/* 553 */
82,
/* 554 */
83,
/* 555 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.getValuePropValue = getValuePropValue;
	exports.getPropValue = getPropValue;
	exports.isCombobox = isCombobox;
	exports.isMultipleOrTags = isMultipleOrTags;
	exports.isMultipleOrTagsOrCombobox = isMultipleOrTagsOrCombobox;
	exports.isSingleMode = isSingleMode;
	exports.toArray = toArray;
	exports.getSelectKeys = getSelectKeys;

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _rcMenu = __webpack_require__(556);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function getValuePropValue(child) {
	  var props = child.props;
	  if ('value' in props) {
	    return props.value;
	  }
	  if (child.key) {
	    return child.key;
	  }
	  throw new Error('no key or value for ' + child);
	}

	function getPropValue(child, prop) {
	  if (prop === 'value') {
	    return getValuePropValue(child);
	  }
	  return child.props[prop];
	}

	function isCombobox(props) {
	  return props.combobox;
	}

	function isMultipleOrTags(props) {
	  return props.multiple || props.tags;
	}

	function isMultipleOrTagsOrCombobox(props) {
	  return isMultipleOrTags(props) || isCombobox(props);
	}

	function isSingleMode(props) {
	  return !isMultipleOrTagsOrCombobox(props);
	}

	function toArray(value) {
	  var ret = value;
	  if (value === undefined) {
	    ret = [];
	  } else if (!Array.isArray(value)) {
	    ret = [value];
	  }
	  return ret;
	}

	function getSelectKeys(menuItems, value) {
	  if (value === null || value === undefined) {
	    return [];
	  }
	  var selectedKeys = [];
	  _react2['default'].Children.forEach(menuItems, function (item) {
	    if (item.type === _rcMenu.ItemGroup) {
	      selectedKeys = selectedKeys.concat(getSelectKeys(item.props.children, value));
	    } else {
	      var itemValue = getValuePropValue(item);
	      var itemKey = item.key;
	      if (value.indexOf(itemValue) !== -1 && itemKey) {
	        selectedKeys.push(itemKey);
	      }
	    }
	  });
	  return selectedKeys;
		}

/***/ },
/* 556 */
[843, 557, 564, 567, 568, 569],
/* 557 */
[844, 558, 541, 562],
/* 558 */
[845, 524, 559, 541, 562, 563],
/* 559 */
[846, 560],
/* 560 */
[847, 561],
/* 561 */
403,
/* 562 */
404,
/* 563 */
[848, 541],
/* 564 */
[849, 565, 524, 541, 566],
/* 565 */
[850, 558, 541, 562, 546],
/* 566 */
[851, 524],
/* 567 */
[852, 524],
/* 568 */
410,
/* 569 */
411,
/* 570 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var _rcTrigger = __webpack_require__(571);

	var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _DropdownMenu = __webpack_require__(588);

	var _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _OptGroup = __webpack_require__(545);

	var _OptGroup2 = _interopRequireDefault(_OptGroup);

	var _util = __webpack_require__(555);

	var _rcMenu = __webpack_require__(556);

	var BUILT_IN_PLACEMENTS = {
	  bottomLeft: {
	    points: ['tl', 'bl'],
	    offset: [0, 4],
	    overflow: {
	      adjustX: 0,
	      adjustY: 1
	    }
	  },
	  topLeft: {
	    points: ['bl', 'tl'],
	    offset: [0, -4],
	    overflow: {
	      adjustX: 0,
	      adjustY: 1
	    }
	  }
	};

	var SelectTrigger = _react2['default'].createClass({
	  displayName: 'SelectTrigger',

	  propTypes: {
	    dropdownMatchSelectWidth: _react.PropTypes.bool,
	    visible: _react.PropTypes.bool,
	    filterOption: _react.PropTypes.any,
	    options: _react.PropTypes.any,
	    prefixCls: _react.PropTypes.string,
	    popupClassName: _react.PropTypes.string,
	    children: _react.PropTypes.any
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.props.dropdownMatchSelectWidth && this.props.visible) {
	      var dropdownDOMNode = this.getPopupDOMNode();
	      if (dropdownDOMNode) {
	        dropdownDOMNode.style.width = _reactDom2['default'].findDOMNode(this).offsetWidth + 'px';
	      }
	    }
	  },

	  getInnerMenu: function getInnerMenu() {
	    return this.popupMenu && this.popupMenu.refs.menu;
	  },

	  getPopupDOMNode: function getPopupDOMNode() {
	    return this.refs.trigger.getPopupDomNode();
	  },

	  getDropdownElement: function getDropdownElement(newProps) {
	    var props = this.props;
	    return _react2['default'].createElement(_DropdownMenu2['default'], _extends({
	      ref: this.saveMenu
	    }, newProps, {
	      prefixCls: this.getDropdownPrefixCls(),
	      onMenuSelect: props.onMenuSelect,
	      onMenuDeselect: props.onMenuDeselect,
	      value: props.value,
	      defaultActiveFirstOption: props.defaultActiveFirstOption,
	      dropdownMenuStyle: props.dropdownMenuStyle
	    }));
	  },

	  getDropdownTransitionName: function getDropdownTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = this.getDropdownPrefixCls() + '-' + props.animation;
	    }
	    return transitionName;
	  },

	  getDropdownPrefixCls: function getDropdownPrefixCls() {
	    return this.props.prefixCls + '-dropdown';
	  },

	  filterOption: function filterOption(input, child) {
	    if (!input) {
	      return true;
	    }
	    var filterOption = this.props.filterOption;
	    if (!filterOption) {
	      return true;
	    }
	    if (child.props.disabled) {
	      return false;
	    }
	    return filterOption.call(this, input, child);
	  },

	  saveMenu: function saveMenu(menu) {
	    this.popupMenu = menu;
	  },

	  renderFilterOptions: function renderFilterOptions() {
	    return this.renderFilterOptionsFromChildren(this.props.options, true);
	  },

	  renderFilterOptionsFromChildren: function renderFilterOptionsFromChildren(children, showNotFound) {
	    var _this = this;

	    var sel = [];
	    var props = this.props;
	    var inputValue = props.inputValue;
	    var childrenKeys = [];
	    var tags = props.tags;
	    _react2['default'].Children.forEach(children, function (child) {
	      if (child.type === _OptGroup2['default']) {
	        var innerItems = _this.renderFilterOptionsFromChildren(child.props.children, false);
	        if (innerItems.length) {
	          var label = child.props.label;
	          var key = child.key;
	          if (!key && typeof label === 'string') {
	            key = label;
	          } else if (!label && key) {
	            label = key;
	          }
	          sel.push(_react2['default'].createElement(_rcMenu.ItemGroup, { key: key, title: label }, innerItems));
	        }
	        return;
	      }
	      var childValue = (0, _util.getValuePropValue)(child);
	      if (_this.filterOption(inputValue, child)) {
	        sel.push(_react2['default'].createElement(_rcMenu.Item, _extends({
	          value: childValue,
	          key: childValue
	        }, child.props)));
	      }
	      if (tags && !child.props.disabled) {
	        childrenKeys.push(childValue);
	      }
	    });
	    if (tags) {
	      // tags value must be string
	      var value = props.value;
	      value = value.filter(function (singleValue) {
	        return childrenKeys.indexOf(singleValue) === -1 && (!inputValue || singleValue.indexOf(inputValue) > -1);
	      });
	      sel = sel.concat(value.map(function (singleValue) {
	        return _react2['default'].createElement(_rcMenu.Item, { value: singleValue, key: singleValue }, singleValue);
	      }));
	      if (inputValue) {
	        var notFindInputItem = sel.every(function (option) {
	          return (0, _util.getValuePropValue)(option) !== inputValue;
	        });
	        if (notFindInputItem) {
	          sel.unshift(_react2['default'].createElement(_rcMenu.Item, { value: inputValue, key: inputValue }, inputValue));
	        }
	      }
	    }
	    if (!sel.length && showNotFound && props.notFoundContent) {
	      sel = [_react2['default'].createElement(_rcMenu.Item, { disabled: true, value: 'NOT_FOUND', key: 'NOT_FOUND' }, props.notFoundContent)];
	    }
	    return sel;
	  },

	  render: function render() {
	    var _popupClassName;

	    var props = this.props;
	    var multiple = props.multiple;
	    var dropdownPrefixCls = this.getDropdownPrefixCls();
	    var popupClassName = (_popupClassName = {}, _defineProperty(_popupClassName, props.dropdownClassName, !!props.dropdownClassName), _defineProperty(_popupClassName, dropdownPrefixCls + '--' + (multiple ? 'multiple' : 'single'), 1), _popupClassName);
	    var visible = props.visible;
	    var menuItems = undefined;
	    var search = undefined;
	    menuItems = this.renderFilterOptions();
	    search = multiple || props.combobox || !props.showSearch ? null : _react2['default'].createElement('span', { className: dropdownPrefixCls + '-search' }, props.inputElement);
	    if (!search && !menuItems.length) {
	      visible = false;
	    }
	    var popupElement = this.getDropdownElement({
	      menuItems: menuItems,
	      search: search,
	      multiple: multiple,
	      visible: visible
	    });
	    return _react2['default'].createElement(_rcTrigger2['default'], { action: props.disabled ? [] : ['click'],
	      ref: 'trigger',
	      getPopupContainer: props.getPopupContainer,
	      popupPlacement: 'bottomLeft',
	      builtinPlacements: BUILT_IN_PLACEMENTS,
	      prefixCls: dropdownPrefixCls,
	      popupTransitionName: this.getDropdownTransitionName(),
	      onPopupVisibleChange: props.onDropdownVisibleChange,
	      popup: popupElement,
	      popupVisible: visible,
	      popupClassName: (0, _classnames2['default'])(popupClassName),
	      popupStyle: props.dropdownStyle
	    }, this.props.children);
	  }
	});

	exports['default'] = SelectTrigger;
	module.exports = exports['default'];

/***/ },
/* 571 */
[820, 572],
/* 572 */
[821, 524, 573, 587],
/* 573 */
[822, 574, 546, 585, 586],
/* 574 */
[823, 575],
/* 575 */
[824, 576, 524, 584],
/* 576 */
[825, 577, 578, 579, 580, 581, 582],
/* 577 */
67,
/* 578 */
[826, 577],
/* 579 */
[827, 577, 578],
/* 580 */
[828, 577],
/* 581 */
[829, 577],
/* 582 */
[830, 583],
/* 583 */
73,
/* 584 */
74,
/* 585 */
[836, 586],
/* 586 */
85,
/* 587 */
86,
/* 588 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _util = __webpack_require__(555);

	var _rcMenu = __webpack_require__(556);

	var _rcMenu2 = _interopRequireDefault(_rcMenu);

	var _domScrollIntoView = __webpack_require__(559);

	var _domScrollIntoView2 = _interopRequireDefault(_domScrollIntoView);

	var DropdownMenu = _react2['default'].createClass({
	  displayName: 'DropdownMenu',

	  propTypes: {
	    prefixCls: _react2['default'].PropTypes.string,
	    menuItems: _react2['default'].PropTypes.any,
	    search: _react2['default'].PropTypes.any
	  },

	  componentDidMount: function componentDidMount() {
	    this.scrollActiveItemToView();
	  },

	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    // freeze when hide
	    return nextProps.visible;
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var props = this.props;
	    if (!prevProps.visible && props.visible) {
	      this.scrollActiveItemToView();
	    }
	  },

	  scrollActiveItemToView: function scrollActiveItemToView() {
	    // scroll into view
	    var itemComponent = (0, _reactDom.findDOMNode)(this.firstActiveItem);
	    if (itemComponent) {
	      (0, _domScrollIntoView2['default'])(itemComponent, (0, _reactDom.findDOMNode)(this.refs.menu), {
	        onlyScrollIfNeeded: true
	      });
	    }
	  },

	  renderMenu: function renderMenu() {
	    var _this = this;

	    var props = this.props;
	    var menuItems = props.menuItems;
	    var defaultActiveFirstOption = props.defaultActiveFirstOption;
	    var value = props.value;
	    var dropdownMenuStyle = props.dropdownMenuStyle;
	    var prefixCls = props.prefixCls;
	    var multiple = props.multiple;
	    var onMenuDeselect = props.onMenuDeselect;
	    var onMenuSelect = props.onMenuSelect;

	    if (menuItems && menuItems.length) {
	      var _ret = function () {
	        var menuProps = {};
	        if (multiple) {
	          menuProps.onDeselect = onMenuDeselect;
	          menuProps.onSelect = onMenuSelect;
	        } else {
	          menuProps.onClick = onMenuSelect;
	        }
	        var selectedKeys = (0, _util.getSelectKeys)(menuItems, value);
	        var activeKeyProps = {};

	        var clonedMenuItems = menuItems;
	        if (selectedKeys.length) {
	          (function () {
	            activeKeyProps.activeKey = selectedKeys[0];
	            var foundFirst = false;
	            // set firstActiveItem via cloning menus
	            // for scroll into view
	            var clone = function clone(item) {
	              if (!foundFirst && selectedKeys.indexOf(item.key) !== -1) {
	                foundFirst = true;
	                return (0, _react.cloneElement)(item, {
	                  ref: function ref(_ref) {
	                    _this.firstActiveItem = _ref;
	                  }
	                });
	              }
	              return item;
	            };

	            clonedMenuItems = menuItems.map(function (item) {
	              if (item.type === _rcMenu.ItemGroup) {
	                var children = item.props.children.map(clone);
	                return (0, _react.cloneElement)(item, {}, children);
	              }
	              return clone(item);
	            });
	          })();
	        }

	        return {
	          v: _react2['default'].createElement(_rcMenu2['default'], _extends({
	            ref: 'menu',
	            defaultActiveFirst: defaultActiveFirstOption,
	            style: dropdownMenuStyle
	          }, activeKeyProps, {
	            multiple: multiple,
	            focusable: false
	          }, menuProps, {
	            selectedKeys: selectedKeys,
	            prefixCls: prefixCls + '-menu' }), clonedMenuItems)
	        };
	      }();

	      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === 'object') return _ret.v;
	    }
	    return null;
	  },

	  render: function render() {
	    return _react2['default'].createElement('div', null, this.props.search, this.renderMenu());
	  }
	});

	exports['default'] = DropdownMenu;
	module.exports = exports['default'];

/***/ },
/* 589 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _get = function get(_x, _x2, _x3) {
	  var _again = true;_function: while (_again) {
	    var object = _x,
	        property = _x2,
	        receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	      var parent = Object.getPrototypeOf(object);if (parent === null) {
	        return undefined;
	      } else {
	        _x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;
	      }
	    } else if ('value' in desc) {
	      return desc.value;
	    } else {
	      var getter = desc.get;if (getter === undefined) {
	        return undefined;
	      }return getter.call(receiver);
	    }
	  }
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError('Cannot call a class as a function');
	  }
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== 'function' && superClass !== null) {
	    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var Option = function (_React$Component) {
	  _inherits(Option, _React$Component);

	  function Option() {
	    _classCallCheck(this, Option);

	    _get(Object.getPrototypeOf(Option.prototype), 'constructor', this).apply(this, arguments);
	  }

	  return Option;
	}(_react2['default'].Component);

	exports['default'] = Option;
	module.exports = exports['default'];

/***/ },
/* 590 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Pager = function (_React$Component) {
	  _inherits(Pager, _React$Component);

	  function Pager() {
	    _classCallCheck(this, Pager);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  Pager.prototype.render = function render() {
	    var props = this.props;
	    var prefixCls = props.rootPrefixCls + '-item';
	    var cls = prefixCls + ' ' + prefixCls + '-' + props.page;

	    if (props.active) {
	      cls = cls + ' ' + prefixCls + '-active';
	    }

	    var title = void 0;
	    if (props.page === 1) {
	      title = 'First Page';
	    } else if (props.last) {
	      title = 'Last Page: ' + props.page;
	    } else {
	      title = 'Page ' + props.page;
	    }
	    return React.createElement('li', { title: title, className: cls, onClick: props.onClick }, React.createElement('a', null, props.page));
	  };

	  return Pager;
	}(React.Component);

	Pager.propTypes = {
	  page: React.PropTypes.number,
	  active: React.PropTypes.bool,
	  last: React.PropTypes.bool
	};

		module.exports = Pager;

/***/ },
/* 591 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var KEYCODE = __webpack_require__(592);
	var i18n = __webpack_require__(593);

	var Options = function (_React$Component) {
	  _inherits(Options, _React$Component);

	  function Options(props) {
	    _classCallCheck(this, Options);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this.state = {
	      current: props.current,
	      _current: props.current
	    };

	    ['_handleChange', '_changeSize', '_go'].forEach(function (method) {
	      return _this[method] = _this[method].bind(_this);
	    });
	    return _this;
	  }

	  Options.prototype.render = function render() {
	    var _this2 = this;

	    var props = this.props;
	    var state = this.state;
	    var prefixCls = props.rootPrefixCls + '-options';
	    var sizeOptions = props.sizeOptions;
	    var pageSize = props.pageSize;
	    var changeSize = props.changeSize;
	    var quickGo = props.quickGo;
	    var Select = props.selectComponentClass;
	    var changeSelect = null;
	    var goInput = null;

	    if (!(changeSize || quickGo)) {
	      return null;
	    }

	    if (changeSize && Select) {
	      (function () {
	        var Option = Select.Option;
	        changeSelect = React.createElement(Select, {
	          prefixCls: props.selectPrefixCls, showSearch: false,
	          className: prefixCls + '-size-changer',
	          optionLabelProp: 'children',
	          dropdownClassName: prefixCls + '-size-changer-dropdown',
	          defaultValue: sizeOptions.indexOf(pageSize) == -1 ? sizeOptions[0] + "" : pageSize + "",
	          onChange: _this2._changeSize }, sizeOptions.map(function (option, index) {
	          return React.createElement(Option, { key: option, value: option + "" }, option + i18n[props.locale]['items_per_page']);
	        }));
	      })();
	    }

	    if (quickGo) {
	      goInput = React.createElement('div', { title: 'Quick jump to page', className: prefixCls + '-quick-jumper' }, i18n[props.locale]['jump_to'], React.createElement('input', { type: 'text', value: state._current, onChange: this._handleChange.bind(this), onKeyUp: this._go.bind(this) }), i18n[props.locale]['page']);
	    }

	    return React.createElement('div', { className: '' + prefixCls }, changeSelect, goInput);
	  };

	  Options.prototype._changeSize = function _changeSize(value) {
	    this.props.changeSize(Number(value));
	  };

	  Options.prototype._handleChange = function _handleChange(evt) {
	    var _val = evt.target.value;

	    this.setState({
	      _current: _val
	    });
	  };

	  Options.prototype._go = function _go(e) {
	    var _val = e.target.value;
	    if (_val === '') {
	      return;
	    }
	    var val = Number(this.state._current);
	    if (isNaN(val)) {
	      val = this.state.current;
	    }
	    if (e.keyCode === KEYCODE.ENTER) {
	      var c = this.props.quickGo(val);
	      this.setState({
	        _current: c,
	        current: c
	      });
	    }
	  };

	  return Options;
	}(React.Component);

	Options.propTypes = {
	  changeSize: React.PropTypes.func,
	  quickGo: React.PropTypes.func,
	  selectComponentClass: React.PropTypes.func,
	  current: React.PropTypes.number
	};

		module.exports = Options;

/***/ },
/* 592 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  ZERO: 48,
	  NINE: 57,

	  NUMPAD_ZERO: 96,
	  NUMPAD_NINE: 105,

	  BACKSPACE: 8,
	  DELETE: 46,
	  ENTER: 13,

	  ARROW_UP: 38,
	  ARROW_DOWN: 40
		};

/***/ },
/* 593 */
/***/ function(module, exports) {

	'use strict';

	var locale = {
	    "en-us": {
	        items_per_page: '/page',
	        jump_to: 'Goto',
	        page: '',

	        // Pagination.js
	        item: ' entries'
	    },
	    "zh-cn": {
	        // Options.js
	        items_per_page: '条/页',
	        jump_to: '跳至',
	        page: '页',

	        // Pagination.js
	        item: '条'
	    }
	};
	locale['en'] = locale['en-us'];

	module.exports = locale;

/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Popover Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(595);

/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Popover Component for uxcore
	 * @author eternalsky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Tooltip = __webpack_require__(596);
	var Button = __webpack_require__(646);

	var Popover = function (_React$Component) {
	    _inherits(Popover, _React$Component);

	    function Popover(props) {
	        _classCallCheck(this, Popover);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            visible: false
	        };
	        return _this;
	    }

	    Popover.prototype.handleOkClick = function handleOkClick() {
	        var me = this;
	        me.props.onOk(function () {
	            me.setState({
	                visible: false
	            });
	        });
	    };

	    Popover.prototype.handleCancelClick = function handleCancelClick() {
	        var me = this;
	        me.setState({
	            visible: false
	        }, function () {
	            me.props.onCancel();
	        });
	    };

	    Popover.prototype.handleVisibleChange = function handleVisibleChange(visible) {
	        this.setState({
	            visible: visible
	        });
	    };

	    Popover.prototype._renderButton = function _renderButton() {
	        var me = this;
	        if (me.props.showButton) {
	            return React.createElement('div', { className: me.props.prefixCls + "-button-group" }, React.createElement(Button, { size: 'small', type: 'primary', onClick: me.handleOkClick.bind(me) }, me.props.okText), React.createElement(Button, { size: 'small', type: 'secondary', onClick: me.handleCancelClick.bind(me) }, me.props.cancelText));
	        }
	    };

	    Popover.prototype._generateOverlay = function _generateOverlay() {
	        var me = this;
	        var arr = [];
	        if (me.props.title) {
	            arr.push(React.createElement('div', { key: 'title', className: me.props.prefixCls + '-title' }, me.props.title));
	        }
	        if (me.props.overlay) {
	            arr.push(React.createElement('div', { key: 'content', className: me.props.prefixCls + '-content' }, me.props.overlay, me._renderButton()));
	        }
	        return React.createElement('div', null, arr);
	    };

	    Popover.prototype.render = function render() {
	        var me = this;

	        return React.createElement(Tooltip, { placement: me.props.placement,
	            overlayClassName: me.props.overlayClassName,
	            prefixCls: me.props.prefixCls,
	            visible: me.state.visible,
	            onVisibleChange: me.handleVisibleChange.bind(me),
	            delay: me.props.delay,
	            transitionName: me.props.transitionName,
	            trigger: me.props.trigger,
	            overlay: me._generateOverlay() }, me.props.children);
	    };

	    return Popover;
	}(React.Component);

	Popover.defaultProps = {
	    prefixCls: 'kuma-popover',
	    transitionName: 'flip',
	    delay: 0,
	    placement: "top",
	    trigger: "hover",
	    onOk: function onOk(cb) {
	        cb();
	    },
	    onCancel: function onCancel() {},
	    okText: "确定",
	    cancelText: "取消",
	    showButton: false
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	Popover.propTypes = {
	    prefixCls: React.PropTypes.string,
	    delay: React.PropTypes.number,
	    overlayClassName: React.PropTypes.string,
	    placement: React.PropTypes.oneOf(['top', 'bottom', 'left', 'right', 'topLeft', 'bottomLeft', 'leftTop', 'rightTop', 'topRight', 'bottomRight', 'leftBottom', 'rightBottom']),
	    trigger: React.PropTypes.oneOf(['hover', 'click']),
	    onOk: React.PropTypes.func,
	    onCancel: React.PropTypes.func,
	    okText: React.PropTypes.string,
	    cancelText: React.PropTypes.string,
	    showButton: React.PropTypes.bool
	};

	Popover.displayName = "Popover";

	module.exports = Popover;

/***/ },
/* 596 */
[837, 597],
/* 597 */
[838, 598, 599],
/* 598 */
161,
/* 599 */
[820, 600],
/* 600 */
[821, 601, 622, 645],
/* 601 */
[810, 602, 603, 605, 606, 607, 608, 613, 614, 619, 620, 621],
/* 602 */
17,
/* 603 */
[811, 604],
/* 604 */
19,
/* 605 */
[812, 604],
/* 606 */
21,
/* 607 */
[813, 608],
/* 608 */
[814, 609],
/* 609 */
[815, 610, 611, 612],
/* 610 */
25,
/* 611 */
26,
/* 612 */
27,
/* 613 */
28,
/* 614 */
[816, 615],
/* 615 */
[817, 616],
/* 616 */
[818, 617, 618],
/* 617 */
32,
/* 618 */
33,
/* 619 */
34,
/* 620 */
35,
/* 621 */
36,
/* 622 */
[822, 623, 634, 643, 644],
/* 623 */
[823, 624],
/* 624 */
[824, 625, 601, 633],
/* 625 */
[825, 626, 627, 628, 629, 630, 631],
/* 626 */
67,
/* 627 */
[826, 626],
/* 628 */
[827, 626, 627],
/* 629 */
[828, 626],
/* 630 */
[829, 626],
/* 631 */
[830, 632],
/* 632 */
73,
/* 633 */
74,
/* 634 */
[831, 635],
/* 635 */
[832, 636, 637, 642],
/* 636 */
77,
/* 637 */
[833, 638, 642],
/* 638 */
[834, 639, 640],
/* 639 */
80,
/* 640 */
[835, 641, 641],
/* 641 */
82,
/* 642 */
83,
/* 643 */
[836, 644],
/* 644 */
85,
/* 645 */
86,
/* 646 */
[855, 647],
/* 647 */
516,
/* 648 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Progress Component for uxcore
	 * @author vicent.bian
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var Progress = __webpack_require__(649);
	Progress.Line = Progress;
	Progress.Circle = __webpack_require__(651);

	module.exports = Progress;

/***/ },
/* 649 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _objectAssign = __webpack_require__(650);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * Progress Component for uxcore
	   * @author vincent.bian
	   *
	   * Copyright 2014-2015, Uxcore Team, Alinw.
	   * All rights reserved.
	   */

	var prefixCls = 'kuma-progress';

	var Line = function (_React$Component) {
	    _inherits(Line, _React$Component);

	    function Line() {
	        _classCallCheck(this, Line);

	        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	    }

	    Line.prototype.render = function render() {
	        var props = (0, _objectAssign2["default"])({}, this.props);

	        if (parseInt(props.percent, 10) === 100) {
	            props.status = 'success';
	        }

	        var progressInfo = void 0;
	        var fullCls = '';

	        if (props.showInfo === true) {
	            if (props.status === 'exception') {
	                progressInfo = _react2["default"].createElement('span', { className: prefixCls + '-line-text' }, _react2["default"].createElement('i', { className: 'icon-caution' }));
	            } else if (props.status === 'success') {
	                progressInfo = _react2["default"].createElement('span', { className: prefixCls + '-line-text' }, _react2["default"].createElement('i', { className: 'icon-success' }));
	            } else {
	                progressInfo = _react2["default"].createElement('span', { className: prefixCls + '-line-text' }, props.percent, '%');
	            }
	        } else {
	            fullCls = ' ' + prefixCls + '-line-wrap-full';
	        }

	        var percentStyle = {
	            width: props.percent + '%',
	            height: props.strokeWidth
	        };

	        return _react2["default"].createElement('div', { className: prefixCls + '-line-wrap fn-clear status-' + props.status + fullCls }, progressInfo, _react2["default"].createElement('div', { className: prefixCls + '-line-outer' }, _react2["default"].createElement('div', { className: prefixCls + '-line-inner' }, _react2["default"].createElement('div', { className: prefixCls + '-line-bg', style: percentStyle }))));
	    };

	    return Line;
	}(_react2["default"].Component);

	Line.displayName = "Progress-Line";
	Line.propTypes = {
	    status: _react2["default"].PropTypes.oneOf(['normal', 'exception', 'success']),
	    showInfo: _react2["default"].PropTypes.bool,
	    percent: _react2["default"].PropTypes.number,
	    strokeWidth: _react2["default"].PropTypes.number
	};
	Line.defaultProps = {
	    percent: 0,
	    strokeWidth: 10,
	    status: 'normal', // exception active
	    showInfo: true
	};

	exports["default"] = Line;
	module.exports = exports['default'];

/***/ },
/* 650 */
33,
/* 651 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _objectAssign = __webpack_require__(650);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var defaultProps = {
	    strokeWidth: 1,
	    trailWidth: 1
	};
	var prefixCls = 'kuma-progress';

	var Circle = function (_React$Component) {
	    _inherits(Circle, _React$Component);

	    function Circle() {
	        _classCallCheck(this, Circle);

	        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	    }

	    Circle.prototype.render = function render() {
	        var props = (0, _objectAssign2["default"])({}, this.props);
	        var strokeWidth = props.strokeWidth;
	        var radius = 50 - strokeWidth / 2;
	        var pathString = 'M 50,50 m 0,-' + radius + '\n            a ' + radius + ',' + radius + ' 0 1 1 0,' + 2 * radius + '\n            a ' + radius + ',' + radius + ' 0 1 1 0,-' + 2 * radius;
	        var len = Math.PI * 2 * radius;
	        var pathStyle = {
	            'strokeDasharray': len + 'px ' + len + 'px',
	            'strokeDashoffset': (100 - props.percent) / 100 * len + 'px',
	            'transition': 'stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease'
	        };

	        var progressInfo = void 0,
	            textStyle = {
	            lineHeight: props.size + 'px'
	        };

	        if (props.showInfo === true) {
	            if (props.status === 'exception') {
	                progressInfo = _react2["default"].createElement('span', { style: textStyle, className: prefixCls + '-circle-text' }, _react2["default"].createElement('i', { className: 'icon-caution' }));
	            } else if (props.status === 'success') {
	                progressInfo = _react2["default"].createElement('span', { style: textStyle, className: prefixCls + '-circle-text' }, _react2["default"].createElement('i', { className: 'icon-success' }));
	            } else {
	                progressInfo = _react2["default"].createElement('span', { style: textStyle, className: prefixCls + '-circle-text' }, props.percent, '%');
	            }
	        }

	        ['strokeWidth', 'trailWidth'].forEach(function (item) {
	            if (item === 'trailWidth' && !props.trailWidth && props.strokeWidth) {
	                props.trailWidth = props.strokeWidth;
	                return;
	            }
	            if (!props[item]) {
	                props[item] = defaultProps[item];
	            }
	        });

	        return _react2["default"].createElement('div', { className: 'kuma-progress-circle-wrap status-' + props.status, style: { width: props.size, height: props.size } }, _react2["default"].createElement('svg', { className: 'kuma-progress-circle', viewBox: '0 0 100 100' }, _react2["default"].createElement('path', { className: 'kuma-progress-circle-trail', d: pathString,
	            strokeWidth: props.trailWidth, fillOpacity: '0' }), _react2["default"].createElement('path', { className: 'kuma-progress-circle-path', d: pathString, strokeLinecap: 'round', strokeWidth: props.strokeWidth, fillOpacity: '0', style: pathStyle })), progressInfo);
	    };

	    return Circle;
	}(_react2["default"].Component);

	Circle.displayName = "Progress-Circle";
	Circle.propTypes = {
	    status: _react2["default"].PropTypes.oneOf(['normal', 'exception', 'success']),
	    percent: _react2["default"].PropTypes.number,
	    strokeWidth: _react2["default"].PropTypes.number,
	    size: _react2["default"].PropTypes.number,
	    showInfo: _react2["default"].PropTypes.bool
	};
	Circle.defaultProps = {
	    status: 'normal', // exception active
	    percent: 0,
	    strokeWidth: 6,
	    size: 156,
	    showInfo: true
	};

	exports["default"] = Circle;
	module.exports = exports['default'];

/***/ },
/* 652 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Steps Component for uxcore
	 * @author vincent.bian
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(653);

/***/ },
/* 653 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Steps Component for uxcore
	 * @author vincent.bian
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var Step = __webpack_require__(654);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Steps = function (_React$Component) {
	    _inherits(Steps, _React$Component);

	    function Steps(props) {
	        _classCallCheck(this, Steps);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            init: false,
	            tailWidth: 0
	        };
	        _this._previousStepsWidth = 0;
	        _this._itemsWidth = [];
	        return _this;
	    }

	    Steps.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (nextProps.children.length !== this.props.children.length) {
	            if (this.props.direction === 'vertical') {
	                return;
	            }
	            var $dom = ReactDOM.findDOMNode(this);
	            var len = nextProps.children.length - 1;
	            this._itemsWidth = new Array(len + 1);

	            var i = void 0;
	            for (i = 0; i <= len - 1; i++) {
	                this._itemsWidth[i] = nextProps.maxDescriptionWidth;
	            }
	            this._itemsWidth[i] = nextProps.maxDescriptionWidth;
	            this._update(nextProps);
	        }
	    };

	    Steps.prototype.componentDidMount = function componentDidMount() {
	        var _this2 = this;

	        if (this.props.direction === 'vertical') {
	            return;
	        }
	        var $dom = ReactDOM.findDOMNode(this);
	        var len = $dom.children.length - 1;
	        this._itemsWidth = new Array(len + 1);

	        var i = void 0;
	        for (i = 0; i <= len - 1; i++) {
	            this._itemsWidth[i] = this.props.maxDescriptionWidth;
	        }
	        this._itemsWidth[i] = this.props.maxDescriptionWidth;
	        this._previousStepsWidth = Math.floor(ReactDOM.findDOMNode(this).offsetWidth);
	        this._update();

	        /*
	         * 把最后一个元素设置为absolute，是为了防止动态添加元素后滚动条出现导致的布局问题。
	         * 未来不考虑ie8一类的浏览器后，会采用纯css来避免各种问题。
	         */
	        $dom.children[len].style.position = 'absolute';

	        /*
	         * 下面的代码是为了兼容window系统下滚动条出现后会占用宽度的问题。
	         * componentDidMount时滚动条还不一定出现了，这时候获取的宽度可能不是最终宽度。
	         * 对于滚动条不占用宽度的浏览器，下面的代码也不二次render，_resize里面会判断要不要更新。
	         */
	        setTimeout(function () {
	            _this2._resize();
	        });

	        this._resizeBind = this._resize.bind(this);

	        if (window.attachEvent) {
	            window.attachEvent('onresize', this._resizeBind);
	        } else {
	            window.addEventListener('resize', this._resizeBind);
	        }
	    };

	    Steps.prototype.componentDidUpdate = function componentDidUpdate() {
	        this._resize();
	        var $dom = ReactDOM.findDOMNode(this);

	        var len = $dom.children.length - 1;
	        /*
	         * 把最后一个元素设置为absolute，是为了防止动态添加元素后滚动条出现导致的布局问题。
	         * 未来不考虑ie8一类的浏览器后，会采用纯css来避免各种问题。
	         */
	        for (var i = 0; i <= len; i++) {
	            $dom.children[i].style.position = 'relative';
	        }
	        $dom.children[len].style.position = 'absolute';
	    };

	    Steps.prototype.componentWillUnmount = function componentWillUnmount() {
	        if (this.props.direction === 'vertical') {
	            return;
	        }
	        if (window.attachEvent) {
	            window.detachEvent('onresize', this._resizeBind);
	        } else {
	            window.removeEventListener('resize', this._resizeBind);
	        }
	    };

	    Steps.prototype._resize = function _resize() {
	        var w = Math.floor(ReactDOM.findDOMNode(this).offsetWidth);
	        if (this._previousStepsWidth === w) {
	            return;
	        }
	        this._previousStepsWidth = w;
	        this._update();
	    };

	    Steps.prototype._update = function _update(props) {
	        props = props || this.props;
	        var len = props.children.length - 1;
	        var tw = 0;
	        this._itemsWidth.forEach(function (w) {
	            tw += w;
	        });
	        var dw = Math.floor((this._previousStepsWidth - tw) / len) - 1;
	        if (dw <= 0) {
	            return;
	        }
	        this.setState({
	            init: true,
	            tailWidth: dw
	        });
	    };

	    Steps.prototype.render = function render() {
	        var props = this.props;
	        var prefixCls = props.prefixCls;
	        var children = props.children;
	        var maxDescriptionWidth = props.maxDescriptionWidth;
	        var iconPrefix = props.iconPrefix;
	        var size = props.size;
	        var direction = props.direction;
	        var showIcon = props.showIcon;
	        var current = props.current;
	        var type = props.type;

	        var len = children.length - 1;
	        var iws = this._itemsWidth;
	        var clsName = prefixCls;
	        // if (size === 'small' && showIcon) {
	        //     clsName += ` ${prefixCls}-small`;
	        // }
	        if (direction === 'vertical') {
	            clsName += ' ' + prefixCls + '-vertical';
	        } else {
	            clsName += ' ' + prefixCls + '-type-' + type;
	        }
	        if (!showIcon) {
	            clsName += ' ' + prefixCls + '-noicon';
	        }

	        return React.createElement('div', { className: clsName }, React.Children.map(children, function (ele, idx) {
	            var np = {
	                stepNumber: showIcon ? (idx + 1).toString() : '',
	                stepLast: idx === len,
	                tailWidth: iws.length === 0 || idx === len ? 'auto' : iws[idx] + this.state.tailWidth,
	                prefixCls: prefixCls,
	                iconPrefix: iconPrefix,
	                maxDescriptionWidth: maxDescriptionWidth
	            };
	            if (!ele.props.status) {
	                np.status = idx === current ? 'process' : idx < current ? 'finish' : 'wait';
	            }
	            return React.cloneElement(ele, np);
	        }, this));
	    };

	    return Steps;
	}(React.Component);

	Steps.defaultProps = {
	    prefixCls: 'kuma-step',
	    iconPrefix: '',
	    // size: 'default',
	    maxDescriptionWidth: 100,
	    current: 0,
	    direction: '',
	    showIcon: true,
	    type: 'default'
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	Steps.propTypes = {
	    prefixCls: React.PropTypes.string,
	    iconPrefix: React.PropTypes.string,
	    // size: React.PropTypes.oneOf(['default', 'small']),
	    maxDescriptionWidth: React.PropTypes.number,
	    current: React.PropTypes.number,
	    direction: React.PropTypes.string,
	    showIcon: React.PropTypes.bool,
	    type: React.PropTypes.oneOf(['default', 'title-on-top', 'long-desc'])
	};

	Steps.displayName = "Steps";

	Steps.Step = Step;

	exports["default"] = Steps;
	module.exports = exports['default'];

/***/ },
/* 654 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Step = function (_React$Component) {
	    _inherits(Step, _React$Component);

	    function Step(props) {
	        _classCallCheck(this, Step);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    Step.prototype.render = function render() {
	        var props = this.props;
	        var status = props.status || 'wait';
	        var prefixCls = props.prefixCls;
	        var iconPrefix = props.iconPrefix;
	        var maxWidth = props.maxDescriptionWidth;
	        var iconName = props.icon ? props.icon : 'check';
	        var icon = void 0,
	            stepCls = prefixCls + '-item ' + prefixCls + '-status-' + status,
	            tail = void 0,
	            description = void 0;
	        if (!props.icon && status !== 'process' || !props.stepLast) {
	            icon = React.createElement('span', { className: prefixCls + '-icon' }, props.stepNumber);
	        } else {
	            icon = React.createElement('span', { className: prefixCls + '-icon ' + iconPrefix + 'icon ' + iconPrefix + 'icon-' + iconName });
	        }

	        if (props.stepLast) {
	            stepCls += ' ' + prefixCls + '-item-last';
	        } else {
	            tail = React.createElement('div', { className: prefixCls + '-tail' }, React.createElement('i', null));
	        }
	        if (props.icon) {
	            stepCls += ' ' + prefixCls + '-custom';
	        }
	        if (props.description) {
	            description = React.createElement('div', { className: prefixCls + '-description' }, props.description);
	        } else {
	            stepCls += ' ' + prefixCls + '-no-desc';
	        }

	        return React.createElement('div', { className: '' + stepCls, style: { width: props.tailWidth } }, tail, React.createElement('div', { className: prefixCls + '-head' }, React.createElement('div', { className: prefixCls + '-head-inner' }, icon)), React.createElement('div', { className: prefixCls + '-main', style: { maxWidth: maxWidth } }, React.createElement('div', { className: prefixCls + '-title' }, props.title), description));
	    };

	    return Step;
	}(React.Component);

		module.exports = Step;

/***/ },
/* 655 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Table Component for uxcore
	 * @author zhouquan.yezq
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(656);

/***/ },
/* 656 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];for (var key in source) {
	            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }return target;
	};

	function _objectWithoutProperties(obj, keys) {
	    var target = {};for (var i in obj) {
	        if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	    }return target;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Table Component for uxcore
	 * @author zhouquan.yezq
	 *
	 * Copyright 2014-2015, UXCore Team, Alinw.
	 * All rights reserved.
	 */

	var Header = __webpack_require__(657);
	var Tbody = __webpack_require__(660);
	var ActionBar = __webpack_require__(675);
	var CellField = __webpack_require__(665);
	var Pagination = __webpack_require__(518);
	var Const = __webpack_require__(223);
	var assign = __webpack_require__(659);
	var deepcopy = __webpack_require__(669);
	var deepEqual = __webpack_require__(670);
	var classnames = __webpack_require__(5);

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Table = function (_React$Component) {
	    _inherits(Table, _React$Component);

	    function Table(props) {
	        _classCallCheck(this, Table);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.uid = 0;
	        _this.fields = {};
	        _this.state = {
	            data: _this.addValuesInData(deepcopy(_this.props.jsxdata)), // checkbox 内部交互
	            columns: _this.processColumn(), // column 内部交互
	            showMask: _this.props.showMask, // fetchData 时的内部状态改变
	            pageSize: props.pageSize, // pagination 相关
	            currentPage: props.currentPage, // pagination 相关
	            activeColumn: null,
	            searchTxt: "",
	            passedData: null,
	            params: null,
	            selected: [],
	            expanded: false
	        };
	        return _this;
	    }

	    Table.prototype.componentWillMount = function componentWillMount() {
	        if (this.props.fetchDataOnMount) {
	            this.fetchData();
	        }
	    };

	    Table.prototype.componentDidMount = function componentDidMount() {
	        var me = this;
	        me.el = ReactDOM.findDOMNode(me);
	        if (!!me.state.data && !!me.state.data.datas) {
	            console.warn("Table: 'content.data' rather than 'content.datas' is recommended, the support for 'content.datas' will be end from ver. 1.3.0");
	        }
	        if (me.props.subComp) {
	            console.warn("Table: subComp is deprecated, use renderSubComp instead.");
	        }
	    };

	    Table.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        var me = this;
	        var newData = {};
	        if (!!nextProps.jsxdata && !!me.props.jsxdata && !me._isEqual(nextProps.jsxdata, me.props.jsxdata)) {
	            // Data has changed, so uid which is used to mark the data should be reset.
	            me.uid = 0;
	            newData['data'] = me.addValuesInData(deepcopy(nextProps.jsxdata));
	            me.data = deepcopy(newData['data']);
	        }
	        if (nextProps.pageSize != me.props.pageSize) {
	            newData['pageSize'] = nextProps.pageSize;
	        }
	        if (nextProps.currentPage != me.props.currentPage) {
	            newData['currentPage'] = nextProps.currentPage;
	        }
	        if (!!nextProps.jsxcolumns && !!me.props.jsxcolumns && !me._isEqual(nextProps.jsxcolumns, me.props.jsxcolumns)) {
	            newData['columns'] = me.processColumn(nextProps);
	        }
	        if (nextProps.fetchUrl !== me.props.fetchUrl) {
	            me.fetchData('urlChange');
	        }
	        me.setState(newData);
	    };

	    Table.prototype.componentWillUnmount = function componentWillUnmount() {
	        var me = this;
	    };

	    /**
	     * For inline edit
	     * receive changes from cell field and change state.data
	     * inform users of the change with dataKey & pass
	     */

	    Table.prototype.handleDataChange = function handleDataChange(obj) {
	        var me = this;
	        var jsxid = obj.jsxid;
	        var column = obj.column;
	        var value = obj.value;
	        var text = obj.text;
	        var pass = obj.pass;

	        var dataKey = column.dataKey;
	        var editKey = column.editKey || dataKey;
	        var data = deepcopy(me.state.data);
	        var changedData = {};
	        for (var i = 0; i < data.data.length; i++) {
	            if (data.data[i].jsxid == jsxid) {
	                data.data[i][dataKey] = text;
	                data.data[i][editKey] = value;
	                changedData = data.data[i];
	            }
	        }

	        me.setState({
	            data: data
	        }, function () {
	            me.props.onChange({
	                data: me.state.data,
	                editKey: editKey,
	                dataKey: dataKey,
	                changedData: changedData,
	                pass: pass
	            });
	        });
	    };

	    /**
	     * register CellField to Table for the global validation
	     * @param field {element} the cell field to be registered
	     */

	    Table.prototype.attachCellField = function attachCellField(validate, name) {
	        var me = this;
	        if (!name) {
	            console.error("Table: name can not be empty, check the dataKey of the column config");
	        } else {
	            me.fields[name] = validate;
	        }
	    };

	    /**
	     * cancel the CellField when it is unmounted.
	     * @param field {element} the cell field to be canceled.
	     */

	    Table.prototype.detachCellField = function detachCellField(name) {
	        delete this.fields[name];
	    };

	    /**
	     * simple method to compare two datas, 
	     * only support the data which JSON can parse.
	     */

	    Table.prototype._isEqual = function _isEqual(a, b) {
	        return deepEqual(a, b);
	    };

	    /**
	     * get Query Object by combining data from searchBar, column order, pagination
	     * and fetchParams.
	     * @param from {string} used in props.beforeFetch
	     */

	    Table.prototype.getQueryObj = function getQueryObj(from) {

	        var me = this,
	            queryObj = {};
	        if (me.props.passedData) {
	            var queryKeys = me.props.queryKeys;
	            if (!queryKeys) {
	                queryObj = me.props.passedData;
	            } else {
	                queryKeys.forEach(function (key) {
	                    if (me.props.passedData[key] !== undefined) {
	                        queryObj[key] = me.props.passedData[key];
	                    }
	                });
	            }
	        }

	        // pagination
	        queryObj = assign({}, queryObj, {
	            pageSize: me.state.pageSize,
	            currentPage: me.state.currentPage
	        });

	        // column order
	        var activeColumn = me.state.activeColumn;
	        var orderType = me.state.orderType;
	        if (!!activeColumn) {
	            queryObj = assign({}, queryObj, {
	                orderColumn: activeColumn.dataKey
	            });
	            if (!!orderType && orderType != 'none') {
	                queryObj.orderType = orderType;
	            }
	        }

	        // search query
	        var searchTxt = me.state.searchTxt;
	        if (!!searchTxt) {
	            queryObj = assign({}, queryObj, {
	                searchTxt: searchTxt
	            });
	        }

	        // fetchParams has the top priority
	        if (!!me.props.fetchParams) {
	            queryObj = assign({}, queryObj, me.props.fetchParams);
	        }

	        return me.props.beforeFetch(queryObj, from);
	    };

	    /**
	     * fetch Data via Ajax
	     * @param from {string} tell fetchData where it is invoked, the param will be 
	     * passed to props.beforeFetch in order to help the user.
	     */

	    Table.prototype.fetchData = function fetchData(from) {

	        var me = this;
	        // reset uid cause table data has changed
	        me.uid = 0;

	        // fetchUrl has the top priority.
	        if (!!me.props.fetchUrl) {
	            if (me.ajax) {
	                me.ajax.abort();
	            }
	            if (!me.state.showMask) {
	                me.setState({
	                    showMask: true
	                });
	            }
	            var ajaxOptions = {
	                url: me.props.fetchUrl,
	                data: me.getQueryObj(from),
	                cache: false,
	                dataType: "json",
	                success: function success(result) {
	                    if (result.success === true || result.hasError === false) {
	                        var _data = result.content;
	                        var processedData = me.addValuesInData(me.props.processData(deepcopy(_data)));
	                        var updateObj = {
	                            data: processedData,
	                            showMask: false
	                        };
	                        if (processedData.currentPage !== undefined) {
	                            updateObj.currentPage = processedData.currentPage;
	                        }
	                        me.data = deepcopy(processedData);
	                        me.setState(updateObj);
	                    } else {
	                        me.props.onFetchError(result);
	                    }
	                }
	            };

	            if (/\.jsonp/.test(me.props.fetchUrl)) {
	                ajaxOptions.dataType = "jsonp";
	            }

	            me.ajax = $.ajax(ajaxOptions);
	        } else if (!!me.props.passedData) {

	            if (!me.props.queryKeys) {
	                var data = me.addValuesInData(me.props.processData(deepcopy(me.props.passedData)));
	                me.setState({
	                    data: data
	                });
	                me.data = deepcopy(data);
	            } else {
	                (function () {
	                    var data = {};
	                    me.props.queryKeys.forEach(function (key, index) {
	                        if (me.props.passedData[key] !== undefined) {
	                            data[key] = me.props.passedData[key];
	                        }
	                    });
	                    var processedData = me.addValuesInData(me.props.processData(deepcopy(data)));
	                    me.setState({
	                        data: processedData
	                    });
	                    me.data = deepcopy(processedData);
	                })();
	            }
	        } else if (!!this.props.jsxdata) {
	            var data = this.addValuesInData(deepcopy(this.props.jsxdata));
	            me.setState({
	                data: data
	            });
	            me.data = deepcopy(data);
	        } else {
	            //default will create one row
	            var data = {
	                data: [{
	                    jsxid: me.uid++,
	                    __mode__: Const.MODE.EDIT
	                }],
	                "currentPage": 1,
	                "totalCount": 0
	            };
	            me.data = deepcopy(data);
	            me.setState({
	                "data": deepcopy(data)
	            });
	        }
	    };

	    Table.prototype.processColumn = function processColumn(props) {

	        props = props || this.props;

	        var me = this,
	            columns = deepcopy(props.jsxcolumns),
	            hasCheckboxColumn = false;

	        columns.forEach(function (item, i) {
	            // only one rowSelector can be rendered in Table.
	            if (item.type == 'checkbox' || item.type == 'radioSelector' || item.type == 'checkboxSelector') {
	                hasCheckboxColumn = true;
	                me.checkboxColumn = item;
	                me.checkboxColumnKey = item.dataKey;
	                item.width = item.width || 32;
	                item.align = item.align || 'right';
	            }
	        });

	        // filter the column which has a dataKey 'jsxchecked' & 'jsxtreeIcon'

	        columns = columns.filter(function (item) {
	            return item.dataKey !== 'jsxchecked' && item.dataKey !== 'jsxtreeIcon';
	        });

	        // if hidden is not set, then it's false
	        columns = columns.map(function (item, index) {
	            item.hidden = !!item.hidden;
	            return item;
	        });

	        if (!!props.rowSelection & !hasCheckboxColumn) {
	            // console.warn("It will be deprecated that a checkbox(radio) in first column without column config, You should specify the column type with 'checkboxSelector' or 'radioSelector'");
	            me.checkboxColumn = {
	                dataKey: 'jsxchecked',
	                width: 32,
	                type: props.rowSelector,
	                align: 'right'
	            };
	            me.checkboxColumnKey = 'jsxchecked';

	            columns = [me.checkboxColumn].concat(columns);
	        }

	        // no rowSelection but has parentHasCheckbox, render placeholder
	        else if (!!props.parentHasCheckbox) {
	                columns = [{
	                    dataKey: 'jsxwhite',
	                    width: 46,
	                    type: 'empty'
	                }].concat(columns);
	            }

	            // no rowSelection but has parentHasCheck, render placeholder
	            else if (!!props.parentHasCheck) {
	                    columns = [{
	                        dataKey: 'jsxwhite',
	                        width: 46,
	                        type: 'empty'
	                    }].concat(columns);
	                }

	        if ((!!props.subComp || !!props.renderSubComp) && props.renderModel !== 'tree') {
	            columns = [{
	                dataKey: 'jsxtreeIcon',
	                width: 34,
	                type: 'treeIcon'
	            }].concat(columns);
	        }
	        // no subComp but has passedData, means sub mode, parent should has tree icon,
	        // render tree icon placeholder
	        else if (!!props.passedData) {
	                columns = [{
	                    dataKey: 'jsxwhite',
	                    width: 34,
	                    type: 'empty'
	                }].concat(columns);
	            }

	        return columns;
	    };

	    Table.prototype.handleColumnPickerChange = function handleColumnPickerChange(checkedKeys) {
	        var _columns = deepcopy(this.state.columns);
	        var notRenderColumns = ['jsxchecked', 'jsxtreeIcon', 'jsxwhite'];

	        _columns.forEach(function (item, index) {
	            if ('group' in item) {
	                item.columns.forEach(function (ele, idx) {
	                    if (checkedKeys.indexOf(ele.dataKey) !== -1) {
	                        ele.hidden = false;
	                    } else {
	                        ele.hidden = true;
	                    }
	                });
	            } else {
	                if (checkedKeys.indexOf(item.dataKey) !== -1 || notRenderColumns.indexOf(item.dataKey) !== -1) {
	                    item.hidden = false;
	                } else {
	                    item.hidden = true;
	                }
	            }
	        });
	        this.setState({
	            columns: _columns
	        });
	    };

	    /**
	     * change SelectedRows data via checkbox, this function will pass to the Cell
	     * @param checked {boolean} the checkbox status
	     * @param rowIndex {number} the row Index
	     * @param fromMount {boolean} onSelect is called from cell Mount is not expected.
	     */

	    Table.prototype.changeSelected = function changeSelected(checked, rowIndex, fromMount) {

	        var me = this;
	        var _content = deepcopy(this.state.data);
	        var _data = _content.datas || _content.data;

	        me.checkboxColumn.type == 'radioSelector' ? _data.map(function (item, index) {
	            if (item.jsxid == rowIndex) {
	                item[me.checkboxColumnKey] = checked;
	                return item;
	            } else if (item[me.checkboxColumnKey]) {
	                item[me.checkboxColumnKey] = false;
	                return item;
	            }
	        }) : _data.map(function (item, index) {
	            if (item.jsxid == rowIndex) {
	                item[me.checkboxColumnKey] = checked;
	                return item;
	            }
	        });

	        me.setState({
	            data: _content
	        }, function () {
	            if (!fromMount) {
	                var data = me.state.data.datas || me.state.data.data;
	                var selectedRows = data.filter(function (item, index) {
	                    return item[me.checkboxColumnKey] == true;
	                });
	                !!me.props.rowSelection && !!me.props.rowSelection.onSelect && me.props.rowSelection.onSelect(checked, data[rowIndex], selectedRows);
	            }
	        });
	    };

	    Table.prototype.selectAll = function selectAll(checked) {

	        var me = this;
	        var _content = deepcopy(me.state.data);
	        var _data = _content.datas || _content.data;
	        var rowSelection = me.props.rowSelection;

	        var selectedRows = [];
	        _data = _data.forEach(function (item, index) {
	            var column = me.checkboxColumn;
	            var key = me.checkboxColumnKey;
	            if (!('isDisable' in column) || !column.isDisable(item)) {
	                item[key] = checked;
	                selectedRows.push(item);
	            }
	        });

	        if (!!rowSelection && !!rowSelection.onSelectAll) {
	            rowSelection.onSelectAll.apply(null, [checked, checked ? selectedRows : []]);
	        }
	        me.setState({
	            data: _content
	        });
	    };

	    Table.prototype.onPageChange = function onPageChange(current) {
	        var me = this;
	        me.setState({
	            currentPage: current
	        }, function () {
	            me.fetchData("pagination");
	        });
	    };

	    Table.prototype.handleShowSizeChange = function handleShowSizeChange(current, pageSize) {
	        var me = this;
	        me.setState({
	            currentPage: current,
	            pageSize: pageSize
	        }, function () {
	            me.fetchData("pagination");
	        });
	    };

	    Table.prototype.renderPager = function renderPager() {
	        var me = this;
	        var _me$state = me.state;
	        var data = _me$state.data;
	        var currentPage = _me$state.currentPage;
	        var pageSize = _me$state.pageSize;
	        var _me$props = me.props;
	        var showPagerTotal = _me$props.showPagerTotal;
	        var showPager = _me$props.showPager;
	        var locale = _me$props.locale;

	        if (showPager && data && data.totalCount) {
	            return React.createElement("div", { className: "kuma-uxtable-page" }, React.createElement(Pagination, { className: "mini", locale: locale, showSizeChanger: true, showTotal: showPagerTotal, total: data.totalCount, onShowSizeChange: me.handleShowSizeChange.bind(me),
	                onChange: me.onPageChange.bind(me), current: currentPage, pageSize: pageSize }));
	        }
	    };

	    Table.prototype.handleOrderColumnCB = function handleOrderColumnCB(type, column) {
	        var me = this;
	        me.setState({
	            activeColumn: column,
	            orderType: type
	        }, function () {
	            me.fetchData("order");
	        });
	    };

	    Table.prototype.handleActionBarSearch = function handleActionBarSearch(value) {
	        var me = this;
	        this.setState({
	            searchTxt: value
	        }, function () {
	            me.fetchData("search");
	        });
	    };

	    Table.prototype.getData = function getData(validate) {
	        var me = this;
	        var pass = true;
	        if (validate !== false) {
	            for (name in me.fields) {
	                var fieldPass = me.fields[name]();

	                // if one field fails to pass, the table fails to pass
	                if (pass) {
	                    pass = fieldPass;
	                }
	            }
	        }
	        if (me.props.getSavedData) {
	            // 滤除可能为空的元素
	            var data = deepcopy(me.data);
	            data.data = data.data.filter(function (item) {
	                return item != undefined;
	            });
	            return {
	                data: data,
	                pass: pass
	            };
	        } else {
	            return {
	                data: me.state.data,
	                pass: pass
	            };
	        }
	    };

	    Table.prototype.hasFixColumn = function hasFixColumn() {
	        var props = this.props;
	        var _columns = props.jsxcolumns.filter(function (item) {
	            if (item.fixed) {
	                return true;
	            }
	        });
	        if (_columns.length > 0) {
	            return true;
	        }
	        return false;
	    };

	    Table.prototype.renderHeader = function renderHeader(renderHeaderProps) {

	        if (!this.props.showHeader) {
	            return;
	        }

	        if (this.hasFixColumn()) {
	            return React.createElement("div", { className: "kuma-uxtable-header-wrapper" }, React.createElement(Header, _extends({}, renderHeaderProps, { fixedColumn: "fixed", key: "grid-header-fixed" })), React.createElement(Header, _extends({}, renderHeaderProps, { fixedColumn: "scroll", key: "grid-header-scroll" })));
	        } else {
	            return React.createElement("div", { className: "kuma-uxtable-header-wrapper" }, React.createElement(Header, _extends({}, renderHeaderProps, { fixedColumn: "no" })));
	        }
	    };

	    Table.prototype.renderTbody = function renderTbody(renderBodyProps, bodyHeight) {

	        if (this.hasFixColumn()) {
	            var subComp = renderBodyProps.subComp;

	            var fixedBodyProps = _objectWithoutProperties(renderBodyProps, ["subComp"]);

	            return React.createElement("div", { className: "kuma-uxtable-body-wrapper", style: { height: bodyHeight } }, React.createElement(Tbody, _extends({}, fixedBodyProps, { fixedColumn: "fixed", key: "grid-body-fixed" })), React.createElement(Tbody, _extends({}, renderBodyProps, { fixedColumn: "scroll", key: "grid-body-scroll" })));
	        } else {
	            return React.createElement("div", { className: "kuma-uxtable-body-wrapper", style: { height: bodyHeight } }, React.createElement(Tbody, _extends({}, renderBodyProps, { fixedColumn: "no" })));
	        }
	    };

	    Table.prototype.render = function render() {
	        var _classnames;

	        var props = this.props;
	        var bodyHeight = undefined;
	        // if table is in sub mode, people always want to align the parent
	        // and the sub table, so width should not be cared.
	        var headerHeight = props.headerHeight;

	        var _style = {
	            width: !!props.passedData ? "auto" : props.width,
	            height: props.height
	        };
	        var actionBarHeight = props.actionBar ? props.actionBarHeight : 0;
	        var pagerHeight = props.showPager && this.state.data && this.state.data.totalCount ? 50 : 0;

	        // decide whether the table has column groups
	        var hasGroup = false;
	        for (var i = 0; i < this.state.columns.length; i++) {
	            if ('group' in this.state.columns[i]) {
	                hasGroup = true;
	                break;
	            }
	        }

	        headerHeight = headerHeight || (hasGroup ? 80 : 40);

	        if (props.height == 'auto') {
	            bodyHeight = 'auto';
	        } else {
	            bodyHeight = props.height == "100%" ? props.height : props.height - headerHeight - actionBarHeight - pagerHeight;
	        }
	        var renderBodyProps = {
	            columns: this.state.columns,
	            data: this.state.data ? this.state.data.datas || this.state.data.data : [],
	            rowSelection: props.rowSelection,
	            addRowClassName: props.addRowClassName,
	            subComp: props.subComp,
	            renderSubComp: props.renderSubComp,
	            mask: this.state.showMask,
	            rowHeight: props.rowHeight,
	            loadingText: props.loadingText,
	            height: bodyHeight,
	            width: props.width,
	            root: this,
	            mode: props.mode,
	            renderModel: props.renderModel,
	            levels: props.levels,
	            changeSelected: this.changeSelected.bind(this),
	            handleDataChange: this.handleDataChange.bind(this),
	            attachCellField: this.attachCellField.bind(this),
	            detachCellField: this.detachCellField.bind(this),
	            key: 'grid-body'
	        },
	            renderHeaderProps = {
	            columns: this.state.columns,
	            activeColumn: this.state.activeColumn,
	            orderType: this.state.orderType,
	            checkAll: this.selectAll.bind(this),
	            columnPicker: props.showColumnPicker,
	            showHeaderBorder: props.showHeaderBorder,
	            handleColumnPickerChange: this.handleColumnPickerChange.bind(this),
	            headerHeight: props.headerHeight,
	            width: props.width,
	            mode: props.mode,
	            orderColumnCB: this.handleOrderColumnCB.bind(this),
	            key: 'grid-header'
	        };

	        var actionBar = undefined;

	        if (props.actionBar || props.showSearch) {
	            var renderActionProps = {
	                onSearch: this.handleActionBarSearch.bind(this),
	                actionBarConfig: this.props.actionBar,
	                showSearch: this.props.showSearch,
	                searchBarPlaceholder: this.props.searchBarPlaceholder,
	                key: 'grid-actionbar'
	            };
	            actionBar = React.createElement(ActionBar, renderActionProps);
	        }

	        return React.createElement("div", { className: classnames((_classnames = {}, _classnames[props.jsxprefixCls] = true, _classnames["kuma-subgrid-mode"] = !!props.passedData, _classnames)), style: _style }, actionBar, React.createElement("div", { className: "kuma-uxtable-content", style: { width: !!props.passedData ? "auto" : props.width } }, this.renderHeader(renderHeaderProps), this.renderTbody(renderBodyProps, bodyHeight)), this.renderPager());
	    };

	    ///////////////////////// Util Method /////////////////////////

	    /**
	     * add some specific value for each row data which will be used in manipulating data & rendering.
	     * used in record API.
	     */

	    Table.prototype.addJSXIdsForRecord = function addJSXIdsForRecord(objAux) {
	        var me = this;
	        if (objAux instanceof Array) {
	            objAux = objAux.map(function (item) {
	                if (item.jsxid == undefined || item.jsxid == null) {
	                    item.jsxid = me.uid++;
	                }
	                if (!item.__mode__) {
	                    item.__mode__ = Const.MODE.EDIT;
	                }
	                return item;
	            });
	        } else {
	            objAux.jsxid = me.uid++;
	        }
	        return objAux;
	    };

	    /**
	     * add some specific value for each row data which will be used in manipulating data & rendering.
	     * used in method fetchData
	     */

	    Table.prototype.addValuesInData = function addValuesInData(objAux) {
	        if (!objAux || !objAux.datas && !objAux.data) return;
	        var me = this;
	        var data = objAux.datas || objAux.data;
	        data.forEach(function (node) {
	            node.jsxid = me.uid++;
	            node.__mode__ = node.__mode__ || Const.MODE.VIEW;
	            me.addValuesInData(node);
	        });
	        return objAux;
	    };

	    /**
	     * merge data
	     */

	    Table.prototype.mergeData = function mergeData(data, obj) {
	        var newData = deepcopy(data);

	        // code compatible
	        if (!!newData.datas) {
	            newData.datas = newData.datas.concat(obj);
	        } else if (!!newData.data) {
	            newData.data = newData.data.concat(obj);
	        }
	        newData.totalCount++;
	        return newData;
	    };

	    /**
	     * insert some data into this.state.data
	     * @param objAux {Array or Object} datum or data need to be inserted
	     */

	    Table.prototype.insertRecords = function insertRecords(objAux) {
	        if ((typeof objAux === "undefined" ? "undefined" : _typeof(objAux)) !== "object") return;
	        var me = this;
	        if (!(objAux instanceof Array)) {
	            objAux = [objAux];
	        }

	        objAux = this.addJSXIdsForRecord(objAux);

	        // me.data = me.mergeData(me.data, objAux);
	        this.setState({
	            data: me.mergeData(me.state.data, objAux)
	        });
	    };

	    /**
	     * @param {objAux} {a:'b',c:'d',jsxid:''}
	     */

	    Table.prototype.updateRecord = function updateRecord(objAux, cb) {
	        var _data = this.state.data;

	        if (!_data) {
	            return;
	        }

	        if (_data.data || _data.datas) {
	            var data = _data.data || _data.datas;

	            data = data.map(function (item) {
	                if (item.jsxid == objAux.jsxid) {
	                    return objAux;
	                } else {
	                    return item;
	                }
	            });
	            if (!!_data.data) {
	                _data.data = data;
	            } else if (!!_data.datas) {
	                _data.datas = data;
	            }
	        }
	        this.setState({
	            data: _data
	        }, function () {
	            !!cb && cb();
	        });
	    };

	    Table.prototype.syncRecord = function syncRecord(objAux) {
	        var me = this;
	        var _data = me.data.data || me.data.datas;

	        me.updateRecord(objAux, function () {
	            var _stateData = me.state.data.data || me.state.data.datas;
	            // _data.forEach((item, index) => {
	            //     if (item.jsxid == objAux.jsxid) {
	            //         _data[index] = _stateData.filter((ele) => {
	            //             return ele.jsxid == objAux.jsxid
	            //         })[0];
	            //     }
	            // });
	            _stateData.forEach(function (item, index) {
	                if (item.jsxid == objAux.jsxid) {
	                    _data[index] = item;
	                }
	            });
	        });
	    };

	    Table.prototype.removeRecords = function removeRecords(objAux) {

	        //at least one record
	        var me = this;
	        var content = this.state.data;
	        var data = content.data || content.datas;

	        // deepcopy protect
	        var _content = deepcopy(content),
	            _data = _content.data || _content.datas;

	        if (Object.prototype.toString.call(objAux) !== "[object Array]") {
	            objAux = [objAux];
	        }

	        objAux.map(function (item) {
	            _data.forEach(function (element, index, array) {
	                if (element.jsxid == item.jsxid) {
	                    _data.splice(index, 1);
	                }
	            });
	        });

	        me.data = _content;

	        this.setState({
	            data: _content
	        });
	    };

	    //////////////////////// CURD for gird ////////////////

	    Table.prototype.addEmptyRow = function addEmptyRow() {
	        this.insertRecords({});
	    };

	    Table.prototype.addRow = function addRow(rowData) {
	        this.insertRecords(rowData);
	    };

	    Table.prototype.resetRow = function resetRow(rowData) {
	        var me = this;
	        var updateData = {};
	        var _data = me.data.datas || me.data.data;
	        for (var i = 0; i < _data.length; i++) {
	            if (_data[i].jsxid == rowData.jsxid) {
	                updateData = deepcopy(_data[i]);
	                break;
	            }
	        }
	        updateData['__mode__'] = Const.MODE.EDIT;
	        this.updateRecord(updateData);
	    };

	    Table.prototype.delRow = function delRow(rowData) {
	        this.removeRecords(rowData);
	    };

	    Table.prototype.editRow = function editRow(rowData) {
	        rowData.__mode__ = Const.MODE.EDIT;
	        this.updateRecord(rowData);
	    };

	    Table.prototype.viewRow = function viewRow(rowData) {
	        rowData.__mode__ = Const.MODE.VIEW;
	        this.updateRecord(rowData);
	    };

	    Table.prototype.saveRow = function saveRow(rowData) {
	        rowData.__mode__ = Const.MODE.VIEW;
	        rowData.__edited__ = true;
	        this.syncRecord(rowData);
	    };

	    Table.prototype.saveAllRow = function saveAllRow() {
	        var me = this;
	        var data = deepcopy(me.state.data.data || me.state.data.datas);
	        data.forEach(function (item) {
	            me.saveRow(item);
	        });
	    };

	    Table.prototype.editAllRow = function editAllRow() {
	        var me = this;
	        var data = deepcopy(me.data.data || me.data.datas);
	        data.forEach(function (item) {
	            me.editRow(item);
	        });
	    };

	    Table.prototype.toggleSubComp = function toggleSubComp(rowData) {
	        var _content = deepcopy(this.state.data);
	        var _data = _content.data || _content.datas;

	        if (_data) {
	            _data = _data.map(function (item) {
	                if (item.jsxid == rowData.jsxid) {
	                    item.showSubComp = !item.showSubComp;
	                    return item;
	                } else {
	                    return item;
	                }
	            });
	        }
	        this.setState({
	            data: _content
	        });
	    };

	    return Table;
	}(React.Component);

	;

	Table.defaultProps = {
	    jsxprefixCls: "kuma-uxtable",
	    locale: "zh-cn",
	    showHeader: true,
	    width: "auto",
	    height: "auto",
	    mode: Const.MODE.EDIT,
	    renderModel: '',
	    levels: 1,
	    actionBarHeight: 40,
	    fetchDataOnMount: true,
	    doubleClickToEdit: true,
	    rowSelector: 'checkboxSelector',
	    showPager: true,
	    showColumnPicker: true,
	    showHeaderBorder: false,
	    showPagerTotal: false,
	    showMask: false,
	    showSearch: false,
	    getSavedData: true,
	    pageSize: 10,
	    rowHeight: 76,
	    fetchParams: {},
	    currentPage: 1,
	    queryKeys: [],
	    emptyText: "暂无数据",
	    searchBarPlaceholder: "搜索表格内容",
	    loadingText: "loading",
	    processData: function processData(data) {
	        return data;
	    },
	    beforeFetch: function beforeFetch(obj) {
	        return obj;
	    },
	    onFetchError: function onFetchError() {},
	    addRowClassName: function addRowClassName() {},
	    onChange: function onChange() {}
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	Table.propTypes = {
	    /**
	     * @title 国际化
	     * @veFieldStyle block
	     */
	    locale: React.PropTypes.string,
	    /**
	     * @title 列配置
	     */
	    jsxcolumns: React.PropTypes.arrayOf(React.PropTypes.object),
	    /**
	     * @title 表格宽度
	     */
	    width: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
	    /**
	     * @title 表格高度
	     */
	    height: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.number]),
	    /**
	     * @title 表头高度
	     */
	    headerHeight: React.PropTypes.number,
	    /**
	     * @title 每页显示条数
	     * @veFieldStyle block
	     */
	    pageSize: React.PropTypes.number,
	    /**
	     * @title 哪些参数传递给 subComp (即将废除)
	     * @veIgnore
	     */
	    queryKeys: React.PropTypes.array,
	    /**
	     * @title 是否在初始化时请求数据
	     * @veFieldStyle block
	     */
	    fetchDataOnMount: React.PropTypes.bool,
	    /**
	     * @title 是否双击进入编辑模式
	     * @veFieldStyle block
	     */
	    doubleClickToEdit: React.PropTypes.bool,
	    /**
	     * @title 是否显示列选择器
	     * @veFieldStyle block
	     */
	    showColumnPicker: React.PropTypes.bool,
	    /**
	     * @title 是否显示分页
	     * @veFieldStyle block
	     */
	    showPager: React.PropTypes.bool,
	    /**
	     * @title 分页中是否显示总条数
	     * @veFieldStyle block
	     */
	    showPagerTotal: React.PropTypes.bool,
	    /**
	     * @title 是否显示表格头
	     * @veFieldStyle block
	     */
	    showHeader: React.PropTypes.bool,
	    /**
	     * @title 是否显示遮罩
	     * @veFieldStyle block
	     * @veIgnore
	     */
	    showMask: React.PropTypes.bool,
	    /**
	     * @title 是否显示搜索框
	     * @veFieldStyle block
	     */
	    showSearch: React.PropTypes.bool,
	    /**
	     * @title 搜索框占位符
	     * @veFieldStyle block
	     */
	    searchBarPlaceholder: React.PropTypes.string,
	    /**
	     * @title 加载中文案
	     * @veFieldStyle block
	     */
	    loadingText: React.PropTypes.string,
	    /**
	     * @title 子组件(即将废除)
	     * @veIgnore
	     */
	    subComp: React.PropTypes.element,
	    /**
	     * @title 无数据时的文案
	     * @veFieldStyle block
	     */
	    emptyText: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
	    /**
	     * @title 数据源（手动）
	     * @veFieldStyle block
	     */
	    jsxdata: React.PropTypes.object,
	    /**
	     * @title 数据源（url）
	     * @veFieldStyle block
	     */
	    fetchUrl: React.PropTypes.string,
	    /**
	     * @title 请求携带的参数
	     * @veFieldStyle block
	     */
	    fetchParams: React.PropTypes.object,
	    /**
	     * @title 列选择器的类型
	     * @veFieldStyle block
	     */
	    rowSelector: React.PropTypes.string,
	    /**
	     * @title 操作栏配置
	     * @veFieldStyle block
	     */
	    actionBar: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]),
	    /**
	     * @title 处理数据的回调
	     */
	    processData: React.PropTypes.func,
	    /**
	     * @title 发起请求前的回调
	     */
	    beforeFetch: React.PropTypes.func,
	    /**
	     * @title 请求出错时的回调
	     */
	    onFetchError: React.PropTypes.func,
	    /**
	     * @title 渲染每一行前用于添加特殊类名的回调
	     */
	    addRowClassName: React.PropTypes.func,
	    /**
	     * @veIgnore
	     */
	    passedData: React.PropTypes.object,
	    /**
	     * @title getData 获取的是否是保存之后的数据
	     */
	    getSavedData: React.PropTypes.bool,
	    /**
	     * @title 行内编辑时触发的回调
	     */
	    onChange: React.PropTypes.func,
	    /**
	     * @title 是否是树模式
	     * @veIgnore
	     */
	    renderModel: React.PropTypes.string,
	    /**
	     * @title 树的层级
	     * @veIgnore
	     */
	    levels: React.PropTypes.number
	};

	Table.displayName = "Table";
	Table.CellField = CellField;
	Table.Constants = Const;

	module.exports = Table;

/***/ },
/* 657 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Created by xy on 15/4/13.
	 */
	var CheckBox = __webpack_require__(658);
	var assign = __webpack_require__(659);
	var Const = __webpack_require__(223);
	var Menu = __webpack_require__(467);
	var Dropdown = __webpack_require__(277);
	var Tooltip = __webpack_require__(157);
	var classnames = __webpack_require__(5);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Header = function (_React$Component) {
	    _inherits(Header, _React$Component);

	    function Header(props) {
	        _classCallCheck(this, Header);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            pickerDisplay: false
	        };
	        return _this;
	    }

	    Header.prototype.componentDidMount = function componentDidMount() {
	        var me = this;
	        me.handleGlobalClick = me.handleGlobalClick.bind(me);
	        $(document).on('click.uxcore-grid-header', me.handleGlobalClick);
	    };

	    Header.prototype.componentWillUnmount = function componentWillUnmount() {
	        var me = this;
	        $(document).off('click.uxcore-grid-header', me.handleGlobalClick);
	    };

	    Header.prototype.handleGlobalClick = function handleGlobalClick(e) {
	        if (this.props.columnPicker) {
	            this.hideColumnPicker(e);
	        }
	    };

	    Header.prototype.hideColumnPicker = function hideColumnPicker(e) {
	        var target = e.target;
	        // if ($(target).parents('.kuma-uxtable-column-picker-dropdown').length == 0
	        //     && $(target).parents('.kuma-column-picker-container').length == 0
	        //     && !$(target).hasClass('kuma-uxtable-column-picker-dropdown')
	        //     && !$(target).hasClass('kuma-column-picker-container')) {
	        //     this.setState({
	        //         pickerDisplay: false
	        //     });
	        // }
	    };

	    Header.prototype.handleCheckBoxChange = function handleCheckBoxChange() {
	        var v = this.refs.checkbox.getValue();
	        this.props.checkAll.apply(null, [v]);
	    };

	    // handleColumnPicker(e) {
	    //     e.stopPropagation();
	    //     this.setState({
	    //         pickerDisplay: true
	    //     });
	    // }

	    Header.prototype.handlePickerSelect = function handlePickerSelect(info) {
	        this.props.handleColumnPickerChange(info.selectedKeys);
	    };

	    Header.prototype.handlePickerDeselect = function handlePickerDeselect(info) {
	        this.props.handleColumnPickerChange(info.selectedKeys);
	    };

	    Header.prototype.handlePickerVisibleChange = function handlePickerVisibleChange(visible) {
	        this.setState({
	            pickerDisplay: visible
	        });
	    };

	    Header.prototype.handleColumnOrder = function handleColumnOrder(column) {
	        var me = this;
	        var _me$props = me.props;
	        var orderColumnCB = _me$props.orderColumnCB;
	        var activeColumn = _me$props.activeColumn;
	        var orderType = _me$props.orderType;

	        var type = 'desc';
	        var typeMap = {
	            desc: 'asc',
	            asc: 'none',
	            none: 'desc'
	        };
	        if (activeColumn && column.dataKey == activeColumn.dataKey && orderType) {
	            type = typeMap[orderType];
	        }
	        orderColumnCB && orderColumnCB(type, column);
	    };

	    Header.prototype.getSelectedKeys = function getSelectedKeys() {
	        var me = this;
	        var columns = me.props.columns;

	        var _columns = [];
	        var checkedKeys = [];
	        columns.forEach(function (item, index) {
	            if ('group' in item) {
	                _columns = _columns.concat(item.columns);
	            } else {
	                _columns.push(item);
	            }
	        });
	        _columns.forEach(function (item, index) {
	            if (!item.hidden) {
	                checkedKeys.push(item.dataKey);
	            }
	        });
	        return checkedKeys;
	    };

	    Header.prototype.renderColumnSelect = function renderColumnSelect() {
	        var me = this;
	        var columns = me.props.columns;

	        var notRenderColumns = ['jsxchecked', 'jsxtreeIcon', 'jsxwhite'];
	        var options = [];
	        columns.forEach(function (item, index) {
	            if (notRenderColumns.indexOf(item.dataKey) == -1) {
	                options.push(React.createElement(Menu.Item, { key: item.dataKey }, item.title));
	            }
	        });
	        return React.createElement(Menu, { multiple: true, selectedKeys: me.getSelectedKeys(), onSelect: me.handlePickerSelect.bind(me), onDeselect: me.handlePickerDeselect.bind(me) }, options);
	    };

	    Header.prototype.renderPicker = function renderPicker() {
	        var me = this;
	        var pickerDisplay = me.state.pickerDisplay;

	        var dropdownAlign = {
	            bottomRight: {
	                points: ['br', 'tr'],
	                overflow: {
	                    adjustX: 1,
	                    adjustY: 1
	                },
	                offset: [0, -4],
	                targetOffset: [0, 0]
	            }
	        };

	        return React.createElement('div', { className: classnames({
	                "kuma-column-picker-container": true,
	                "hasGroup": me.hasGroup
	            }) }, React.createElement(Dropdown, { trigger: ['click'], overlay: me.renderColumnSelect(), visible: pickerDisplay, overlayClassName: 'kuma-uxtable-column-picker-dropdown',
	            align: dropdownAlign, onVisibleChange: me.handlePickerVisibleChange.bind(me) }, React.createElement('i', { className: 'kuma-icon kuma-icon-target-list kuma-column-picker' })));
	    };

	    Header.prototype.renderOrderIcon = function renderOrderIcon(column) {
	        var me = this;
	        var _me$props2 = me.props;
	        var orderType = _me$props2.orderType;
	        var activeColumn = _me$props2.activeColumn;

	        if (column.ordered) {
	            var _classnames, _classnames2;

	            var desc = "iconfontdown",
	                asc = "iconfontup";
	            return React.createElement('span', { className: 'kuma-uxtable-h-sort', onClick: me.handleColumnOrder.bind(me, column) }, React.createElement('i', { className: classnames((_classnames = {}, _classnames['kuma-icon kuma-icon-' + asc] = true, _classnames['active'] = activeColumn && activeColumn.dataKey === column.dataKey && orderType == 'asc', _classnames)) }), React.createElement('i', { className: classnames((_classnames2 = {}, _classnames2['kuma-icon kuma-icon-' + desc] = true, _classnames2['active'] = activeColumn && activeColumn.dataKey === column.dataKey && orderType == 'desc', _classnames2)) }));
	        }
	    };

	    Header.prototype.renderMessageIcon = function renderMessageIcon(column) {
	        if (!column.message) return;
	        return React.createElement(Tooltip, { overlay: React.createElement('div', { className: 'kuma-uxtable-column-message' }, column.message) }, React.createElement('i', { className: 'kuma-icon kuma-icon-information' }));
	    };

	    Header.prototype.renderColumn = function renderColumn(item, index, hasGroup, last) {

	        if (item.hidden) return;
	        var me = this;
	        var noBorderColumn = ['jsxchecked', 'jsxtreeIcon', 'jsxwhite'];
	        var _style = {
	            width: item.width ? item.width : 100,
	            textAlign: item.align ? item.align : "left"
	        };
	        var _v = undefined;

	        if (hasGroup) {
	            assign(_style, {
	                height: 100,
	                lineHeight: 100 + 'px'
	            });
	        }

	        if (item.type == 'checkbox' || item.type == 'checkboxSelector') {
	            assign(_style, {
	                paddingRight: 4,
	                paddingLeft: 12,
	                width: item.width ? item.width : 92,
	                borderRight: 'none'
	            });

	            var checkBoxProps = {
	                ref: 'checkbox',
	                disable: me.props.mode !== Const.MODE.VIEW ? item.disable : true,
	                onchange: me.handleCheckBoxChange.bind(me)
	            };

	            _v = React.createElement(CheckBox, checkBoxProps);
	        } else {
	            _v = React.createElement('span', { title: item.title }, item.title);
	        }

	        if (noBorderColumn.indexOf(item.dataKey) !== -1 || last) {
	            assign(_style, {
	                borderRight: 'none'
	            });
	        }

	        return React.createElement('div', { key: index, className: classnames({
	                "kuma-uxtable-cell": true,
	                "show-border": me.props.showHeaderBorder
	            }), style: _style }, _v, me.renderMessageIcon(item), me.renderOrderIcon(item));
	    };

	    Header.prototype.renderColumns = function renderColumns(_columns) {
	        var me = this;

	        var columns = _columns.map(function (item, index) {
	            var last = index == _columns.length - 1;
	            if ('group' in item) {
	                // First determine whether the group should be rendered, if all columns
	                // is hidden, the column group should not be rendered.
	                var shouldRenderGroup = item.columns.some(function (column, i) {
	                    return !column.hidden;
	                });
	                if (shouldRenderGroup) {
	                    return React.createElement('div', { className: 'kuma-uxtable-header-column-group', key: index }, React.createElement('div', { className: 'kuma-uxtable-header-group-name' }, item.group), item.columns.map(function (column, i) {
	                        return me.renderColumn(column, i, false, last);
	                    }));
	                }
	            } else {
	                return me.renderColumn(item, index, me.hasGroup, last);
	            }
	        });
	        return columns;
	    };

	    Header.prototype.render = function render() {

	        var props = this.props,
	            me = this,
	            _picker = undefined,
	            _width = 0,
	            headerWrapClassName = undefined,
	            _headerStyle = {},
	            _columns = undefined;

	        if (props.columnPicker && (props.fixedColumn == 'no' || props.fixedColumn == 'scroll')) {
	            _picker = this.renderPicker();
	        }

	        if (props.fixedColumn == 'fixed') {
	            _columns = props.columns.filter(function (item) {
	                if (item.fixed && !item.hidden) {
	                    if (!item.width) {
	                        item.width = 100;
	                    }
	                    _width = item.width * 1 + _width;
	                    return true;
	                }
	            });
	            assign(_headerStyle, {
	                width: _width,
	                minWidth: _width
	            });
	            headerWrapClassName = "kuma-uxtable-header-fixed";
	        } else if (props.fixedColumn == 'scroll') {
	            _columns = props.columns.filter(function (item) {
	                if (!item.fixed) {
	                    return true;
	                } else if (!item.hidden) {
	                    if (!item.width) {
	                        item.width = 100;
	                    }
	                    _width = item.width * 1 + _width;
	                }
	            });
	            assign(_headerStyle, {
	                width: props.width - _width - 3,
	                minWidth: props.width - _width - 3
	            });
	            headerWrapClassName = "kuma-uxtable-header-scroll";
	        } else {
	            _columns = props.columns;
	            headerWrapClassName = "kuma-uxtable-header-no";
	        }

	        me.hasGroup = false;
	        for (var i = 0; i < _columns.length; i++) {
	            if ('group' in _columns[i]) {
	                me.hasGroup = true;
	                break;
	            }
	        }

	        assign(_headerStyle, {
	            height: props.headerHeight ? props.headerHeight : me.hasGroup ? 80 : 50,
	            lineHeight: (props.headerHeight ? props.headerHeight : 50) + "px"
	        });

	        return React.createElement('div', { className: headerWrapClassName, style: _headerStyle }, React.createElement('div', { className: props.jsxprefixCls }, me.renderColumns(_columns), _picker));
	    };

	    return Header;
	}(React.Component);

	;

	Header.propTypes = {};

	Header.defaultProps = {
	    jsxprefixCls: "kuma-uxtable-header"
	};

		module.exports = Header;

/***/ },
/* 658 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];for (var key in source) {
	            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }return target;
	};

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * A checkbox field
	 */

	var Const = __webpack_require__(223);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var CheckBox = function (_React$Component) {
	    _inherits(CheckBox, _React$Component);

	    function CheckBox(props) {
	        _classCallCheck(this, CheckBox);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    CheckBox.prototype.handleChange = function handleChange(e) {
	        var v = this.getValue();
	        v = v ? 'checked' : '';
	        this.props.onchange.apply(null, [e]);
	    };

	    CheckBox.prototype.getValue = function getValue() {
	        return this.refs.checkbox.checked;
	    };

	    CheckBox.prototype.render = function render() {

	        var props = this.props;

	        if (props.mode !== Const.MODE.VIEW) {
	            var renderProps = {
	                className: "kuma-checkbox",
	                checked: this.props.jsxchecked,
	                onChange: this.handleChange.bind(this)
	            };
	            if (!!props.disable) {
	                renderProps.disabled = true;
	            }
	            return React.createElement('label', { className: 'kuma-uxtable-row-selector' }, React.createElement('input', _extends({ type: 'checkbox', ref: 'checkbox' }, renderProps)), React.createElement('s', null));
	        } else {

	            var renderProps = {
	                className: "kuma-checkbox",
	                checked: this.props.jsxchecked,
	                disabled: true
	            };
	            return React.createElement('label', { className: 'kuma-uxtable-row-selector' }, React.createElement('input', _extends({ type: 'checkbox', ref: 'checkbox' }, renderProps)), React.createElement('s', null));
	        }
	    };

	    return CheckBox;
	}(React.Component);

	;

	CheckBox.propTypes = {};

	CheckBox.defaultProps = {};

	exports["default"] = CheckBox;
	module.exports = exports['default'];

/***/ },
/* 659 */
33,
/* 660 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Created by xy on 15/4/13.
	 */

	var Row = __webpack_require__(661);
	var Mask = __webpack_require__(673);
	var util = __webpack_require__(674);
	var deepcopy = __webpack_require__(669);

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Tbody = function (_React$Component) {
	    _inherits(Tbody, _React$Component);

	    function Tbody(props) {
	        _classCallCheck(this, Tbody);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {};
	        return _this;
	    }

	    Tbody.prototype.componentDidMount = function componentDidMount() {
	        var me = this;
	        me.rootEl = ReactDOM.findDOMNode(me.refs.root);
	        me.scrollHandler = me.onScroll.bind(me);
	        $(me.rootEl).on("scroll", me.scrollHandler);
	    };

	    Tbody.prototype.componentWillUnmount = function componentWillUnmount() {
	        var me = this;
	        me.resizeTimer = null;
	        $(me.rootEl).off("scroll", me.scrollHandler);
	    };

	    Tbody.prototype.renderEmptyData = function renderEmptyData() {

	        if (this.props.data.length == 0 && !this.props.mask) {
	            var _style = {
	                lineHeight: this.props.height - 10 + "px"
	            };
	            return React.createElement("div", { className: "kuma-uxtable-body-emptyword", style: _style }, this.props.root.props.emptyText);
	        }
	    };

	    Tbody.prototype.onScroll = function onScroll(e) {
	        // TODO: remove jquery animation
	        //       merge classname scroll/no/fixed

	        this.el = ReactDOM.findDOMNode(this);
	        var $tableEl = $(this.el).parents(".kuma-uxtable");
	        if (this.props.fixedColumn == 'no') {
	            $tableEl.find('.kuma-uxtable-header-no').animate({
	                scrollLeft: $tableEl.find('.kuma-uxtable-body-no').scrollLeft()
	            }, 0);
	            return;
	        }

	        var target = $(e.target);
	        if (target.hasClass('kuma-uxtable-body-scroll')) {

	            $tableEl.find('.kuma-uxtable-body-fixed').animate({
	                scrollTop: $tableEl.find('.kuma-uxtable-body-scroll').scrollTop()
	            }, 0);
	            $tableEl.find('.kuma-uxtable-header-scroll').animate({
	                scrollLeft: $tableEl.find('.kuma-uxtable-body-scroll').scrollLeft()
	            }, 0);
	        } else {
	            $tableEl.find('.kuma-uxtable-body-scroll').animate({
	                scrollTop: $tableEl.find('.kuma-uxtable-body-fixed').scrollTop()
	            }, 0);
	        }
	    };

	    Tbody.prototype.render = function render() {

	        var me = this,
	            _props = me.props,
	            _columns = _props.columns,
	            _data = _props.data.length > 0 ? _props.data : [],
	            _style = {},
	            _width = 0,
	            bodyWrapClassName = undefined;

	        if (_props.fixedColumn == 'fixed') {
	            _columns = _props.columns.filter(function (item) {
	                if (item.fixed && !item.hidden) {
	                    if (!item.width) {
	                        item.width = 100;
	                    }
	                    _width = item.width * 1 + _width;
	                    return true;
	                }
	            });
	            _style = {
	                width: _width,
	                minWidth: _width
	            };
	            bodyWrapClassName = "kuma-uxtable-body-fixed";
	        } else if (_props.fixedColumn == 'scroll') {
	            var fixedWidth = 0;
	            _columns = _props.columns.filter(function (item) {
	                if (!item.fixed) {
	                    return true;
	                } else if (!item.hidden) {
	                    if (!item.width) {
	                        item.width = 100;
	                    }
	                    _width = item.width * 1 + _width;
	                }
	            });

	            // content-box: border-box
	            var delta = 2;
	            if (util.isIE(8)) {
	                delta = 3;
	            }
	            _style = {
	                width: _props.width - _width - delta, //change 2 to 3, fix ie8 issue
	                minWidth: _props.width - _width - delta
	            };
	            bodyWrapClassName = "kuma-uxtable-body-scroll";
	        } else {
	            bodyWrapClassName = "kuma-uxtable-body-no";
	        }
	        return React.createElement("div", { className: bodyWrapClassName, ref: "root", style: _style }, React.createElement("ul", { className: this.props.jsxprefixCls }, this.renderEmptyData(), _data.map(function (item, index) {
	            var renderProps = {
	                columns: _columns,
	                rowIndex: item.jsxid, //tree mode, rowIndex need think more, so use jsxid
	                rowData: deepcopy(_data[index]),
	                index: index,
	                data: _data,
	                root: _props.root,
	                addRowClassName: _props.addRowClassName,
	                rowSelection: _props.rowSelection,
	                changeSelected: me.props.changeSelected,
	                subComp: _props.subComp,
	                renderSubComp: _props.renderSubComp,
	                actions: _props.actions,
	                key: 'row' + index,
	                mode: _props.mode,
	                renderModel: _props.renderModel,
	                fixedColumn: _props.fixedColumn,
	                level: 1,
	                levels: _props.levels,
	                handleDataChange: _props.handleDataChange,
	                attachCellField: _props.attachCellField,
	                detachCellField: _props.detachCellField,
	                visible: true
	            };
	            return React.createElement(Row, renderProps);
	        }), React.createElement(Mask, { visible: _props.mask, text: _props.loadingText })));
	    };

	    return Tbody;
	}(React.Component);

	;

	Tbody.propTypes = {};

	Tbody.defaultProps = {
	    jsxprefixCls: "kuma-uxtable-body"
	};

	exports["default"] = Tbody;
	module.exports = exports['default'];

/***/ },
/* 661 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Created by xy on 15/4/13.
	 */
	var Cell = __webpack_require__(662);
	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(659);
	var Const = __webpack_require__(223);
	var deepEqual = __webpack_require__(670);
	var deepcopy = __webpack_require__(669);

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Row = function (_React$Component) {
	    _inherits(Row, _React$Component);

	    function Row(props) {
	        _classCallCheck(this, Row);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            expanded: _this.props.level < _this.props.levels ? true : false
	        };
	        return _this;
	    }

	    Row.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
	        // 需要考虑的 prop 包括
	        // columns, rowIndex(s), rowData, index(s), addRowClassName(f), rowSelection, subComp(f), actions
	        // mode(s), renderModel(s), fixedColumn(s), levels(s)
	        var me = this;
	        var shouldUpdate = false;
	        ['rowIndex', 'index', 'mode', 'renderModel', 'fixedColumn', 'levels', 'addRowClassName', 'subComp'].forEach(function (item) {
	            if (me.props[item] !== nextProps[item]) {
	                shouldUpdate = true;
	            }
	        });
	        if (!shouldUpdate) {
	            ['columns', 'rowData', 'rowSelection', 'actions'].forEach(function (item, index) {
	                if (!deepEqual(me.props[item], nextProps[item])) {
	                    shouldUpdate = true;
	                }
	            });
	        };
	        if (!shouldUpdate) {
	            shouldUpdate = me.state.expanded !== nextState.expanded;
	        }
	        return shouldUpdate;
	    };

	    Row.prototype.handleClick = function handleClick(rowData) {
	        var me = this;
	    };

	    Row.prototype.handleDoubleClick = function handleDoubleClick(rowData) {
	        var table = this.props.root;
	        if (table.props.doubleClickToEdit) {
	            table.editRow(deepcopy(rowData));
	        }
	    };

	    Row.prototype.showSubCompFunc = function showSubCompFunc() {
	        var me = this;
	        me.props.root.toggleSubComp(me.props.rowData);
	    };

	    Row.prototype.renderSubComp = function renderSubComp() {
	        var props = this.props;

	        if (props.renderModel == 'tree') {
	            return false;
	        } else {
	            if (props.subComp) {
	                if (props.rowData.showSubComp) {
	                    var subComp = React.cloneElement(props.subComp, {
	                        passedData: this.props.rowData,
	                        parentHasCheckbox: !!this.props.rowSelection,
	                        parentHasCheck: !!this.props.rowSelection /////
	                    });
	                    return React.createElement('div', { className: 'kuma-uxtable-subrow', ref: 'subRow' }, subComp);
	                }
	                return false;
	            } else if (props.renderSubComp) {
	                var subComp = props.renderSubComp(deepcopy(props.rowData));
	                if (subComp && props.rowData.showSubComp) {
	                    return React.createElement('div', { className: 'kuma-uxtable-subrow', ref: 'subRow' }, subComp);
	                }
	                return false;
	            } else {
	                return false;
	            }
	        }
	    };

	    Row.prototype.renderChild = function renderChild() {

	        var props = this.props,
	            me = this,
	            children = [];

	        if (props.renderModel !== 'tree') {
	            return children;
	        }
	        if (props.rowData.datas) {
	            props.rowData.datas.forEach(function (node) {
	                var renderProps = assign({}, props, {
	                    level: me.props.level + 1,
	                    rowData: node,
	                    rowIndex: node.jsxid,
	                    key: node.jsxid,
	                    showSubComp: false,
	                    visible: me.state.expanded && me.props.visible
	                });
	                children.push(React.createElement(Row, renderProps));
	            });

	            var renderProps = {
	                key: "treeRow" + this.props.rowData.jsxid,
	                className: "kuma-uxtable-tree-row"
	            };

	            children = React.createElement('ul', renderProps, children);
	        }

	        return children;
	    };

	    Row.prototype.renderExpendIcon = function renderExpendIcon(rowIndex) {

	        var expandCollapseIcon = undefined,
	            props = this.props,
	            _expandIconClass = undefined;

	        if (props.renderModel !== 'tree') {
	            return false;
	        }

	        if (props.rowData.datas) {
	            if (!this.state.expanded) {

	                _expandIconClass = {
	                    "kuma-icon": true,
	                    "kuma-icon-tree-open-2": false,
	                    "kuma-icon-tree-close-2": true
	                };
	                _expandIconClass["kuma-uxtable-expandIcon-" + props.fixedColumn + "-" + rowIndex] = true;

	                expandCollapseIcon = React.createElement('span', { className: 'kuma-uxtable-tree-icon', 'data-type': props.fixedColumn, 'data-index': rowIndex,
	                    onClick: this.toggleExpanded.bind(this) }, React.createElement('i', { className: classnames(_expandIconClass) }));
	            } else {

	                _expandIconClass = {
	                    "kuma-icon": true,
	                    "kuma-icon-tree-open-2": true,
	                    "kuma-icon-tree-close-2": false
	                };
	                _expandIconClass["kuma-uxtable-expandIcon-" + props.fixedColumn + "-" + rowIndex] = true;

	                expandCollapseIcon = React.createElement('span', { className: 'kuma-uxtable-tree-icon', 'data-type': props.fixedColumn, 'data-index': rowIndex,
	                    onClick: this.toggleExpanded.bind(this) }, React.createElement('i', { className: classnames(_expandIconClass) }));
	            }
	        } else {
	            expandCollapseIcon = React.createElement('span', { className: 'kuma-uxtable-emptyicon' });
	        }
	        return expandCollapseIcon;
	    };

	    Row.prototype.renderIndent = function renderIndent() {
	        var indents = [];
	        if (this.props.renderModel == 'tree') {
	            for (var i = 0; i < this.props.level - 1; i++) {
	                var renderProps = {
	                    className: "indent",
	                    key: 'indent' + i
	                };
	                indents.push(React.createElement('span', renderProps));
	            }
	        }

	        return indents;
	    };

	    Row.prototype.toggleExpanded = function toggleExpanded(e) {
	        this.setState({
	            expanded: !this.state.expanded
	        });
	        e.stopPropagation();
	        var t = $(e.target);
	        if (!t.hasClass('kuma-uxtable-tree-icon')) {
	            t = t.parents('.kuma-uxtable-tree-icon');
	        }
	        if (t.data('type') == 'fixed') {
	            $(".kuma-uxtable-expandIcon-scroll" + "-" + t.data('index')).trigger('click');
	        } else if (t.data('type') == 'scroll') {
	            $(".kuma-uxtable-expandIcon-fixed" + "-" + t.data('index')).trigger('click');
	        }
	    };

	    Row.prototype.render = function render() {
	        var _classnames;

	        var props = this.props,
	            _columns = [],
	            _style = {},
	            _data = props.data,
	            me = this,
	            otherCls = props.addRowClassName(_data[props.rowIndex]);

	        if (!this.props.visible) {
	            _style = {
	                display: 'none'
	            };
	        }

	        props.columns.forEach(function (column, index) {
	            if ("group" in column) {
	                _columns = _columns.concat(column.columns);
	            } else {
	                _columns.push(column);
	            }
	        });

	        var firstVisableColumn = 0;

	        return React.createElement('li', { className: classnames((_classnames = {}, _classnames[this.props.prefixCls] = true, _classnames[otherCls] = !!otherCls, _classnames['even'] = props.rowIndex % 2 == 1 ? true : false, _classnames)), style: _style,
	            onClick: this.handleClick.bind(this, props.rowData),
	            onDoubleClick: this.handleDoubleClick.bind(this, props.rowData) }, React.createElement('div', { className: this.props.prefixCls + '-cells' }, _columns.map(function (item, index) {
	            if (item.hidden) return;
	            firstVisableColumn++;
	            var renderProps = {
	                column: item,
	                root: props.root,
	                align: item.align,
	                rowData: props.rowData,
	                rowIndex: props.rowIndex,
	                index: props.index,
	                cellIndex: index,
	                hasSubComp: props.subComp ? true : props.renderSubComp ? props.renderSubComp(deepcopy(props.rowData)) : false,
	                data: _data,
	                changeSelected: me.props.changeSelected,
	                showSubCompCallback: me.showSubCompFunc.bind(me),
	                rowSelection: props.rowSelection,
	                actions: props.actions,
	                mode: props.mode,
	                handleDataChange: props.handleDataChange,
	                attachCellField: props.attachCellField,
	                detachCellField: props.detachCellField,
	                key: "cell" + index
	            };

	            if (firstVisableColumn == 1) {
	                return React.createElement(Cell, renderProps, me.renderIndent(), me.renderExpendIcon(props.rowIndex));
	            }
	            //if have vertical data structure, how to process it
	            return React.createElement(Cell, renderProps);
	        })), me.renderChild(), this.renderSubComp());
	    };

	    return Row;
	}(React.Component);

	;

	Row.propTypes = {
	    prefixCls: React.PropTypes.string,
	    showSubComp: React.PropTypes.bool
	};

	Row.defaultProps = {
	    prefixCls: "kuma-uxtable-row",
	    showSubComp: false
	};

	exports["default"] = Row;
	module.exports = exports['default'];

/***/ },
/* 662 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Created by xy on 15/4/13.
	 */

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var Const = __webpack_require__(223);
	var Dropdown = __webpack_require__(277);
	var Menu = __webpack_require__(467);

	var CheckBox = __webpack_require__(658);
	var Radio = __webpack_require__(663);
	var TextField = __webpack_require__(664);
	var SelectField = __webpack_require__(666);
	var RadioField = __webpack_require__(667);
	var util = __webpack_require__(668);
	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(659);
	var deepcopy = __webpack_require__(669);
	var fieldsMap = {
	    "select": SelectField,
	    "text": TextField,
	    "radio": RadioField
	};

	var Cell = function (_React$Component) {
	    _inherits(Cell, _React$Component);

	    function Cell(props) {
	        _classCallCheck(this, Cell);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            'fold': 1, // 1- fold  0-unfold
	            'checked': !!_this.getCellData()
	        };
	        return _this;
	    }

	    Cell.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        var me = this;
	        if (me.props.column.type == "checkbox" || me.props.column.type == "checkboxSelector" || me.props.column.type == "radioSelector") {
	            me.setState({
	                checked: !!me.getCellData(nextProps)
	            });
	        }
	    };

	    Cell.prototype.componentDidMount = function componentDidMount() {
	        var me = this;
	        if (me.props.column.type == "checkbox" || me.props.column.type == "checkboxSelector" || me.props.column.type == "radioSelector") {
	            me.props.changeSelected(me.state.checked, me.props.rowIndex, true);
	        }
	    };

	    Cell.prototype.handleCheckChange = function handleCheckChange(e) {
	        var me = this,
	            _props = this.props,
	            v = _props.rowData;
	        me.props.changeSelected(e.target.checked, _props.rowIndex, false);
	    };

	    Cell.prototype.handleDropdownVisibleChange = function handleDropdownVisibleChange(visible) {
	        var me = this;
	        me.setState({
	            dropdownVisible: visible
	        });
	    };

	    Cell.prototype.showSubComp = function showSubComp() {
	        this.props.showSubCompCallback.apply();
	    };

	    /**
	     * @param actions {Array or Object}
	     */

	    Cell.prototype.getActionItems = function getActionItems(actions) {
	        if ((typeof actions === 'undefined' ? 'undefined' : _typeof(actions)) !== "object") {
	            console.error("Table: Actions should be an object or array");
	            return [];
	        } else {
	            var me = this;
	            me.items = [];
	            if (actions instanceof Array) {
	                me.items = actions;
	            } else {
	                for (var i in actions) {
	                    if (actions.hasOwnProperty(i)) {
	                        me.items.push({
	                            title: i,
	                            callback: actions[i]
	                        });
	                    }
	                }
	            }

	            return me.items;
	        }
	    };

	    Cell.prototype.getEditData = function getEditData() {
	        var me = this;
	        var column = me.props.column;
	        var editKey = column.editKey || column.dataKey;
	        return me.props.rowData[editKey];
	    };

	    Cell.prototype.getCellData = function getCellData(nextProps) {

	        var props = nextProps || this.props,
	            _column = props.column,
	            cellData = props.rowData[_column.dataKey];

	        return cellData;
	    };

	    Cell.prototype.handleActionClick = function handleActionClick(cb, e) {
	        e.stopPropagation();
	        var me = this;
	        me.setState({
	            dropdownVisible: false
	        });
	        cb && cb();
	    };

	    Cell.prototype.render = function render() {

	        var me = this,
	            props = me.props,
	            _column = props.column,
	            _width = _column.width,
	            _mode = props.rowData['__mode__'],
	            _style = {
	            width: _width ? _width : 100,
	            textAlign: props.align ? props.align : "left"
	        },
	            _v = deepcopy(props.rowData),
	            renderProps = undefined;

	        if (_column.type == 'action') {
	            _v = React.createElement('div', { className: 'action-container' }, me.renderActionItems(_column, _v, _mode));
	        } else if (_column.type == 'checkbox' || _column.type == 'checkboxSelector') {

	            _style.paddingRight = 4;
	            _style.paddingLeft = 12;

	            var checked = undefined;
	            if (me.state.checked) {
	                checked = 'checked';
	            } else {
	                checked = "";
	            }

	            var disable = false;
	            if ('disable' in _column) {
	                disable = _column.disable;
	            } else if ('isDisable' in _column) {
	                disable = !!_column.isDisable(props.rowData);
	            }
	            _v = React.createElement(CheckBox, { disable: disable, mode: props.mode, align: props.align, jsxchecked: checked, ref: 'checkbox', onchange: me.handleCheckChange.bind(me) });
	        } else if (_column.type == 'radioSelector') {
	            _style.paddingRight = 4;
	            _style.paddingLeft = 12;

	            var checked = undefined;
	            if (me.state.checked) {
	                checked = 'checked';
	            } else {
	                checked = "";
	            }

	            var disable = false;
	            if ('disable' in _column) {
	                disable = _column.disable;
	            } else if ('isDisable' in _column) {
	                disable = !!_column.isDisable(props.rowData);
	            }
	            _v = React.createElement(Radio, { disable: disable, mode: props.mode, align: props.align, jsxchecked: checked, onchange: me.handleCheckChange.bind(me) });
	        } else if (_column.type == 'treeIcon') {
	            _v = me.renderTreeIcon();
	        }

	        // inline edit mode
	        else if ((_column.type == 'custom' || _column.type in fieldsMap) && _mode == Const.MODE.EDIT && (!('canEdit' in _column) || _column.canEdit(props.rowData))) {
	                renderProps = {
	                    value: me.getEditData(),
	                    rowData: props.rowData,
	                    index: props.index,
	                    column: _column,
	                    handleDataChange: props.handleDataChange,
	                    attachCellField: props.attachCellField,
	                    detachCellField: props.detachCellField
	                };
	                var Field = undefined;

	                if (_column.type == 'custom') {
	                    Field = props.column.customField;
	                } else {
	                    Field = fieldsMap[_column.type];
	                }
	                _v = React.createElement(Field, renderProps);
	            } else if (_column.type == 'money' || _column.type == "card" || _column.type == "cnmobile") {
	                _v = React.createElement('div', { title: me.getCellData() }, util.formatValue(me.getCellData(), _column.type, _column.delimiter));
	            } else if (_column.render) {
	                _v = _column.render.apply(null, [me.getCellData(), _v]);
	            } else {
	                _v = React.createElement('div', { title: me.getCellData() }, me.getCellData());
	            }

	        var child = me.props.children;
	        return React.createElement('div', { className: props.jsxprefixCls, style: _style }, child, _v);
	    };

	    /**
	     * @param {Object} column current column config
	     * @param {Object} rowData current row data
	     * @param {String} mode current row mode: edit or view, same as rowData['__mode__'] 
	     */

	    Cell.prototype.renderActionItems = function renderActionItems(column, rowData, mode) {
	        var me = this;
	        var actions = me.getActionItems(column.actions).filter(function (item) {
	            return !('mode' in item) || item.mode == mode;
	        });
	        if (actions.length <= 2) {
	            return actions.map(function (item, index) {
	                return React.createElement('a', { href: 'javascript:void(0);', key: index, className: 'action', onClick: me.handleActionClick.bind(me, item.callback.bind(me, rowData, me.props.root)) }, !!item.render ? item.render(item.title, me.props.rowData) : item.title);
	            });
	        } else {
	            var arr = [];
	            arr.push(React.createElement('a', { href: 'javascript:void(0);', className: 'action', key: 'action', onClick: me.handleActionClick.bind(me, actions[0].callback.bind(me, rowData, me.props.root)) }, !!actions[0].render ? actions[0].render(actions[0].title, me.props.rowData) : actions[0].title));
	            var menu = React.createElement(Menu, null, actions.slice(1).map(function (action, index) {
	                return React.createElement(Menu.Item, { key: index }, React.createElement('a', { href: 'javascript:void(0);', className: 'action', key: 'action', onClick: me.handleActionClick.bind(me, action.callback.bind(me, rowData, me.props.root)) }, !!action.render ? action.render(action.title, me.props.rowData) : action.title));
	            }));
	            arr.push(React.createElement('i', { className: 'kuma-icon kuma-icon-triangle-down', key: 'icon' }));
	            var dropdownOptions = {
	                key: 'icon',
	                overlay: menu,
	                trigger: ['click'],
	                visible: me.state.dropdownVisible,
	                onVisibleChange: me.handleDropdownVisibleChange.bind(me)
	            };
	            return React.createElement(Dropdown, dropdownOptions, React.createElement('span', null, arr));
	        }
	    };

	    Cell.prototype.renderTreeIcon = function renderTreeIcon() {
	        if (this.props.cellIndex == 0 && this.props.hasSubComp) {
	            var open = this.props.rowData.showSubComp;
	            return React.createElement('span', { className: 'kuma-uxtable-tree-icon', onClick: this.showSubComp.bind(this) }, React.createElement('i', { className: classnames({
	                    "kuma-icon": true,
	                    "kuma-icon-tree-open": open,
	                    "kuma-icon-tree-close": !open
	                }) }));
	        }
	    };

	    return Cell;
	}(React.Component);

	;

	Cell.propTypes = {};

	Cell.defaultProps = {
	    jsxprefixCls: "kuma-uxtable-cell"
	};

	exports["default"] = Cell;
	module.exports = exports['default'];

/***/ },
/* 663 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];for (var key in source) {
	            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }return target;
	};

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * A radio field
	 */

	var Const = __webpack_require__(223);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Radio = function (_React$Component) {
	    _inherits(Radio, _React$Component);

	    function Radio(props) {
	        _classCallCheck(this, Radio);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            checked: !!_this.props.checked
	        };
	        return _this;
	    }

	    Radio.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        this.state.checked = !!nextProps.jsxchecked;
	    };

	    Radio.prototype.handleChange = function handleChange(e) {
	        if (e.target.checked != this.state.checked) {
	            this.state.checked = !this.state.checked;
	            this.props.onchange.apply(null, [e]);
	        }
	    };

	    Radio.prototype.getValue = function getValue() {
	        return this.refs.radio.checked;
	    };

	    Radio.prototype.render = function render() {

	        var props = this.props;

	        if (props.mode !== Const.MODE.VIEW) {
	            var renderProps = {
	                className: "kuma-checkbox",
	                checked: this.props.jsxchecked,
	                onChange: this.handleChange.bind(this)
	            };
	            if (!!props.disable) {
	                renderProps.disabled = true;
	            }
	            return React.createElement('label', { className: 'kuma-uxtable-row-selector' }, React.createElement('input', _extends({ type: 'radio', ref: 'radio' }, renderProps)), React.createElement('s', null));
	        } else {

	            var renderProps = {
	                className: "kuma-checkbox",
	                checked: this.props.jsxchecked,
	                disabled: true
	            };
	            return React.createElement('label', { className: 'kuma-uxtable-row-selector' }, React.createElement('input', _extends({ type: 'radio', ref: 'radio' }, renderProps)), React.createElement('s', null));
	        }
	    };

	    return Radio;
	}(React.Component);

	;

	Radio.propTypes = {};

	Radio.defaultProps = {};

	exports["default"] = Radio;
	module.exports = exports['default'];

/***/ },
/* 664 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _objectWithoutProperties(obj, keys) {
	    var target = {};for (var i in obj) {
	        if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	    }return target;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * A editable plain text field
	 */

	var CellField = __webpack_require__(665);
	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(659);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var TextField = function (_CellField) {
	    _inherits(TextField, _CellField);

	    function TextField(props) {
	        _classCallCheck(this, TextField);

	        return _possibleConstructorReturn(this, _CellField.call(this, props));
	    }

	    TextField.prototype.renderContent = function renderContent() {
	        var me = this;
	        var dataKey = me.props.column.dataKey;
	        var fieldProps = {
	            className: classnames({
	                "kuma-input": true
	            }),
	            onChange: function onChange(e) {
	                me.handleDataChange({
	                    jsxid: me.props.rowData['jsxid'],
	                    column: me.props.column,
	                    value: e.target.value,
	                    text: e.target.value
	                });
	            },
	            value: me.props.value
	        };
	        if (me.props.column.config) {
	            var _me$props$column$conf = me.props.column.config;
	            var className = _me$props$column$conf.className;
	            var onChange = _me$props$column$conf.onChange;

	            var customProps = _objectWithoutProperties(_me$props$column$conf, ['className', 'onChange']);

	            assign(fieldProps, customProps);
	        }
	        return React.createElement('input', fieldProps);
	    };

	    return TextField;
	}(CellField);

	;

	TextField.propTypes = assign({}, CellField.propTypes);

	TextField.defaultProps = assign({}, CellField.defaultProps);

	module.exports = TextField;

/***/ },
/* 665 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var classnames = __webpack_require__(5);
	var assgin = __webpack_require__(659);

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var CellField = function (_React$Component) {
	    _inherits(CellField, _React$Component);

	    function CellField(props) {
	        _classCallCheck(this, CellField);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            pass: true
	        };

	        return _this;
	    }

	    CellField.prototype.componentDidMount = function componentDidMount() {
	        var me = this;
	        me.props.attachCellField(me.validate.bind(this), me.getName());
	    };

	    CellField.prototype.componentWillUnmount = function componentWillUnmount() {
	        var me = this;
	        me.props.detachCellField(me.getName());
	    };

	    CellField.prototype.handleDataChange = function handleDataChange(obj) {
	        var me = this;
	        var jsxid = obj.jsxid;
	        var column = obj.column;
	        var value = obj.value;
	        var text = obj.text;

	        me.validate(value, function (pass) {
	            me.props.handleDataChange(assgin({}, obj, {
	                pass: pass
	            }));
	        });
	        // me.props.handleDataChange(assgin({}, obj, {
	        //     pass: me.state.pass
	        // }));
	    };

	    CellField.prototype.getName = function getName() {
	        var me = this;
	        return me.props.column.dataKey + "." + me.props.index;
	    };

	    CellField.prototype.validate = function validate(value, cb) {
	        var me = this;
	        value = value || me.props.value;
	        var rowData = me.props.rowData;
	        var rules = me.props.column.rules;

	        var pass = true;
	        var errMsg = "";
	        if ((typeof rules === 'undefined' ? 'undefined' : _typeof(rules)) == "object" && !Array.isArray(rules)) {
	            pass = !!rules.validator(value, rowData);
	            errMsg = rules.errMsg;
	        } else if (Array.isArray(rules)) {
	            for (var i = 0; i < rules.length; i++) {
	                pass = rules[i].validator(value, rowData);
	                if (!pass) {
	                    errMsg = rules[i].errMsg;
	                    break;
	                }
	            }
	        }
	        !!cb && cb(pass);
	        me.setState({
	            pass: pass,
	            errMsg: errMsg
	        });
	        return pass;
	    };

	    CellField.prototype.renderContent = function renderContent() {};

	    CellField.prototype.addSpecificClass = function addSpecificClass() {
	        return this.props.prefixCls;
	    };

	    CellField.prototype.render = function render() {
	        var _classnames;

	        var me = this;
	        var specificCls = me.addSpecificClass();
	        return React.createElement('div', { className: classnames((_classnames = {
	                "hasError": !me.state.pass
	            }, _classnames[specificCls] = true, _classnames[me.props.className] = !!me.props.className, _classnames)) }, me.renderContent());
	    };

	    return CellField;
	}(React.Component);

	CellField.displayName = "CellField";
	CellField.propTypes = {
	    prefixCls: React.PropTypes.string
	};

	CellField.defaultProps = {
	    prefixCls: 'kuma-uxtable-cell-field'
	};

		module.exports = CellField;

/***/ },
/* 666 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _objectWithoutProperties(obj, keys) {
	    var target = {};for (var i in obj) {
	        if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	    }return target;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var CellField = __webpack_require__(665);
	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(659);
	var Select = __webpack_require__(362);
	var Option = Select.Option;

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var SelectField = function (_CellField) {
	    _inherits(SelectField, _CellField);

	    function SelectField(props) {
	        _classCallCheck(this, SelectField);

	        return _possibleConstructorReturn(this, _CellField.call(this, props));
	    }

	    SelectField.prototype.renderContent = function renderContent() {
	        var me = this;
	        var fieldProps = {
	            onSelect: function onSelect(value, Option) {
	                me.handleDataChange({
	                    jsxid: me.props.rowData['jsxid'],
	                    column: me.props.column,
	                    text: Option.props.children,
	                    value: value
	                });
	            },
	            value: me.props.value
	        };
	        if (me.props.column.config) {
	            var _me$props$column$conf = me.props.column.config;
	            var value = _me$props$column$conf.value;
	            var onSelect = _me$props$column$conf.onSelect;

	            var customProps = _objectWithoutProperties(_me$props$column$conf, ['value', 'onSelect']);

	            assign(fieldProps, customProps);
	        }
	        return React.createElement(Select, fieldProps, me.props.column.children);
	    };

	    return SelectField;
	}(CellField);

	;

	SelectField.propTypes = assign({}, CellField.propTypes);

	SelectField.defaultProps = assign({}, CellField.defaultProps);

	module.exports = SelectField;

/***/ },
/* 667 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _objectWithoutProperties(obj, keys) {
	    var target = {};for (var i in obj) {
	        if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	    }return target;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var CellField = __webpack_require__(665);
	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(659);
	var RadioGroup = __webpack_require__(353);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var RadioField = function (_CellField) {
	    _inherits(RadioField, _CellField);

	    function RadioField(props) {
	        _classCallCheck(this, RadioField);

	        return _possibleConstructorReturn(this, _CellField.call(this, props));
	    }

	    RadioField.prototype.processChildren = function processChildren() {
	        var me = this;
	        var obj = {};
	        me.props.column.children.forEach(function (item) {
	            obj[item.props.value] = item.props.text;
	        });
	        return obj;
	    };

	    RadioField.prototype.renderContent = function renderContent() {
	        var me = this;
	        var dataKey = me.props.column.dataKey;
	        var textMap = me.processChildren();
	        var fieldProps = {
	            onChange: function onChange(value) {
	                me.handleDataChange({
	                    jsxid: me.props.rowData['jsxid'],
	                    column: me.props.column,
	                    text: textMap[value],
	                    value: value
	                });
	            },
	            value: me.props.value
	        };
	        if (me.props.column.config) {
	            var _me$props$column$conf = me.props.column.config;
	            var value = _me$props$column$conf.value;
	            var onChange = _me$props$column$conf.onChange;

	            var customProps = _objectWithoutProperties(_me$props$column$conf, ['value', 'onChange']);

	            assign(fieldProps, customProps);
	        }
	        return React.createElement(RadioGroup, fieldProps, me.props.column.children);
	    };

	    return RadioField;
	}(CellField);

	;

	RadioField.propTypes = assign({}, CellField.propTypes);

	RadioField.defaultProps = assign({}, CellField.defaultProps);

	module.exports = RadioField;

/***/ },
/* 668 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var Formatter = __webpack_require__(155);
	var util = {
	    formatValue: function formatValue(value, type, delimiter) {
	        delimiter = delimiter || " ";
	        if (value === null || value === undefined) {
	            return value;
	        }
	        value = value + "";
	        if (type == "money") {
	            return Formatter.money(value, delimiter);
	        } else if (type == "card") {
	            return Formatter.card(value, delimiter);
	        } else if (type == "cnmobile") {
	            return Formatter.cnmobile(value, delimiter);
	        }
	    }
	};

		module.exports = util;

/***/ },
/* 669 */
342,
/* 670 */
[841, 671, 672],
/* 671 */
336,
/* 672 */
337,
/* 673 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * @author: zhouquan.yezq
	 * @time : 8/12 2015
	 */

	var classnames = __webpack_require__(5);

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Mask = function (_React$Component) {
	    _inherits(Mask, _React$Component);

	    function Mask(props) {
	        _classCallCheck(this, Mask);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    Mask.prototype.render = function render() {
	        var _classnames;

	        var props = this.props;
	        var visible = props.visible;
	        var text = props.text;

	        var className = classnames((_classnames = {}, _classnames[props.prefixCls] = true, _classnames[props.prefixCls + "-hide"] = !visible, _classnames));
	        return React.createElement('div', { className: className }, React.createElement('div', { className: props.prefixCls + '-centerblk' }, React.createElement('span', { className: 'kuma-loading' }), React.createElement('span', { className: props.prefixCls + '-text' }, text)));
	    };

	    return Mask;
	}(React.Component);

	Mask.propTypes = {
	    prefixCls: React.PropTypes.string
	};

	Mask.defaultProps = {
	    prefixCls: "kuma-uxmask",
	    text: '加载中'
	};

	exports["default"] = Mask;
	module.exports = exports['default'];

/***/ },
/* 674 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	    isIE: function isIE(version) {
	        if (navigator.appName == "Microsoft Internet Explorer") {
	            if (!version) {
	                return true;
	            } else {
	                return navigator.appVersion.split(";")[1].replace(/[ ]/g, "") == "MSIE" + version + ".0";
	            }
	        } else {
	            return false;
	        }
	    }
		};

/***/ },
/* 675 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];for (var key in source) {
	            if (Object.prototype.hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }return target;
	};

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Grid Component for uxcore
	 * @author zhouquan.yezq
	 *
	 * Copyright 2014-2015, UXCore Team, Alinw.
	 * All rights reserved.
	 */

	var SearchBar = __webpack_require__(676);
	var classnames = __webpack_require__(5);
	var Button = __webpack_require__(6);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var ActionBar = function (_React$Component) {
	    _inherits(ActionBar, _React$Component);

	    function ActionBar(props) {
	        _classCallCheck(this, ActionBar);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    ActionBar.prototype.handleSearch = function handleSearch(value) {
	        this.props.onSearch(value);
	    };

	    ActionBar.prototype.renderActionBtn = function renderActionBtn(item, index) {
	        var me = this;
	        var itemProps = {
	            className: me.props.jsxprefixCls + "-item",
	            onClick: item.callback || function () {},
	            key: index
	        };
	        if (!!item.render && typeof item.render == "function") {
	            return React.createElement("div", itemProps, item.render(item.title));
	        } else {
	            return React.createElement(Button, _extends({ type: "outline", size: "medium" }, itemProps), item.title);
	        }
	    };

	    ActionBar.prototype.renderSearchBar = function renderSearchBar() {
	        if (this.props.showSearch) {
	            var me = this;
	            var searchBarProps = {
	                onSearch: me.handleSearch.bind(me),
	                key: 'searchbar',
	                placeholder: me.props.searchBarPlaceholder
	            };
	            return React.createElement(SearchBar, searchBarProps);
	        }
	    };

	    /**
	     *  convert ActionBar config from hash to array
	     */

	    ActionBar.prototype.getActionItem = function getActionItem(config) {
	        var items = [];
	        if (config instanceof Array) {
	            items = config;
	        } else if ((typeof config === "undefined" ? "undefined" : _typeof(config)) == "object") {
	            for (var item in config) {
	                if (config.hasOwnProperty(item)) {
	                    items.push({
	                        title: item,
	                        callback: config[item]
	                    });
	                }
	            }
	        }
	        return items;
	    };

	    ActionBar.prototype.render = function render() {
	        var _classnames;

	        var me = this,
	            _props = this.props,
	            _barConfig = _props.actionBarConfig;

	        return React.createElement("div", { className: classnames((_classnames = {}, _classnames[_props.jsxprefixCls] = _props.jsxprefixCls, _classnames["fn-clear"] = true, _classnames)) }, me.getActionItem(_barConfig).map(function (item, index) {
	            return me.renderActionBtn(item, index);
	        }), me.renderSearchBar());
	    };

	    return ActionBar;
	}(React.Component);

	;

	ActionBar.propTypes = {};

	ActionBar.defaultProps = {
	    jsxprefixCls: "kuma-uxtable-actionbar"
	};

		module.exports = ActionBar;

/***/ },
/* 676 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Grid Component for uxcore
	 * @author zhouquan.yezq
	 *
	 * Copyright 2014-2015, UXCore Team, Alinw.
	 * All rights reserved.
	 */

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var SearchBar = function (_React$Component) {
	    _inherits(SearchBar, _React$Component);

	    function SearchBar(props) {
	        _classCallCheck(this, SearchBar);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            searchTxt: ""
	        };
	        return _this;
	    }

	    SearchBar.prototype.doSearch = function doSearch() {
	        this.props.onSearch(this.state.searchTxt);
	    };

	    SearchBar.prototype.onKeyDown = function onKeyDown(e) {
	        if (e.keyCode == 13) {
	            this.doSearch();
	        }
	    };

	    SearchBar.prototype.handleChange = function handleChange(e) {
	        this.setState({
	            searchTxt: e.target.value
	        });
	    };

	    SearchBar.prototype.render = function render() {
	        var me = this;
	        var placeholder = me.props.placeholder;

	        return React.createElement('div', { className: this.props.jsxprefixCls }, React.createElement('input', { type: 'text', className: 'kuma-input', placeholder: placeholder, value: this.state.value, onKeyDown: this.onKeyDown.bind(this), onChange: this.handleChange.bind(this) }), React.createElement('i', { className: 'kuma-icon kuma-icon-search', onClick: this.doSearch.bind(this) }));
	    };

	    return SearchBar;
	}(React.Component);

	;

	SearchBar.propTypes = {};

	SearchBar.defaultProps = {
	    jsxprefixCls: "kuma-uxtable-searchbar",
	    onSearch: function onSearch() {}
	};

		module.exports = SearchBar;

/***/ },
/* 677 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Tabs Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(678);

/***/ },
/* 678 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = arguments[i];for (var key in source) {
				if (Object.prototype.hasOwnProperty.call(source, key)) {
					target[key] = source[key];
				}
			}
		}return target;
	};

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcTabs = __webpack_require__(679);

	var _rcTabs2 = _interopRequireDefault(_rcTabs);

	var _objectAssign = __webpack_require__(695);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var prefixCls = 'kuma-tab';
	var TYPESUFFIX = {
		large: 'lg',
		small: 'sm',
		filter: 'filter',
		brick: 'brick'
	};

	var Tabs = function (_RcTabs) {
		_inherits(Tabs, _RcTabs);

		function Tabs() {
			_classCallCheck(this, Tabs);

			return _possibleConstructorReturn(this, _RcTabs.apply(this, arguments));
		}

		Tabs.prototype.aaa = function aaa() {};

		Tabs.prototype.render = function render() {
			var props = this.props;
			var cls = [];
			if (TYPESUFFIX[props.type]) {
				cls.push([prefixCls, TYPESUFFIX[props.type]].join('-'));
			}
			cls = cls.join(' ');
			return _react2["default"].createElement(_rcTabs2["default"], _extends({}, props, { className: cls }));
		};

		return Tabs;
	}(_rcTabs2["default"]);

	Tabs.displayName = 'uxcore-tabs';
	Tabs.defaultProps = (0, _objectAssign2["default"])(_rcTabs2["default"].defaultProps, {
		prefixCls: prefixCls,
		type: 'large'
	});
	Tabs.TabPane = _rcTabs2["default"].TabPane;

	exports["default"] = Tabs;
	module.exports = exports['default'];

/***/ },
/* 679 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TabPane = exports.default = undefined;

	var _Tabs = __webpack_require__(680);

	var _Tabs2 = _interopRequireDefault(_Tabs);

	var _TabPane2 = __webpack_require__(682);

	var _TabPane3 = _interopRequireDefault(_TabPane2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = _Tabs2.default;
	exports.TabPane = _TabPane3.default;

/***/ },
/* 680 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _KeyCode = __webpack_require__(681);

	var _KeyCode2 = _interopRequireDefault(_KeyCode);

	var _TabPane = __webpack_require__(682);

	var _TabPane2 = _interopRequireDefault(_TabPane);

	var _Nav = __webpack_require__(683);

	var _Nav2 = _interopRequireDefault(_Nav);

	var _rcAnimate = __webpack_require__(686);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function noop() {}

	function getDefaultActiveKey(props) {
	  var activeKey = void 0;
	  _react2.default.Children.forEach(props.children, function (child) {
	    if (!activeKey && !child.props.disabled) {
	      activeKey = child.key;
	    }
	  });
	  return activeKey;
	}

	var Tabs = _react2.default.createClass({
	  displayName: 'Tabs',

	  propTypes: {
	    destroyInactiveTabPane: _react.PropTypes.bool,
	    onTabClick: _react.PropTypes.func,
	    onChange: _react.PropTypes.func,
	    children: _react.PropTypes.any,
	    tabBarExtraContent: _react.PropTypes.any,
	    animation: _react.PropTypes.string,
	    prefixCls: _react.PropTypes.string,
	    className: _react.PropTypes.string,
	    tabPosition: _react.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-tabs',
	      destroyInactiveTabPane: false,
	      tabBarExtraContent: null,
	      onChange: noop,
	      tabPosition: 'top',
	      style: {},
	      contentStyle: {},
	      navStyle: {},
	      onTabClick: noop
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var activeKey = void 0;
	    if ('activeKey' in props) {
	      activeKey = props.activeKey;
	    } else if ('defaultActiveKey' in props) {
	      activeKey = props.defaultActiveKey;
	    } else {
	      activeKey = getDefaultActiveKey(props);
	    }
	    return {
	      activeKey: activeKey
	    };
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var newActiveKey = this.state.activeKey;
	    if ('activeKey' in nextProps) {
	      newActiveKey = nextProps.activeKey;
	      if (!newActiveKey) {
	        this.setState({
	          activeKey: newActiveKey
	        });
	        return;
	      }
	    }
	    var found = void 0;
	    _react2.default.Children.forEach(nextProps.children, function (child) {
	      if (child.key === newActiveKey) {
	        found = true;
	      }
	    });
	    if (found) {
	      this.setActiveKey(newActiveKey, nextProps);
	    } else {
	      this.setActiveKey(getDefaultActiveKey(nextProps), nextProps);
	    }
	  },
	  onTabClick: function onTabClick(key) {
	    this.setActiveKey(key);
	    this.props.onTabClick(key);
	    if (this.state.activeKey !== key) {
	      this.props.onChange(key);
	    }
	  },
	  onNavKeyDown: function onNavKeyDown(e) {
	    var eventKeyCode = e.keyCode;
	    if (eventKeyCode === _KeyCode2.default.RIGHT || eventKeyCode === _KeyCode2.default.DOWN) {
	      e.preventDefault();
	      var nextKey = this.getNextActiveKey(true);
	      this.onTabClick(nextKey);
	    } else if (eventKeyCode === _KeyCode2.default.LEFT || eventKeyCode === _KeyCode2.default.UP) {
	      e.preventDefault();
	      var previousKey = this.getNextActiveKey(false);
	      this.onTabClick(previousKey);
	    }
	  },
	  getNextActiveKey: function getNextActiveKey(next) {
	    var activeKey = this.state.activeKey;
	    var children = [];
	    _react2.default.Children.forEach(this.props.children, function (c) {
	      if (!c.props.disabled) {
	        if (next) {
	          children.push(c);
	        } else {
	          children.unshift(c);
	        }
	      }
	    });
	    var length = children.length;
	    var ret = length && children[0].key;
	    children.forEach(function (child, i) {
	      if (child.key === activeKey) {
	        if (i === length - 1) {
	          ret = children[0].key;
	        } else {
	          ret = children[i + 1].key;
	        }
	      }
	    });
	    return ret;
	  },
	  getTabPanes: function getTabPanes() {
	    var state = this.state;
	    var props = this.props;
	    var activeKey = state.activeKey;
	    var children = props.children;
	    var newChildren = [];

	    _react2.default.Children.forEach(children, function (child) {
	      var key = child.key;
	      var active = activeKey === key;
	      newChildren.push(_react2.default.cloneElement(child, {
	        active: active,
	        // eventKey: key,
	        rootPrefixCls: props.prefixCls
	      }));
	    });

	    return newChildren;
	  },
	  getIndexPair: function getIndexPair(props, currentActiveKey, activeKey) {
	    var keys = [];
	    _react2.default.Children.forEach(props.children, function (c) {
	      keys.push(c.key);
	    });
	    var currentIndex = keys.indexOf(currentActiveKey);
	    var nextIndex = keys.indexOf(activeKey);
	    return {
	      currentIndex: currentIndex, nextIndex: nextIndex
	    };
	  },
	  setActiveKey: function setActiveKey(activeKey, ps) {
	    var props = ps || this.props;
	    var currentActiveKey = this.state.activeKey;
	    if (currentActiveKey === activeKey || 'activeKey' in props && props === this.props) {
	      return;
	    }
	    if (!currentActiveKey) {
	      this.setState({
	        activeKey: activeKey
	      });
	    } else {
	      var _getIndexPair = this.getIndexPair(props, currentActiveKey, activeKey);

	      var currentIndex = _getIndexPair.currentIndex;
	      var nextIndex = _getIndexPair.nextIndex;
	      // removed

	      if (currentIndex === -1) {
	        var newPair = this.getIndexPair(this.props, currentActiveKey, activeKey);
	        currentIndex = newPair.currentIndex;
	        nextIndex = newPair.nextIndex;
	      }
	      var tabMovingDirection = currentIndex > nextIndex ? 'backward' : 'forward';
	      this.setState({
	        activeKey: activeKey,
	        tabMovingDirection: tabMovingDirection
	      });
	    }
	  },
	  render: function render() {
	    var _classnames;

	    var props = this.props;
	    var destroyInactiveTabPane = props.destroyInactiveTabPane;
	    var prefixCls = props.prefixCls;
	    var tabPosition = props.tabPosition;
	    var className = props.className;
	    var animation = props.animation;

	    var cls = (0, _classnames3.default)((_classnames = {}, _defineProperty(_classnames, prefixCls, 1), _defineProperty(_classnames, prefixCls + '-' + tabPosition, 1), _defineProperty(_classnames, className, !!className), _classnames));
	    var tabMovingDirection = this.state.tabMovingDirection;
	    var tabPanes = this.getTabPanes();
	    var transitionName = void 0;
	    transitionName = props.transitionName && props.transitionName[tabMovingDirection || 'backward'];
	    if (!transitionName && animation) {
	      transitionName = prefixCls + '-' + animation + '-' + (tabMovingDirection || 'backward');
	    }
	    if (destroyInactiveTabPane) {
	      tabPanes = tabPanes.filter(function (panel) {
	        return panel.props.active;
	      });
	    }
	    if (transitionName) {
	      if (destroyInactiveTabPane) {
	        tabPanes = _react2.default.createElement(_rcAnimate2.default, {
	          exclusive: true,
	          transitionName: transitionName
	        }, tabPanes);
	      } else {
	        tabPanes = _react2.default.createElement(_rcAnimate2.default, {
	          showProp: 'active',
	          exclusive: true,
	          transitionName: transitionName
	        }, tabPanes);
	      }
	    }
	    var contents = [_react2.default.createElement(_Nav2.default, {
	      prefixCls: prefixCls,
	      key: 'nav',
	      onKeyDown: this.onNavKeyDown,
	      tabBarExtraContent: this.props.tabBarExtraContent,
	      tabPosition: tabPosition,
	      style: props.navStyle,
	      onTabClick: this.onTabClick,
	      tabMovingDirection: tabMovingDirection,
	      panels: this.props.children,
	      activeKey: this.state.activeKey
	    }), _react2.default.createElement('div', {
	      className: prefixCls + '-content',
	      style: props.contentStyle,
	      key: 'content'
	    }, tabPanes)];
	    if (tabPosition === 'bottom') {
	      contents.reverse();
	    }
	    return _react2.default.createElement('div', {
	      className: cls,
	      style: props.style
	    }, contents);
	  }
	});

	Tabs.TabPane = _TabPane2.default;

	exports.default = Tabs;
	module.exports = exports['default'];

/***/ },
/* 681 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  /**
	   * LEFT
	   */
	  LEFT: 37, // also NUM_WEST
	  /**
	   * UP
	   */
	  UP: 38, // also NUM_NORTH
	  /**
	   * RIGHT
	   */
	  RIGHT: 39, // also NUM_EAST
	  /**
	   * DOWN
	   */
	  DOWN: 40 };
	module.exports = exports['default'];

/***/ },
/* 682 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames2 = __webpack_require__(5);

	var _classnames3 = _interopRequireDefault(_classnames2);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var TabPane = _react2.default.createClass({
	  displayName: 'TabPane',

	  propTypes: {
	    active: _react.PropTypes.bool
	  },
	  render: function render() {
	    var _classnames;

	    var props = this.props;
	    this._isActived = this._isActived || props.active;
	    if (!this._isActived) {
	      return null;
	    }
	    var prefixCls = props.rootPrefixCls + '-tabpane';
	    var cls = (0, _classnames3.default)((_classnames = {}, _defineProperty(_classnames, prefixCls + '-hidden', !props.active), _defineProperty(_classnames, prefixCls, 1), _classnames));
	    return _react2.default.createElement('div', { className: cls }, props.children);
	  }
	});

	exports.default = TabPane;
	module.exports = exports['default'];

/***/ },
/* 683 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames3 = __webpack_require__(5);

	var _classnames4 = _interopRequireDefault(_classnames3);

	var _InkBarMixin = __webpack_require__(684);

	var _InkBarMixin2 = _interopRequireDefault(_InkBarMixin);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var tabBarExtraContentStyle = {
	  float: 'right'
	};

	function noop() {}

	var Nav = _react2.default.createClass({
	  displayName: 'Nav',

	  propTypes: {
	    tabPosition: _react.PropTypes.string,
	    tabBarExtraContent: _react.PropTypes.any,
	    onTabClick: _react.PropTypes.func,
	    onKeyDown: _react.PropTypes.func
	  },

	  mixins: [_InkBarMixin2.default],

	  getInitialState: function getInitialState() {
	    return {
	      next: false,
	      offset: 0,
	      prev: false
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    this.componentDidUpdate();
	  },
	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var props = this.props;
	    if (prevProps && prevProps.tabPosition !== props.tabPosition) {
	      this.setOffset(0);
	      return;
	    }
	    var navNode = this.refs.nav;
	    var navNodeWH = this.getOffsetWH(navNode);
	    var navWrapNode = this.refs.navWrap;
	    var navWrapNodeWH = this.getOffsetWH(navWrapNode);
	    var state = this.state;
	    var offset = state.offset;
	    var minOffset = navWrapNodeWH - navNodeWH;
	    var _state = this.state;
	    var next = _state.next;
	    var prev = _state.prev;

	    if (minOffset >= 0) {
	      next = false;
	      this.setOffset(0);
	      offset = 0;
	    } else if (minOffset < offset) {
	      next = true;
	    } else {
	      next = false;
	      this.setOffset(minOffset);
	      offset = minOffset;
	    }

	    if (offset < 0) {
	      prev = true;
	    } else {
	      prev = false;
	    }

	    this.setNext(next);
	    this.setPrev(prev);

	    var nextPrev = {
	      next: next,
	      prev: prev
	    };
	    // wait next,prev show hide
	    if (this.isNextPrevShown(state) !== this.isNextPrevShown(nextPrev)) {
	      this.setNextPrev({}, this.scrollToActiveTab);
	    } else {
	      // can not use props.activeKey
	      if (!prevProps || props.activeKey !== prevProps.activeKey) {
	        this.scrollToActiveTab();
	      }
	    }
	  },
	  onTabClick: function onTabClick(key) {
	    this.props.onTabClick(key);
	  },

	  // work around eslint warning
	  setNextPrev: function setNextPrev(nextPrev, callback) {
	    this.setState(nextPrev, callback);
	  },
	  getTabs: function getTabs() {
	    var _this = this;

	    var props = this.props;
	    var children = props.panels;
	    var activeKey = props.activeKey;
	    var rst = [];
	    var prefixCls = props.prefixCls;

	    _react2.default.Children.forEach(children, function (child) {
	      var key = child.key;
	      var cls = activeKey === key ? prefixCls + '-tab-active' : '';
	      cls += ' ' + prefixCls + '-tab';
	      var events = {};
	      if (child.props.disabled) {
	        cls += ' ' + prefixCls + '-tab-disabled';
	      } else {
	        events = {
	          onClick: _this.onTabClick.bind(_this, key)
	        };
	      }
	      var ref = {};
	      if (activeKey === key) {
	        ref.ref = 'activeTab';
	      }
	      rst.push(_react2.default.createElement('div', _extends({}, events, {
	        className: cls,
	        key: key
	      }, ref), _react2.default.createElement('div', { className: prefixCls + '-tab-inner' }, child.props.tab)));
	    });

	    return rst;
	  },
	  getOffsetWH: function getOffsetWH(node) {
	    var tabPosition = this.props.tabPosition;
	    var prop = 'offsetWidth';
	    if (tabPosition === 'left' || tabPosition === 'right') {
	      prop = 'offsetHeight';
	    }
	    return node[prop];
	  },
	  getOffsetLT: function getOffsetLT(node) {
	    var tabPosition = this.props.tabPosition;
	    var prop = 'left';
	    if (tabPosition === 'left' || tabPosition === 'right') {
	      prop = 'top';
	    }
	    return node.getBoundingClientRect()[prop];
	  },
	  setOffset: function setOffset(offset) {
	    var target = Math.min(0, offset);
	    if (this.state.offset !== target) {
	      this.setState({
	        offset: target
	      });
	    }
	  },
	  setPrev: function setPrev(v) {
	    if (this.state.prev !== v) {
	      this.setState({
	        prev: v
	      });
	    }
	  },
	  setNext: function setNext(v) {
	    if (this.state.next !== v) {
	      this.setState({
	        next: v
	      });
	    }
	  },
	  isNextPrevShown: function isNextPrevShown(state) {
	    return state.next || state.prev;
	  },
	  scrollToActiveTab: function scrollToActiveTab() {
	    var _refs = this.refs;
	    var activeTab = _refs.activeTab;
	    var navWrap = _refs.navWrap;

	    if (activeTab) {
	      var activeTabWH = this.getOffsetWH(activeTab);
	      var navWrapNodeWH = this.getOffsetWH(navWrap);
	      var offset = this.state.offset;

	      var wrapOffset = this.getOffsetLT(navWrap);
	      var activeTabOffset = this.getOffsetLT(activeTab);
	      if (wrapOffset > activeTabOffset) {
	        offset += wrapOffset - activeTabOffset;
	        this.setState({
	          offset: offset
	        });
	      } else if (wrapOffset + navWrapNodeWH < activeTabOffset + activeTabWH) {
	        offset -= activeTabOffset + activeTabWH - (wrapOffset + navWrapNodeWH);
	        this.setState({
	          offset: offset
	        });
	      }
	    }
	  },
	  prev: function prev() {
	    var navWrapNode = this.refs.navWrap;
	    var navWrapNodeWH = this.getOffsetWH(navWrapNode);
	    var state = this.state;
	    var offset = state.offset;
	    this.setOffset(offset + navWrapNodeWH);
	  },
	  next: function next() {
	    var navWrapNode = this.refs.navWrap;
	    var navWrapNodeWH = this.getOffsetWH(navWrapNode);
	    var state = this.state;
	    var offset = state.offset;
	    this.setOffset(offset - navWrapNodeWH);
	  },
	  render: function render() {
	    var props = this.props;
	    var state = this.state;
	    var prefixCls = props.prefixCls;
	    var tabs = this.getTabs();
	    var tabMovingDirection = props.tabMovingDirection;
	    var tabPosition = props.tabPosition;
	    var inkBarClass = prefixCls + '-ink-bar';
	    if (tabMovingDirection) {
	      inkBarClass += ' ' + prefixCls + '-ink-bar-transition-' + tabMovingDirection;
	    }
	    var nextButton = void 0;
	    var prevButton = void 0;

	    var showNextPrev = state.prev || state.next;

	    if (showNextPrev) {
	      var _classnames, _classnames2;

	      prevButton = _react2.default.createElement('span', {
	        onClick: state.prev ? this.prev : noop,
	        unselectable: 'unselectable',
	        className: (0, _classnames4.default)((_classnames = {}, _defineProperty(_classnames, prefixCls + '-tab-prev', 1), _defineProperty(_classnames, prefixCls + '-tab-btn-disabled', !state.prev), _classnames))
	      }, _react2.default.createElement('span', { className: prefixCls + '-tab-prev-icon' }));

	      nextButton = _react2.default.createElement('span', {
	        onClick: state.next ? this.next : noop,
	        unselectable: 'unselectable',
	        className: (0, _classnames4.default)((_classnames2 = {}, _defineProperty(_classnames2, prefixCls + '-tab-next', 1), _defineProperty(_classnames2, prefixCls + '-tab-btn-disabled', !state.next), _classnames2))
	      }, _react2.default.createElement('span', { className: prefixCls + '-tab-next-icon' }));
	    }

	    var navOffset = {};
	    if (tabPosition === 'left' || tabPosition === 'right') {
	      navOffset = {
	        top: state.offset
	      };
	    } else {
	      navOffset = {
	        left: state.offset
	      };
	    }

	    var tabBarExtraContent = this.props.tabBarExtraContent;

	    return _react2.default.createElement('div', {
	      className: prefixCls + '-bar',
	      tabIndex: '0',
	      onKeyDown: this.props.onKeyDown
	    }, tabBarExtraContent ? _react2.default.createElement('div', { style: tabBarExtraContentStyle }, tabBarExtraContent) : null, _react2.default.createElement('div', {
	      className: prefixCls + '-nav-container ' + (showNextPrev ? prefixCls + '-nav-container-scrolling' : ''),
	      style: props.style,
	      ref: 'container'
	    }, prevButton, nextButton, _react2.default.createElement('div', { className: prefixCls + '-nav-wrap', ref: 'navWrap' }, _react2.default.createElement('div', { className: prefixCls + '-nav-scroll' }, _react2.default.createElement('div', { className: prefixCls + '-nav', ref: 'nav', style: navOffset }, _react2.default.createElement('div', { className: inkBarClass, ref: 'inkBar' }), tabs)))));
	  }
	});

	exports.default = Nav;
	module.exports = exports['default'];

/***/ },
/* 684 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _utils = __webpack_require__(685);

	function _componentDidUpdate(component) {
	  var refs = component.refs;
	  var containerNode = refs.nav;
	  var containerOffset = (0, _utils.offset)(containerNode);
	  var inkBarNode = refs.inkBar;
	  var activeTab = refs.activeTab;
	  var tabPosition = component.props.tabPosition;
	  if (activeTab) {
	    var tabNode = activeTab;
	    var tabOffset = (0, _utils.offset)(tabNode);
	    if (tabPosition === 'top' || tabPosition === 'bottom') {
	      var left = tabOffset.left - containerOffset.left;
	      inkBarNode.style.left = left + 'px';
	      inkBarNode.style.top = '';
	      inkBarNode.style.bottom = '';
	      inkBarNode.style.right = containerNode.offsetWidth - left - tabNode.offsetWidth + 'px';
	    } else {
	      var top = tabOffset.top - containerOffset.top;
	      inkBarNode.style.left = '';
	      inkBarNode.style.right = '';
	      inkBarNode.style.top = top + 'px';
	      inkBarNode.style.bottom = containerNode.offsetHeight - top - tabNode.offsetHeight + 'px';
	    }
	  }
	  inkBarNode.style.display = activeTab ? 'block' : 'none';
	}

	exports.default = {
	  componentDidUpdate: function componentDidUpdate() {
	    _componentDidUpdate(this);
	  },
	  componentDidMount: function componentDidMount() {
	    _componentDidUpdate(this);
	  }
	};
		module.exports = exports['default'];

/***/ },
/* 685 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getScroll = getScroll;
	exports.offset = offset;
	function getScroll(w, top) {
	  var ret = w['page' + (top ? 'Y' : 'X') + 'Offset'];
	  var method = 'scroll' + (top ? 'Top' : 'Left');
	  if (typeof ret !== 'number') {
	    var d = w.document;
	    // ie6,7,8 standard mode
	    ret = d.documentElement[method];
	    if (typeof ret !== 'number') {
	      // quirks mode
	      ret = d.body[method];
	    }
	  }
	  return ret;
	}

	function offset(elem) {
	  var box = void 0;
	  var x = void 0;
	  var y = void 0;
	  var doc = elem.ownerDocument;
	  var body = doc.body;
	  var docElem = doc && doc.documentElement;
	  box = elem.getBoundingClientRect();
	  x = box.left;
	  y = box.top;
	  x -= docElem.clientLeft || body.clientLeft || 0;
	  y -= docElem.clientTop || body.clientTop || 0;
	  var w = doc.defaultView || doc.parentWindow;
	  x += getScroll(w);
	  y += getScroll(w, true);
	  return {
	    left: x, top: y
	  };
		}

/***/ },
/* 686 */
[831, 687],
/* 687 */
[832, 688, 689, 694],
/* 688 */
77,
/* 689 */
[833, 690, 694],
/* 690 */
[834, 691, 692],
/* 691 */
80,
/* 692 */
[835, 693, 693],
/* 693 */
82,
/* 694 */
83,
/* 695 */
33,
/* 696 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Totop Component for uxcore
	 * @author eternaslky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(697);

/***/ },
/* 697 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	/**
	 * Totop Component for uxcore
	 * @author eternaslky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var classnames = __webpack_require__(5);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Totop = function (_React$Component) {
	    _inherits(Totop, _React$Component);

	    function Totop(props) {
	        _classCallCheck(this, Totop);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            showTotop: false
	        };
	        return _this;
	    }

	    Totop.prototype.componentDidMount = function componentDidMount() {
	        var me = this;
	        $(window).on("scroll.totop", function (e) {
	            var y = window.pageYOffset !== undefined ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;
	            if (y > me.props.distance && !me.state.showTotop) {
	                me.setState({
	                    showTotop: true
	                });
	            } else if (y <= me.props.distance && me.state.showTotop) {
	                me.setState({
	                    showTotop: false
	                });
	            }
	        });
	    };

	    Totop.prototype.componentWillUnmount = function componentWillUnmount() {
	        var me = this;
	        clearTimeout(me.timer);
	        $(window).off("scroll.totop");
	    };

	    /*
	     * scroll method to action like jQuery animation.
	     * @param element {DOM} scroll element
	     * @param to {number} the final scrollTop you want
	     * @param duration {number} scroll animation time (ms)
	     */

	    Totop.prototype.scrollTo = function scrollTo(element, to, duration) {
	        var me = this;
	        if (duration <= 0) return;
	        var difference = to - element.scrollTop;
	        var perTick = difference / duration * 10;

	        me.timer = setTimeout(function () {
	            element.scrollTop = element.scrollTop + perTick;
	            if (element.scrollTop === to) return;
	            me.scrollTo(element, to, duration - 10);
	        }, 10);
	    };

	    Totop.prototype.handleGotopClick = function handleGotopClick() {
	        var me = this;
	        me.scrollTo(document.body.scrollTop != 0 ? document.body : document.documentElement, me.props.to, me.props.duration);
	    };

	    Totop.prototype.render = function render() {
	        var _classnames, _classnames2;

	        var me = this;
	        var showCls = me.props.prefixCls;
	        return React.createElement('div', { className: classnames((_classnames = {}, _classnames[me.props.prefixCls] = true, _classnames[me.props.className] = !!me.props.className, _classnames[me.props.theme] = !!me.props.theme, _classnames["fn-clear"] = true, _classnames)) }, React.createElement('a', { className: classnames({
	                "btn gotop": true,
	                "show": me.state.showTotop
	            }), onClick: me.handleGotopClick.bind(me) }), React.createElement('div', { className: classnames((_classnames2 = {}, _classnames2[me.props.prefixCls + "-other"] = true, _classnames2)) }, me.props.children));
	    };

	    return Totop;
	}(React.Component);

	Totop.defaultProps = {
	    prefixCls: 'kuma-totop',
	    to: 10,
	    duration: 600,
	    distance: 30
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	Totop.propTypes = {
	    prefixCls: React.PropTypes.string,
	    className: React.PropTypes.string,
	    to: React.PropTypes.number,
	    distance: React.PropTypes.number,
	    duration: React.PropTypes.number,
	    theme: React.PropTypes.string
	};

	Totop.displayName = "Totop";

	module.exports = Totop;

/***/ },
/* 698 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	* @author:
	* @time:
	*/

		module.exports = __webpack_require__(699);

/***/ },
/* 699 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var classnames = __webpack_require__(5);
	var deepcopy = __webpack_require__(700);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Transfer = function (_React$Component) {
	    _inherits(Transfer, _React$Component);

	    function Transfer(props) {
	        _classCallCheck(this, Transfer);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            chosen: props.data.filter(function (item) {
	                return !!item.chosen;
	            }),
	            unChosen: props.data.filter(function (item) {
	                return !item.chosen;
	            })
	        };
	        return _this;
	    }

	    Transfer.prototype.componentDidMount = function componentDidMount() {
	        var me = this;
	    };

	    Transfer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        var me = this;
	        if (!me._isEqual(nextProps.data, me.props.data)) {
	            me.setState({
	                chosen: nextProps.data.filter(function (item) {
	                    return !!item.chosen;
	                }),
	                unChosen: nextProps.data.filter(function (item) {
	                    return !item.chosen;
	                })
	            });
	        }
	    };

	    Transfer.prototype._isEqual = function _isEqual(a, b) {
	        return JSON.stringify(a) == JSON.stringify(b);
	    };

	    /**
	     * 抽取 arr1 的一部分给 arr2，返回变换后的两个数组
	     * @param {array} arr1
	     * @param {array} arr2
	     */

	    Transfer.prototype.selectItems = function selectItems(arr) {
	        var me = this;
	        var data = deepcopy(this.state);
	        data.chosen.forEach(function (item, index) {
	            if (arr.indexOf(item.value) != -1) {
	                item.selected = true;
	            }
	        });
	        data.unChosen.forEach(function (item, index) {
	            if (arr.indexOf(item.value) != -1) {
	                item.selected = true;
	            }
	        });
	        me.setState(data);
	    };

	    /**
	     * 重置，取消所有的用户操作
	     */

	    Transfer.prototype.reset = function reset() {
	        var me = this;
	        me.setState({
	            chosen: me.props.data.filter(function (item) {
	                return !!item.chosen;
	            }),
	            unChosen: me.props.data.filter(function (item) {
	                return !item.chosen;
	            })
	        });
	    };

	    Transfer.prototype.locateItem = function locateItem(value, position) {
	        var data = me.state[position];
	        var leftBlock = me.refs.leftBlock;
	        var leftBlockEl = ReactDOM.findDOMNode(leftBlock);
	        var rightBlock = me.refs.rightBlock;
	        var rightBlockEl = ReactDOM.findDOMNode(rightBlock);
	        var index = void 0;
	        for (var i = 0; i < data.length; i++) {
	            if (data[i].name.indexOf(value) !== -1) {
	                index = i;
	                break;
	            }
	            if (data[i].keywords instanceof Array) {
	                var keywords = data[i].keywords;
	                for (var j = 0; j < keywords.length; j++) {
	                    if (keywords[j].indexOf(value) !== -1) {
	                        index = i;
	                        break;
	                    }
	                }
	                if (index != undefined) break;
	            }
	        }
	        if (index != undefined) {
	            if (position == 'unChosen') {
	                leftBlockEl.scrollTop = 30 * index;
	            } else {
	                rightBlock.scrollTop = 30 * index;
	            }
	        }
	    };

	    Transfer.prototype._handleSearchIconClick = function _handleSearchIconClick(position) {
	        var me = this;
	        var leftSearch = me.refs.leftSearch;
	        var rightSearch = me.refs.rightSearch;
	        var value = '';
	        if (position == "unChosen") {
	            value = leftSearch.value;
	        } else {
	            value = rightSearch.value;
	        }
	        me.locateItem(value, position);
	    };

	    Transfer.prototype._handleSearch = function _handleSearch(position, e) {
	        var me = this;
	        var leftSearch = me.refs.leftSearch;
	        var rightSearch = me.refs.rightSearch;
	        var value = '';
	        if (e.keyCode == 13) {
	            if (position == "unChosen") {
	                value = leftSearch.value;
	            } else {
	                value = rightSearch.value;
	            }
	            me.locateItem(value, position);
	        }
	    };

	    Transfer.prototype._changeChosenData = function _changeChosenData(arr1, arr2) {
	        var newArr1 = arr1.filter(function (item) {
	            return !item.selected;
	        });
	        var newArr2 = arr1.filter(function (item) {
	            return item.selected;
	        }).map(function (item, index) {
	            item.chosen = !item.chosen;
	            item.selected = false;
	            item.justMoved = true;
	            return item;
	        }).concat(arr2);

	        return {
	            arr1: newArr1,
	            arr2: newArr2
	        };
	    };

	    Transfer.prototype._handleItemClick = function _handleItemClick(e) {
	        var me = this;
	        if (me.props.disabled) return;
	        var target = e.currentTarget;
	        me._removeJustMoved(function (target) {
	            var key = target.getAttribute('data-key');
	            var isChosen = JSON.parse(target.getAttribute('data-chosen'));
	            var newData = deepcopy(me.state[isChosen ? 'chosen' : 'unChosen']);
	            newData[key].selected = !newData[key].selected;
	            var newState = {};
	            newState[isChosen ? 'chosen' : 'unChosen'] = newData;
	            me.setState(newState);
	        }.bind(me, target));
	    };

	    Transfer.prototype._removeJustMoved = function _removeJustMoved(cb) {
	        var data = deepcopy(this.state);
	        data.chosen.forEach(function (item, index) {
	            item.justMoved = false;
	        });
	        data.unChosen.forEach(function (item, index) {
	            item.justMoved = false;
	        });
	        me.setState(data, function () {
	            !!cb && cb();
	        });
	    };

	    Transfer.prototype._handleButtonClick = function _handleButtonClick(e) {
	        var me = this;
	        if (me.props.disabled) return;
	        var target = e.currentTarget;
	        var direction = target.getAttribute('data-direction');
	        if (target.className.indexOf('enable') == -1) return;
	        var oldChosen = deepcopy(me.state['chosen']);
	        var oldUnChosen = deepcopy(me.state['unChosen']);
	        var newChosen = [];
	        var newUnChosen = [];
	        var newData = {};
	        if (direction == 'left') {
	            newData = me._changeChosenData(oldChosen, oldUnChosen);
	            newChosen = newData.arr1;
	            newUnChosen = newData.arr2;
	        } else {
	            newData = me._changeChosenData(oldUnChosen, oldChosen);
	            newUnChosen = newData.arr1;
	            newChosen = newData.arr2;
	        }

	        me.setState({
	            chosen: newChosen,
	            unChosen: newUnChosen
	        }, function () {
	            me.props.onChange(me.state);
	        });
	    };

	    Transfer.prototype._renderItem = function _renderItem(item, index) {
	        var me = this;
	        window.me = me;
	        return React.createElement('li', { key: index, 'data-key': index, 'data-value': item.value, 'data-chosen': item.chosen, onClick: me._handleItemClick.bind(me) }, React.createElement('a', { className: classnames({
	                "selected": !!item.selected,
	                "justMoved": !!item.justMoved
	            }), href: 'javascript:;', title: item.description }, item.name));
	    };

	    Transfer.prototype._renderUnchosen = function _renderUnchosen() {
	        var me = this;
	        var arr = me.state.unChosen.filter(function (item) {
	            return !item.chosen;
	        }).map(me._renderItem.bind(me));
	        return arr;
	    };

	    Transfer.prototype._renderChosen = function _renderChosen() {
	        var me = this;
	        var arr = me.state.chosen.filter(function (item) {
	            return item.chosen;
	        }).map(me._renderItem.bind(me));
	        return arr;
	    };

	    Transfer.prototype._renderSearch = function _renderSearch(position) {
	        var me = this;
	        if (!me.props.showSearch) return;
	        var map = {
	            "unChosen": "leftSearch",
	            "chosen": "rightSearch"
	        };
	        return React.createElement('div', { className: 'searchBar' }, React.createElement('input', { type: 'text', ref: map[position], className: 'kuma-input', placeholder: me.props.searchPlaceholder, onKeyDown: me._handleSearch.bind(me, position) }), React.createElement('i', { className: 'kuma-icon kuma-icon-search', onClick: me._handleSearchIconClick.bind(me, position) }));
	    };

	    Transfer.prototype.render = function render() {
	        var me = this;
	        return React.createElement('div', { className: classnames({
	                "uxTransfer": true,
	                "disabled": me.props.disabled
	            }) }, React.createElement('table', { className: 'kuma-uxtransfer-container' }, React.createElement('thead', { className: 'kuma-uxtransfer-head' }, React.createElement('tr', null, React.createElement('th', { className: 'fn-clear left-head' }, React.createElement('span', { className: 'title' }, me.props.leftTitle), me._renderSearch("unChosen")), React.createElement('th', null, ' '), React.createElement('th', { className: 'fn-clear right-head' }, React.createElement('span', { className: 'title' }, me.props.rightTitle), me._renderSearch("chosen")))), React.createElement('tbody', null, React.createElement('tr', null, React.createElement('td', { className: 'left-block' }, React.createElement('ul', { ref: 'leftBlock', className: classnames({
	                "kuma-uxtransfer-block": true
	            }) }, me._renderUnchosen())), React.createElement('td', { className: 'kuma-uxtransfer-buttons' }, React.createElement('a', { href: 'javascript:;', 'data-direction': 'left', className: classnames({
	                enable: me.state.chosen.some(function (item) {
	                    return !!item.selected;
	                }) && !me.props.disabled
	            }), onClick: me._handleButtonClick.bind(me) }), React.createElement('br', null), React.createElement('a', { href: 'javascript:;', 'data-direction': 'right', className: classnames({
	                enable: me.state.unChosen.some(function (item) {
	                    return !!item.selected;
	                }) && !me.props.disabled
	            }), onClick: me._handleButtonClick.bind(me) })), React.createElement('td', { className: 'right-block' }, React.createElement('ul', { ref: 'rightBlock', className: classnames({
	                "kuma-uxtransfer-block": true
	            }) }, me._renderChosen()))))));
	    };

	    return Transfer;
	}(React.Component);

	Transfer.displayName = "Transfer";
	Transfer.defaultProps = {
	    searchPlaceholder: '定位输入内容',
	    data: [],
	    leftTitle: '未选中',
	    rightTitle: '已选中',
	    disabled: false,
	    showSearch: true,
	    onChange: function onChange() {}
	};
	Transfer.propTypes = {
	    searchPlaceholder: React.PropTypes.string,
	    data: React.PropTypes.array,
	    disabled: React.PropTypes.bool,
	    showSearch: React.PropTypes.bool,
	    leftTitle: React.PropTypes.string,
	    rightTitle: React.PropTypes.string,
	    onChange: React.PropTypes.func
	};

		module.exports = Transfer;

/***/ },
/* 700 */
342,
/* 701 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Tree Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(702);

/***/ },
/* 702 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _objectAssign = __webpack_require__(703);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _rcTree = __webpack_require__(704);

	var _rcTree2 = _interopRequireDefault(_rcTree);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Tree = function (_RcTree) {
	    _inherits(Tree, _RcTree);

	    function Tree(props) {
	        _classCallCheck(this, Tree);

	        return _possibleConstructorReturn(this, _RcTree.call(this, props));
	    }

	    return Tree;
	}(_rcTree2["default"]);

	Tree.displayName = 'Tree';
	Tree.propTypes = _rcTree2["default"].propTypes;
	Tree.defaultProps = (0, _objectAssign2["default"])(_rcTree2["default"].defaultProps, {
	    prefixCls: 'kuma-tree',
	    showIcon: false
	});

	Tree.TreeNode = _rcTree2["default"].TreeNode;

	exports["default"] = Tree;
	module.exports = exports['default'];

/***/ },
/* 703 */
33,
/* 704 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _Tree = __webpack_require__(705);

	var _Tree2 = _interopRequireDefault(_Tree);

	var _TreeNode = __webpack_require__(707);

	var _TreeNode2 = _interopRequireDefault(_TreeNode);

	_Tree2['default'].TreeNode = _TreeNode2['default'];

	exports['default'] = _Tree2['default'];
	module.exports = exports['default'];

/***/ },
/* 705 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _get = function get(_x2, _x3, _x4) {
	  var _again = true;_function: while (_again) {
	    var object = _x2,
	        property = _x3,
	        receiver = _x4;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	      var parent = Object.getPrototypeOf(object);if (parent === null) {
	        return undefined;
	      } else {
	        _x2 = parent;_x3 = property;_x4 = receiver;_again = true;desc = parent = undefined;continue _function;
	      }
	    } else if ('value' in desc) {
	      return desc.value;
	    } else {
	      var getter = desc.get;if (getter === undefined) {
	        return undefined;
	      }return getter.call(receiver);
	    }
	  }
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _toConsumableArray(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }return arr2;
	  } else {
	    return Array.from(arr);
	  }
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError('Cannot call a class as a function');
	  }
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== 'function' && superClass !== null) {
	    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _objectAssign = __webpack_require__(703);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _util = __webpack_require__(706);

	function noop() {}

	var Tree = function (_React$Component) {
	  _inherits(Tree, _React$Component);

	  function Tree(props) {
	    var _this = this;

	    _classCallCheck(this, Tree);

	    _get(Object.getPrototypeOf(Tree.prototype), 'constructor', this).call(this, props);
	    ['onKeyDown', 'onCheck'].forEach(function (m) {
	      _this[m] = _this[m].bind(_this);
	    });
	    this.contextmenuKeys = [];

	    this.state = {
	      expandedKeys: this.getDefaultExpandedKeys(props),
	      checkedKeys: this.getDefaultCheckedKeys(props),
	      selectedKeys: this.getDefaultSelectedKeys(props),
	      dragNodesKeys: '',
	      dragOverNodeKey: '',
	      dropNodeKey: ''
	    };
	  }

	  _createClass(Tree, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var expandedKeys = this.getDefaultExpandedKeys(nextProps, true);
	      var checkedKeys = this.getDefaultCheckedKeys(nextProps, true);
	      var selectedKeys = this.getDefaultSelectedKeys(nextProps, true);
	      var st = {};
	      if (expandedKeys) {
	        st.expandedKeys = expandedKeys;
	      }
	      if (checkedKeys) {
	        st.checkedKeys = checkedKeys;
	      }
	      if (selectedKeys) {
	        st.selectedKeys = selectedKeys;
	      }
	      this.setState(st);
	    }
	  }, {
	    key: 'onDragStart',
	    value: function onDragStart(e, treeNode) {
	      this.dragNode = treeNode;
	      this.dragNodesKeys = this.getDragNodes(treeNode);
	      var st = {
	        dragNodesKeys: this.dragNodesKeys
	      };
	      var expandedKeys = this.getExpandedKeys(treeNode, false);
	      if (expandedKeys) {
	        // Controlled expand, save and then reset
	        this.getRawExpandedKeys();
	        st.expandedKeys = expandedKeys;
	      }
	      this.setState(st);
	      this.props.onDragStart({
	        event: e,
	        node: treeNode
	      });
	    }
	  }, {
	    key: 'onDragEnterGap',
	    value: function onDragEnterGap(e, treeNode) {
	      // console.log(e.pageY, getOffset(treeNode.refs.selectHandle), treeNode.props.eventKey);
	      var offsetTop = (0, _util.getOffset)(treeNode.refs.selectHandle).top;
	      var offsetHeight = treeNode.refs.selectHandle.offsetHeight;
	      var pageY = e.pageY;
	      var gapHeight = 2;
	      if (pageY > offsetTop + offsetHeight - gapHeight) {
	        this.dropPosition = 1;
	        return 1;
	      }
	      if (pageY < offsetTop + gapHeight) {
	        this.dropPosition = -1;
	        return -1;
	      }
	      this.dropPosition = 0;
	      return 0;
	    }
	  }, {
	    key: 'onDragEnter',
	    value: function onDragEnter(e, treeNode) {
	      var enterGap = this.onDragEnterGap(e, treeNode);
	      if (this.dragNode.props.eventKey === treeNode.props.eventKey && enterGap === 0) {
	        this.setState({
	          dragOverNodeKey: ''
	        });
	        return;
	      }
	      var st = {
	        dragOverNodeKey: treeNode.props.eventKey
	      };
	      var expandedKeys = this.getExpandedKeys(treeNode, true);
	      if (expandedKeys) {
	        this.getRawExpandedKeys();
	        st.expandedKeys = expandedKeys;
	      }
	      this.setState(st);
	      this.props.onDragEnter({
	        event: e,
	        node: treeNode,
	        expandedKeys: expandedKeys && [].concat(_toConsumableArray(expandedKeys)) || [].concat(_toConsumableArray(this.state.expandedKeys))
	      });
	    }
	  }, {
	    key: 'onDragOver',
	    value: function onDragOver(e, treeNode) {
	      this.props.onDragOver({ event: e, node: treeNode });
	    }
	  }, {
	    key: 'onDragLeave',
	    value: function onDragLeave(e, treeNode) {
	      this.props.onDragLeave({ event: e, node: treeNode });
	    }
	  }, {
	    key: 'onDrop',
	    value: function onDrop(e, treeNode) {
	      var key = treeNode.props.eventKey;
	      this.setState({
	        dragOverNodeKey: '',
	        dropNodeKey: key
	      });
	      if (this.dragNodesKeys.indexOf(key) > -1) {
	        if (console.warn) {
	          console.warn('can not drop to dragNode(include it\'s children node)');
	        }
	        return false;
	      }

	      var posArr = treeNode.props.pos.split('-');
	      var res = {
	        event: e,
	        node: treeNode,
	        dragNode: this.dragNode,
	        dragNodesKeys: [].concat(_toConsumableArray(this.dragNodesKeys)),
	        dropPosition: this.dropPosition + Number(posArr[posArr.length - 1])
	      };
	      if (this.dropPosition !== 0) {
	        res.dropToGap = true;
	      }
	      if ('expandedKeys' in this.props) {
	        res.rawExpandedKeys = [].concat(_toConsumableArray(this._rawExpandedKeys)) || [].concat(_toConsumableArray(this.state.expandedKeys));
	      }
	      this.props.onDrop(res);
	    }
	  }, {
	    key: 'onExpand',
	    value: function onExpand(treeNode) {
	      var _this2 = this;

	      var expand = !treeNode.props.expanded;
	      var controlled = 'expandedKeys' in this.props;
	      var expandedKeys = [].concat(_toConsumableArray(this.state.expandedKeys));
	      var index = expandedKeys.indexOf(treeNode.props.eventKey);
	      if (!controlled) {
	        if (expand) {
	          if (index === -1) {
	            expandedKeys.push(treeNode.props.eventKey);
	          }
	        } else {
	          expandedKeys.splice(index, 1);
	        }
	        this.setState({ expandedKeys: expandedKeys });
	        // remember the return object, such as expandedKeys, must clone!!
	        // so you can avoid outer code change it.
	        this.props.onExpand(treeNode, expand, [].concat(_toConsumableArray(expandedKeys)));
	      } else {
	        this.props.onExpand(treeNode, !expand, [].concat(_toConsumableArray(expandedKeys)));
	      }

	      // after data loaded, need set new expandedKeys
	      if (expand && this.props.loadData) {
	        return this.props.loadData(treeNode).then(function () {
	          if (!controlled) {
	            _this2.setState({ expandedKeys: expandedKeys });
	          }
	        });
	      }
	    }
	  }, {
	    key: 'onCheck',
	    value: function onCheck(treeNode) {
	      var checked = !treeNode.props.checked;
	      if (treeNode.props.checkPart) {
	        checked = true;
	      }
	      var key = treeNode.key || treeNode.props.eventKey;
	      var checkedKeys = [].concat(_toConsumableArray(this.state.checkedKeys));
	      if (checked && checkedKeys.indexOf(key) === -1) {
	        checkedKeys.push(key);
	      }
	      var checkKeys = (0, _util.getTreeNodesStates)(this.props.children, checkedKeys, checked, key);
	      var newSt = {
	        event: 'check',
	        node: treeNode,
	        checked: checked,
	        checkedNodes: checkKeys.checkedNodes,
	        checkedNodesPositions: checkKeys.checkedNodesPositions
	      };
	      checkedKeys = checkKeys.checkedKeys;
	      if (!('checkedKeys' in this.props)) {
	        this.setState({
	          checkedKeys: checkedKeys
	        });
	      }
	      this.props.onCheck(checkedKeys, newSt);
	    }
	  }, {
	    key: 'onSelect',
	    value: function onSelect(treeNode) {
	      var props = this.props;
	      var selectedKeys = [].concat(_toConsumableArray(this.state.selectedKeys));
	      var eventKey = treeNode.props.eventKey;
	      var index = selectedKeys.indexOf(eventKey);
	      var selected = undefined;
	      if (index !== -1) {
	        selected = false;
	        selectedKeys.splice(index, 1);
	      } else {
	        selected = true;
	        if (!props.multiple) {
	          selectedKeys.length = 0;
	        }
	        selectedKeys.push(eventKey);
	      }
	      var selectedNodes = [];
	      if (selectedKeys.length) {
	        (0, _util.loopAllChildren)(this.props.children, function (item) {
	          if (selectedKeys.indexOf(item.key) !== -1) {
	            selectedNodes.push(item);
	          }
	        });
	      }
	      var newSt = {
	        event: 'select',
	        node: treeNode,
	        selected: selected,
	        selectedNodes: selectedNodes
	      };
	      if (!('selectedKeys' in this.props)) {
	        this.setState({
	          selectedKeys: selectedKeys
	        });
	      }
	      props.onSelect(selectedKeys, newSt);
	    }
	  }, {
	    key: 'onMouseEnter',
	    value: function onMouseEnter(e, treeNode) {
	      this.props.onMouseEnter({ event: e, node: treeNode });
	    }
	  }, {
	    key: 'onMouseLeave',
	    value: function onMouseLeave(e, treeNode) {
	      this.props.onMouseLeave({ event: e, node: treeNode });
	    }
	  }, {
	    key: 'onContextMenu',
	    value: function onContextMenu(e, treeNode) {
	      var selectedKeys = [].concat(_toConsumableArray(this.state.selectedKeys));
	      var eventKey = treeNode.props.eventKey;
	      if (this.contextmenuKeys.indexOf(eventKey) === -1) {
	        this.contextmenuKeys.push(eventKey);
	      }
	      this.contextmenuKeys.forEach(function (key) {
	        var index = selectedKeys.indexOf(key);
	        if (index !== -1) {
	          selectedKeys.splice(index, 1);
	        }
	      });
	      if (selectedKeys.indexOf(eventKey) === -1) {
	        selectedKeys.push(eventKey);
	      }
	      this.setState({
	        selectedKeys: selectedKeys
	      });
	      this.props.onRightClick({ event: e, node: treeNode });
	    }

	    // all keyboard events callbacks run from here at first
	  }, {
	    key: 'onKeyDown',
	    value: function onKeyDown(e) {
	      e.preventDefault();
	    }
	  }, {
	    key: 'getFilterExpandedKeys',
	    value: function getFilterExpandedKeys(props) {
	      var defaultExpandedKeys = props.defaultExpandedKeys;
	      var expandedPositionArr = [];
	      if (props.autoExpandParent) {
	        (0, _util.loopAllChildren)(props.children, function (item, index, pos, newKey) {
	          if (defaultExpandedKeys.indexOf(newKey) > -1) {
	            expandedPositionArr.push(pos);
	          }
	        });
	      }
	      var filterExpandedKeys = [];
	      (0, _util.loopAllChildren)(props.children, function (item, index, pos, newKey) {
	        if (props.defaultExpandAll) {
	          filterExpandedKeys.push(newKey);
	        } else if (props.autoExpandParent) {
	          expandedPositionArr.forEach(function (p) {
	            if ((p.split('-').length > pos.split('-').length && (0, _util.isInclude)(pos.split('-'), p.split('-')) || pos === p) && filterExpandedKeys.indexOf(newKey) === -1) {
	              filterExpandedKeys.push(newKey);
	            }
	          });
	        }
	      });
	      return filterExpandedKeys.length ? filterExpandedKeys : defaultExpandedKeys;
	    }
	  }, {
	    key: 'getDefaultExpandedKeys',
	    value: function getDefaultExpandedKeys(props, willReceiveProps) {
	      var expandedKeys = willReceiveProps ? undefined : this.getFilterExpandedKeys(props);
	      if ('expandedKeys' in props) {
	        expandedKeys = props.expandedKeys || [];
	      }
	      return expandedKeys;
	    }
	  }, {
	    key: 'getDefaultCheckedKeys',
	    value: function getDefaultCheckedKeys(props, willReceiveProps) {
	      var checkedKeys = willReceiveProps ? undefined : props.defaultCheckedKeys;
	      if ('checkedKeys' in props) {
	        checkedKeys = props.checkedKeys || [];
	      }
	      return checkedKeys;
	    }
	  }, {
	    key: 'getDefaultSelectedKeys',
	    value: function getDefaultSelectedKeys(props, willReceiveProps) {
	      var getKeys = function getKeys(keys) {
	        if (props.multiple) {
	          return [].concat(_toConsumableArray(keys));
	        }
	        if (keys.length) {
	          return [keys[0]];
	        }
	        return keys;
	      };
	      var selectedKeys = willReceiveProps ? undefined : getKeys(props.defaultSelectedKeys);
	      if ('selectedKeys' in props) {
	        selectedKeys = getKeys(props.selectedKeys);
	      }
	      return selectedKeys;
	    }
	  }, {
	    key: 'getRawExpandedKeys',
	    value: function getRawExpandedKeys() {
	      if (!this._rawExpandedKeys && 'expandedKeys' in this.props) {
	        this._rawExpandedKeys = [].concat(_toConsumableArray(this.state.expandedKeys));
	      }
	    }
	  }, {
	    key: 'getOpenTransitionName',
	    value: function getOpenTransitionName() {
	      var props = this.props;
	      var transitionName = props.openTransitionName;
	      var animationName = props.openAnimation;
	      if (!transitionName && typeof animationName === 'string') {
	        transitionName = props.prefixCls + '-open-' + animationName;
	      }
	      return transitionName;
	    }
	  }, {
	    key: 'getDragNodes',
	    value: function getDragNodes(treeNode) {
	      var dragNodesKeys = [];
	      var tPArr = treeNode.props.pos.split('-');
	      (0, _util.loopAllChildren)(this.props.children, function (item, index, pos, newKey) {
	        var pArr = pos.split('-');
	        if (treeNode.props.pos === pos || tPArr.length < pArr.length && (0, _util.isInclude)(tPArr, pArr)) {
	          dragNodesKeys.push(newKey);
	        }
	      });
	      return dragNodesKeys;
	    }
	  }, {
	    key: 'getExpandedKeys',
	    value: function getExpandedKeys(treeNode, expand) {
	      var key = treeNode.props.eventKey;
	      var expandedKeys = this.state.expandedKeys;
	      var expandedIndex = expandedKeys.indexOf(key);
	      var exKeys = undefined;
	      if (expandedIndex > -1 && !expand) {
	        exKeys = [].concat(_toConsumableArray(expandedKeys));
	        exKeys.splice(expandedIndex, 1);
	        return exKeys;
	      }
	      if (expand && expandedKeys.indexOf(key) === -1) {
	        return expandedKeys.concat([key]);
	      }
	    }
	  }, {
	    key: 'filterTreeNode',
	    value: function filterTreeNode(treeNode) {
	      var filterTreeNode = this.props.filterTreeNode;
	      if (typeof filterTreeNode !== 'function' || treeNode.props.disabled) {
	        return false;
	      }
	      return filterTreeNode.call(this, treeNode);
	    }
	  }, {
	    key: 'renderTreeNode',
	    value: function renderTreeNode(child, index) {
	      var level = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

	      var pos = level + '-' + index;
	      var key = child.key || pos;
	      var state = this.state;
	      var props = this.props;
	      var cloneProps = {
	        ref: 'treeNode-' + key,
	        root: this,
	        eventKey: key,
	        pos: pos,
	        selectable: props.selectable,
	        loadData: props.loadData,
	        onMouseEnter: props.onMouseEnter,
	        onMouseLeave: props.onMouseLeave,
	        onRightClick: props.onRightClick,
	        prefixCls: props.prefixCls,
	        showLine: props.showLine,
	        showIcon: props.showIcon,
	        checkable: props.checkable,
	        draggable: props.draggable,
	        dragOver: state.dragOverNodeKey === key && this.dropPosition === 0,
	        dragOverGapTop: state.dragOverNodeKey === key && this.dropPosition === -1,
	        dragOverGapBottom: state.dragOverNodeKey === key && this.dropPosition === 1,
	        expanded: state.expandedKeys.indexOf(key) !== -1,
	        selected: state.selectedKeys.indexOf(key) !== -1,
	        checked: this.checkedKeys.indexOf(key) !== -1,
	        checkPart: this.checkPartKeys.indexOf(key) !== -1,
	        openTransitionName: this.getOpenTransitionName(),
	        openAnimation: props.openAnimation,
	        filterTreeNode: this.filterTreeNode.bind(this)
	      };
	      if (this.treeNodesStates[pos]) {
	        (0, _objectAssign2['default'])(cloneProps, this.treeNodesStates[pos].siblingPosition);
	      }
	      return _react2['default'].cloneElement(child, cloneProps);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var props = this.props;
	      var domProps = {
	        className: (0, _classnames2['default'])(props.className, props.prefixCls),
	        role: 'tree-node'
	      };
	      if (props.focusable) {
	        domProps.tabIndex = '0';
	        domProps.onKeyDown = this.onKeyDown;
	      }
	      // console.log(this.state.expandedKeys, this._rawExpandedKeys, props.children);
	      var checkKeys = (0, _util.getTreeNodesStates)(props.children, this.state.checkedKeys, true);
	      this.checkPartKeys = checkKeys.checkPartKeys;
	      this.checkedKeys = checkKeys.checkedKeys;
	      this.treeNodesStates = checkKeys.treeNodesStates;

	      return _react2['default'].createElement('ul', _extends({}, domProps, { unselectable: true, ref: 'tree' }), _react2['default'].Children.map(props.children, this.renderTreeNode, this));
	    }
	  }]);

	  return Tree;
	}(_react2['default'].Component);

	Tree.propTypes = {
	  prefixCls: _react.PropTypes.string,
	  children: _react.PropTypes.any,
	  showLine: _react.PropTypes.bool,
	  showIcon: _react.PropTypes.bool,
	  selectable: _react.PropTypes.bool,
	  multiple: _react.PropTypes.bool,
	  checkable: _react.PropTypes.oneOfType([_react.PropTypes.bool, _react.PropTypes.node]),
	  draggable: _react.PropTypes.bool,
	  autoExpandParent: _react.PropTypes.bool,
	  defaultExpandAll: _react.PropTypes.bool,
	  expandedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  defaultExpandedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  checkedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  defaultCheckedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  selectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  defaultSelectedKeys: _react.PropTypes.arrayOf(_react.PropTypes.string),
	  onExpand: _react.PropTypes.func,
	  onCheck: _react.PropTypes.func,
	  onSelect: _react.PropTypes.func,
	  loadData: _react.PropTypes.func,
	  onMouseEnter: _react.PropTypes.func,
	  onMouseLeave: _react.PropTypes.func,
	  onRightClick: _react.PropTypes.func,
	  onDragStart: _react.PropTypes.func,
	  onDragEnter: _react.PropTypes.func,
	  onDragOver: _react.PropTypes.func,
	  onDragLeave: _react.PropTypes.func,
	  onDrop: _react.PropTypes.func,
	  filterTreeNode: _react.PropTypes.func,
	  openTransitionName: _react.PropTypes.string,
	  openAnimation: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object])
	};

	Tree.defaultProps = {
	  prefixCls: 'rc-tree',
	  showLine: false,
	  showIcon: true,
	  selectable: true,
	  multiple: false,
	  checkable: false,
	  draggable: false,
	  autoExpandParent: true,
	  defaultExpandAll: false,
	  defaultExpandedKeys: [],
	  defaultCheckedKeys: [],
	  defaultSelectedKeys: [],
	  onExpand: noop,
	  onCheck: noop,
	  onSelect: noop,
	  onDragStart: noop,
	  onDragEnter: noop,
	  onDragOver: noop,
	  onDragLeave: noop,
	  onDrop: noop
	};

	exports['default'] = Tree;
	module.exports = exports['default'];

/***/ },
/* 706 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.browser = browser;
	exports.getOffset = getOffset;
	exports.loopAllChildren = loopAllChildren;
	exports.isInclude = isInclude;
	exports.filterParentPosition = filterParentPosition;
	exports.getTreeNodesStates = getTreeNodesStates;

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	function browser(navigator) {
	  var tem = undefined;
	  var ua = navigator.userAgent;
	  var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
	  if (/trident/i.test(M[1])) {
	    tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
	    return 'IE ' + (tem[1] || '');
	  }
	  if (M[1] === 'Chrome') {
	    tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
	    if (tem) return tem.slice(1).join(' ').replace('OPR', 'Opera');
	  }
	  M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
	  tem = ua.match(/version\/(\d+)/i);
	  if (tem) {
	    M.splice(1, 1, tem[1]);
	  }
	  return M.join(' ');
	}

	// export function getOffset(el) {
	//   const obj = el.getBoundingClientRect();
	//   return {
	//     left: obj.left + document.body.scrollLeft,
	//     top: obj.top + document.body.scrollTop,
	//     width: obj.width,
	//     height: obj.height
	//   };
	// }

	// // iscroll offset
	// offset = function (el) {
	//   var left = -el.offsetLeft,
	//     top = -el.offsetTop;

	//   // jshint -W084
	//   while (el = el.offsetParent) {
	//     left -= el.offsetLeft;
	//     top -= el.offsetTop;
	//   }
	//   // jshint +W084

	//   return {
	//     left: left,
	//     top: top
	//   };
	// }

	function getOffset(ele) {
	  var el = ele;
	  var _x = 0;
	  var _y = 0;
	  while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
	    _x += el.offsetLeft - el.scrollLeft;
	    _y += el.offsetTop - el.scrollTop;
	    el = el.offsetParent;
	  }
	  return { top: _y, left: _x };
	}

	function getChildrenlength(children) {
	  var len = 1;
	  if (Array.isArray(children)) {
	    len = children.length;
	  }
	  return len;
	}

	function getSiblingPosition(index, len, siblingPosition) {
	  if (len === 1) {
	    siblingPosition.first = true;
	    siblingPosition.last = true;
	  } else {
	    siblingPosition.first = index === 0;
	    siblingPosition.last = index === len - 1;
	  }
	  return siblingPosition;
	}

	function loopAllChildren(childs, callback) {
	  var loop = function loop(children, level) {
	    var len = getChildrenlength(children);
	    _react2['default'].Children.forEach(children, function (item, index) {
	      var pos = level + '-' + index;
	      if (item.props.children && item.type && item.type.isTreeNode) {
	        loop(item.props.children, pos);
	      }
	      callback(item, index, pos, item.key || pos, getSiblingPosition(index, len, {}));
	    });
	  };
	  loop(childs, 0);
	}

	function isInclude(smallArray, bigArray) {
	  return smallArray.every(function (ii, i) {
	    return ii === bigArray[i];
	  });
	}

	// console.log(isInclude(['0', '1'], ['0', '10', '1']));

	function uniqueArray(arr) {
	  var obj = {};
	  arr.forEach(function (item) {
	    if (!obj[item]) {
	      obj[item] = true;
	    }
	  });
	  return Object.keys(obj);
	}
	// console.log(uniqueArray(['11', '2', '2']));

	function filterParentPosition(arr) {
	  var a = [].concat(arr);
	  arr.forEach(function (item) {
	    var itemArr = item.split('-');
	    a.forEach(function (ii, index) {
	      var iiArr = ii.split('-');
	      if (itemArr.length <= iiArr.length && isInclude(itemArr, iiArr)) {
	        a[index] = item;
	      }
	      if (itemArr.length > iiArr.length && isInclude(iiArr, itemArr)) {
	        a[index] = ii;
	      }
	    });
	  });
	  return uniqueArray(a);
	}

	// console.log(filterParentPosition(['0-2', '0-10', '0-0-1', '0-1-1', '0-0','0-1', '0-10-0']));

	// TODO 效率差, 需要缓存优化
	function handleCheckState(obj, checkedPositionArr, checkIt) {
	  var stripTail = function stripTail(str) {
	    var arr = str.match(/(.+)(-[^-]+)$/);
	    var st = '';
	    if (arr && arr.length === 3) {
	      st = arr[1];
	    }
	    return st;
	  };
	  // console.log(stripTail('0-101-000'));
	  var splitPosition = function splitPosition(pos) {
	    return pos.split('-');
	  };
	  checkedPositionArr.forEach(function (_pos) {
	    // 设置子节点，全选或全不选
	    var _posArr = splitPosition(_pos);
	    Object.keys(obj).forEach(function (i) {
	      var iArr = splitPosition(i);
	      if (iArr.length > _posArr.length && isInclude(_posArr, iArr)) {
	        obj[i].checkPart = false;
	        obj[i].checked = checkIt;
	      }
	    });
	    // 循环设置父节点的 选中 或 半选状态
	    var loop = function loop(__pos) {
	      var _posLen = splitPosition(__pos).length;
	      if (_posLen <= 2) {
	        // e.g. '0-0', '0-1'
	        return;
	      }
	      var sibling = 0;
	      var siblingChecked = 0;
	      var parentPosition = stripTail(__pos);
	      Object.keys(obj).forEach(function (i) {
	        var iArr = splitPosition(i);
	        if (iArr.length === _posLen && isInclude(splitPosition(parentPosition), iArr)) {
	          sibling++;
	          if (obj[i].checked) {
	            siblingChecked++;
	          } else if (obj[i].checkPart) {
	            siblingChecked += 0.5;
	          }
	        }
	      });
	      var parent = obj[parentPosition];
	      // sibling 不会等于0
	      // 全不选 - 全选 - 半选
	      if (siblingChecked === 0) {
	        parent.checked = false;
	        parent.checkPart = false;
	      } else if (siblingChecked === sibling) {
	        parent.checked = true;
	        parent.checkPart = false;
	      } else {
	        parent.checkPart = true;
	        parent.checked = false;
	      }
	      loop(parentPosition);
	    };
	    loop(_pos);
	  });
	}

	function getCheckKeys(treeNodesStates) {
	  var checkPartKeys = [];
	  var checkedKeys = [];
	  var checkedNodes = [];
	  var checkedNodesPositions = [];
	  Object.keys(treeNodesStates).forEach(function (item) {
	    var itemObj = treeNodesStates[item];
	    if (itemObj.checked) {
	      checkedKeys.push(itemObj.key);
	      checkedNodes.push(itemObj.node);
	      checkedNodesPositions.push({ node: itemObj.node, pos: item });
	    } else if (itemObj.checkPart) {
	      checkPartKeys.push(itemObj.key);
	    }
	  });
	  return {
	    checkPartKeys: checkPartKeys, checkedKeys: checkedKeys, checkedNodes: checkedNodes, checkedNodesPositions: checkedNodesPositions, treeNodesStates: treeNodesStates
	  };
	}

	function getTreeNodesStates(children, checkedKeys, checkIt, unCheckKey) {
	  var checkedPosition = [];
	  var treeNodesStates = {};
	  loopAllChildren(children, function (item, index, pos, keyOrPos, siblingPosition) {
	    var checked = false;
	    if (checkedKeys.indexOf(keyOrPos) !== -1) {
	      checked = true;
	      checkedPosition.push(pos);
	    }
	    treeNodesStates[pos] = {
	      node: item,
	      key: keyOrPos,
	      checked: checked,
	      checkPart: false,
	      siblingPosition: siblingPosition
	    };
	  });

	  // debugger
	  handleCheckState(treeNodesStates, filterParentPosition(checkedPosition.sort()), true);

	  if (!checkIt && unCheckKey) {
	    var pos = undefined;
	    Object.keys(treeNodesStates).forEach(function (item) {
	      var itemObj = treeNodesStates[item];
	      if (itemObj.key === unCheckKey) {
	        pos = item;
	        itemObj.checked = checkIt;
	        itemObj.checkPart = false;
	      }
	    });
	    handleCheckState(treeNodesStates, [pos], checkIt);
	  }

	  return getCheckKeys(treeNodesStates);
		}

/***/ },
/* 707 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _get = function get(_x, _x2, _x3) {
	  var _again = true;_function: while (_again) {
	    var object = _x,
	        property = _x2,
	        receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	      var parent = Object.getPrototypeOf(object);if (parent === null) {
	        return undefined;
	      } else {
	        _x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;
	      }
	    } else if ('value' in desc) {
	      return desc.value;
	    } else {
	      var getter = desc.get;if (getter === undefined) {
	        return undefined;
	      }return getter.call(receiver);
	    }
	  }
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError('Cannot call a class as a function');
	  }
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== 'function' && superClass !== null) {
	    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _objectAssign = __webpack_require__(703);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _rcAnimate = __webpack_require__(708);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _util = __webpack_require__(706);

	var browserUa = typeof window !== 'undefined' ? (0, _util.browser)(window.navigator) : '';
	var ieOrEdge = /.*(IE|Edge).+/.test(browserUa);
	// const uaArray = browserUa.split(' ');
	// const gtIE8 = uaArray.length !== 2 || uaArray[0].indexOf('IE') === -1 || Number(uaArray[1]) > 8;

	var defaultTitle = '---';

	var TreeNode = function (_React$Component) {
	  _inherits(TreeNode, _React$Component);

	  function TreeNode(props) {
	    var _this = this;

	    _classCallCheck(this, TreeNode);

	    _get(Object.getPrototypeOf(TreeNode.prototype), 'constructor', this).call(this, props);
	    ['onExpand', 'onCheck', 'onContextMenu', 'onMouseEnter', 'onMouseLeave', 'onDragStart', 'onDragEnter', 'onDragOver', 'onDragLeave', 'onDrop'].forEach(function (m) {
	      _this[m] = _this[m].bind(_this);
	    });
	    this.state = {
	      dataLoading: false,
	      dragNodeHighlight: false
	    };
	  }

	  _createClass(TreeNode, [{
	    key: 'onCheck',
	    value: function onCheck() {
	      this.props.root.onCheck(this);
	    }
	  }, {
	    key: 'onSelect',
	    value: function onSelect() {
	      this.props.root.onSelect(this);
	    }
	  }, {
	    key: 'onMouseEnter',
	    value: function onMouseEnter(e) {
	      e.preventDefault();
	      this.props.root.onMouseEnter(e, this);
	    }
	  }, {
	    key: 'onMouseLeave',
	    value: function onMouseLeave(e) {
	      e.preventDefault();
	      this.props.root.onMouseLeave(e, this);
	    }
	  }, {
	    key: 'onContextMenu',
	    value: function onContextMenu(e) {
	      e.preventDefault();
	      this.props.root.onContextMenu(e, this);
	    }
	  }, {
	    key: 'onDragStart',
	    value: function onDragStart(e) {
	      // console.log('dragstart', this.props.eventKey, e);
	      // e.preventDefault();
	      e.stopPropagation();
	      this.setState({
	        dragNodeHighlight: true
	      });
	      this.props.root.onDragStart(e, this);
	      try {
	        // ie throw error
	        e.dataTransfer.setData('text/plain', 'firefox-need-it');
	      } finally {
	        // empty
	      }
	    }
	  }, {
	    key: 'onDragEnter',
	    value: function onDragEnter(e) {
	      // console.log('dragenter', this.props.eventKey, e);
	      e.preventDefault();
	      e.stopPropagation();
	      this.props.root.onDragEnter(e, this);
	    }
	  }, {
	    key: 'onDragOver',
	    value: function onDragOver(e) {
	      // console.log(this.props.eventKey, e);
	      // todo disabled
	      e.preventDefault();
	      e.stopPropagation();
	      this.props.root.onDragOver(e, this);
	      return false;
	    }
	  }, {
	    key: 'onDragLeave',
	    value: function onDragLeave(e) {
	      // console.log(this.props.eventKey, e);
	      e.stopPropagation();
	      this.props.root.onDragLeave(e, this);
	    }
	  }, {
	    key: 'onDrop',
	    value: function onDrop(e) {
	      e.preventDefault();
	      e.stopPropagation();
	      this.setState({
	        dragNodeHighlight: false
	      });
	      this.props.root.onDrop(e, this);
	    }
	  }, {
	    key: 'onExpand',
	    value: function onExpand() {
	      var _this2 = this;

	      var callbackPromise = this.props.root.onExpand(this);
	      if (callbackPromise && (typeof callbackPromise === 'undefined' ? 'undefined' : _typeof(callbackPromise)) === 'object') {
	        (function () {
	          var setLoading = function setLoading(dataLoading) {
	            _this2.setState({ dataLoading: dataLoading });
	          };
	          setLoading(true);
	          callbackPromise.then(function () {
	            setLoading(false);
	          }, function () {
	            setLoading(false);
	          });
	        })();
	      }
	    }

	    // keyboard event support
	  }, {
	    key: 'onKeyDown',
	    value: function onKeyDown(e) {
	      e.preventDefault();
	    }
	  }, {
	    key: 'renderSwitcher',
	    value: function renderSwitcher(props, expandedState) {
	      var prefixCls = props.prefixCls;
	      var switcherCls = _defineProperty({}, prefixCls + '-switcher', true);
	      if (!props.showLine) {
	        switcherCls[prefixCls + '-noline_' + expandedState] = true;
	      } else if (props.pos === '0-0') {
	        switcherCls[prefixCls + '-roots_' + expandedState] = true;
	      } else {
	        switcherCls[prefixCls + '-center_' + expandedState] = !props.last;
	        switcherCls[prefixCls + '-bottom_' + expandedState] = props.last;
	      }
	      if (props.disabled) {
	        switcherCls[prefixCls + '-switcher-disabled'] = true;
	        return _react2['default'].createElement('span', { className: (0, _classnames2['default'])(switcherCls) });
	      }
	      return _react2['default'].createElement('span', { className: (0, _classnames2['default'])(switcherCls), onClick: this.onExpand });
	    }
	  }, {
	    key: 'renderCheckbox',
	    value: function renderCheckbox(props) {
	      var prefixCls = props.prefixCls;
	      var checkboxCls = _defineProperty({}, prefixCls + '-checkbox', true);
	      if (props.checkPart) {
	        checkboxCls[prefixCls + '-checkbox-indeterminate'] = true;
	      } else if (props.checked) {
	        checkboxCls[prefixCls + '-checkbox-checked'] = true;
	      }
	      var customEle = null;
	      if (typeof props.checkable !== 'boolean') {
	        customEle = props.checkable;
	      }
	      if (props.disabled || props.disableCheckbox) {
	        checkboxCls[prefixCls + '-checkbox-disabled'] = true;
	        return _react2['default'].createElement('span', { ref: 'checkbox', className: (0, _classnames2['default'])(checkboxCls) }, customEle);
	      }
	      return _react2['default'].createElement('span', { ref: 'checkbox', className: (0, _classnames2['default'])(checkboxCls), onClick: this.onCheck }, customEle);
	    }
	  }, {
	    key: 'renderChildren',
	    value: function renderChildren(props) {
	      var renderFirst = this.renderFirst;
	      this.renderFirst = 1;
	      var transitionAppear = true;
	      if (!renderFirst && props.expanded) {
	        transitionAppear = false;
	      }
	      var children = props.children;
	      var newChildren = children;
	      var allTreeNode = undefined;
	      if (Array.isArray(children)) {
	        allTreeNode = children.every(function (item) {
	          return item.type === TreeNode;
	        });
	      }
	      if (children && (children.type === TreeNode || allTreeNode)) {
	        var _cls;

	        var cls = (_cls = {}, _defineProperty(_cls, props.prefixCls + '-child-tree', true), _defineProperty(_cls, props.prefixCls + '-child-tree-open', props.expanded), _cls);
	        if (props.showLine) {
	          cls[props.prefixCls + '-line'] = !props.last;
	        }
	        var animProps = {};
	        if (props.openTransitionName) {
	          animProps.transitionName = props.openTransitionName;
	        } else if (_typeof(props.openAnimation) === 'object') {
	          animProps.animation = (0, _objectAssign2['default'])({}, props.openAnimation);
	          if (!transitionAppear) {
	            delete animProps.animation.appear;
	          }
	        }
	        newChildren = _react2['default'].createElement(_rcAnimate2['default'], _extends({}, animProps, {
	          showProp: 'expanded',
	          transitionAppear: transitionAppear,
	          component: '' }), _react2['default'].createElement('ul', { className: (0, _classnames2['default'])(cls), expanded: props.expanded }, _react2['default'].Children.map(children, function (item, index) {
	          return props.root.renderTreeNode(item, index, props.pos);
	        }, props.root)));
	      }
	      return newChildren;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _iconEleCls,
	          _this3 = this;

	      var props = this.props;
	      var prefixCls = props.prefixCls;
	      var expandedState = props.expanded ? 'open' : 'close';

	      var iconEleCls = (_iconEleCls = {}, _defineProperty(_iconEleCls, prefixCls + '-iconEle', true), _defineProperty(_iconEleCls, prefixCls + '-icon_loading', this.state.dataLoading), _defineProperty(_iconEleCls, prefixCls + '-icon__' + expandedState, true), _iconEleCls);

	      var canRenderSwitcher = true;
	      var content = props.title;
	      var newChildren = this.renderChildren(props);
	      if (!newChildren || newChildren === props.children) {
	        // content = newChildren;
	        newChildren = null;
	        if (!props.loadData || props.isLeaf) {
	          canRenderSwitcher = false;
	        }
	      }
	      // 如果默认不展开，不渲染进dom，在大量数据下，能使性能有很大提升！
	      if (!props.expanded) {
	        newChildren = null;
	      }

	      var selectHandle = function selectHandle() {
	        var icon = props.showIcon || props.loadData && _this3.state.dataLoading ? _react2['default'].createElement('span', { className: (0, _classnames2['default'])(iconEleCls) }) : null;
	        var title = _react2['default'].createElement('span', { className: prefixCls + '-title' }, content);
	        var domProps = {};
	        if (!props.disabled) {
	          if (props.selected || _this3.state.dragNodeHighlight) {
	            domProps.className = prefixCls + '-node-selected';
	          }
	          domProps.onClick = function (e) {
	            e.preventDefault();
	            if (props.selectable) {
	              _this3.onSelect();
	            }
	            // not fire check event
	            // if (props.checkable) {
	            //   this.onCheck();
	            // }
	          };
	          if (props.onRightClick) {
	            domProps.onContextMenu = _this3.onContextMenu;
	          }
	          if (props.onMouseEnter) {
	            domProps.onMouseEnter = _this3.onMouseEnter;
	          }
	          if (props.onMouseLeave) {
	            domProps.onMouseLeave = _this3.onMouseLeave;
	          }
	          if (props.draggable) {
	            if (ieOrEdge) {
	              // ie bug!
	              domProps.href = '#';
	            }
	            domProps.draggable = true;
	            domProps['aria-grabbed'] = true;
	            domProps.onDragStart = _this3.onDragStart;
	          }
	        }
	        return _react2['default'].createElement('a', _extends({ ref: 'selectHandle', title: typeof content === 'string' ? content : '' }, domProps), icon, title);
	      };

	      var liProps = {};
	      if (props.draggable) {
	        liProps.onDragEnter = this.onDragEnter;
	        liProps.onDragOver = this.onDragOver;
	        liProps.onDragLeave = this.onDragLeave;
	        liProps.onDrop = this.onDrop;
	      }

	      var disabledCls = '';
	      var dragOverCls = '';
	      if (props.disabled) {
	        disabledCls = prefixCls + '-treenode-disabled';
	      } else if (props.dragOver) {
	        dragOverCls = 'drag-over';
	      } else if (props.dragOverGapTop) {
	        dragOverCls = 'drag-over-gap-top';
	      } else if (props.dragOverGapBottom) {
	        dragOverCls = 'drag-over-gap-bottom';
	      }

	      var filterCls = props.filterTreeNode(this) ? 'filter-node' : '';

	      var noopSwitcher = function noopSwitcher() {
	        var _cls2;

	        var cls = (_cls2 = {}, _defineProperty(_cls2, prefixCls + '-switcher', true), _defineProperty(_cls2, prefixCls + '-switcher-noop', true), _cls2);
	        if (props.showLine) {
	          cls[prefixCls + '-center_docu'] = !props.last;
	          cls[prefixCls + '-bottom_docu'] = props.last;
	        } else {
	          cls[prefixCls + '-noline_docu'] = true;
	        }
	        return _react2['default'].createElement('span', { className: (0, _classnames2['default'])(cls) });
	      };

	      return _react2['default'].createElement('li', _extends({}, liProps, { ref: 'li', className: (0, _classnames2['default'])(props.className, disabledCls, dragOverCls, filterCls) }), canRenderSwitcher ? this.renderSwitcher(props, expandedState) : noopSwitcher(), props.checkable ? this.renderCheckbox(props) : null, selectHandle(), newChildren);
	    }
	  }]);

	  return TreeNode;
	}(_react2['default'].Component);

	TreeNode.isTreeNode = 1;

	TreeNode.propTypes = {
	  prefixCls: _react.PropTypes.string,
	  disabled: _react.PropTypes.bool,
	  disableCheckbox: _react.PropTypes.bool,
	  expanded: _react.PropTypes.bool,
	  isLeaf: _react.PropTypes.bool,
	  root: _react.PropTypes.object,
	  onSelect: _react.PropTypes.func
	};

	TreeNode.defaultProps = {
	  title: defaultTitle
	};

	exports['default'] = TreeNode;
	module.exports = exports['default'];

/***/ },
/* 708 */
[831, 709],
/* 709 */
[832, 710, 711, 716],
/* 710 */
77,
/* 711 */
[833, 712, 716],
/* 712 */
[834, 713, 714],
/* 713 */
80,
/* 714 */
[835, 715, 715],
/* 715 */
82,
/* 716 */
83,
/* 717 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(718);

/***/ },
/* 718 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var _require = __webpack_require__(719);

	var UploadCore = _require.UploadCore;
	var Events = _require.Events;
	var Status = _require.Status;

	var Progress = __webpack_require__(721);
	var util = __webpack_require__(722);
	var FileList = __webpack_require__(723);
	var Picker = __webpack_require__(727);
	var i18n = __webpack_require__(726);

	UploadCore.setSWF('https://alinw.alicdn.com/alinw/uxuploader/2.0.1/flashpicker.swf');

	var CORE_INSTANCE = {};
	function getCoreInstance(props, autoPending) {
	    var core = props.core;
	    if (core instanceof UploadCore) {
	        return core;
	    }

	    var id = core;
	    if (id && typeof id === 'string' && CORE_INSTANCE.hasOwnProperty(id)) {
	        return CORE_INSTANCE[id];
	    }

	    var options = props.options || {};
	    ['name', 'url', 'params', 'action', 'data', 'headers', 'withCredentials', 'timeout', 'chunkEnable', 'chunkSize', 'chunkRetries', 'chunkProcessThreads', 'processThreads', 'queueCapcity', 'autoPending', 'multiple', 'accept', 'sizeLimit', 'preventDuplicate', 'isOnlyImg'].forEach(function (key) {
	        if (props.hasOwnProperty(key)) {
	            options[key] = props[key];
	        }
	    });
	    if (autoPending != null) {
	        options.autoPending = autoPending;
	    }

	    core = new UploadCore(options);

	    for (var key in props) {
	        if (props.hasOwnProperty(key)) {
	            var m = /^on(\w+)$/i.exec(key);
	            if (!m) continue;
	            if (typeof props[key] === 'function') {
	                core.on(m[1], props[key]);
	            }
	        }
	    }

	    if (id) {
	        CORE_INSTANCE[id] = core;
	    }

	    return core;
	}

	var Uploader = function (_React$Component) {
	    _inherits(Uploader, _React$Component);

	    function Uploader(props) {
	        _classCallCheck(this, Uploader);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.core = getCoreInstance(props, true);

	        _this.state = {
	            total: _this.core.getTotal()
	        };

	        var statchange = function statchange(stat) {
	            var total = stat.getTotal();
	            if (total !== _this.state.total) {
	                _this.setState({ total: total });
	            }
	        };
	        _this.core.on(Events.QUEUE_STAT_CHANGE, statchange);
	        _this.stopListen = function () {
	            _this.core.off(Events.QUEUE_STAT_CHANGE, statchange);
	        };
	        return _this;
	    }

	    Uploader.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.stopListen && this.stopListen();
	    };

	    Uploader.prototype.reset = function reset() {
	        this.core.getFiles().forEach(function (file) {
	            file.cancel();
	        });
	    };

	    Uploader.prototype.render = function render() {
	        var me = this;
	        var _props = this.props;
	        var children = _props.children;
	        var locale = _props.locale;

	        if (!children || children.length < 1) {
	            children = React.createElement('button', { className: 'kuma-upload-button' }, React.createElement('i', { className: 'kuma-icon kuma-icon-uploading' }), i18n[locale]['upload_files']);
	        }
	        return React.createElement('div', { className: "kuma-uploader " + (this.props.className || '') }, React.createElement(Picker, { core: this.core }, children), this.props.tips, this.state.total > 0 ? React.createElement(FileList, { locale: this.props.locale, core: this.core, isOnlyImg: this.props.isOnlyImg, mode: 'nw' }) : null);
	    };

	    return Uploader;
	}(React.Component);

	var Dropzoom = function (_React$Component2) {
	    _inherits(Dropzoom, _React$Component2);

	    function Dropzoom(props) {
	        _classCallCheck(this, Dropzoom);

	        var _this2 = _possibleConstructorReturn(this, _React$Component2.call(this, props));

	        _this2.core = getCoreInstance(props);

	        _this2.state = {
	            blink: 0,
	            highlight: 0,
	            total: _this2.core.getTotal()
	        };

	        var statchange = function statchange(stat) {
	            var total = stat.getTotal();
	            if (total !== _this2.state.total) {
	                _this2.setState({ total: total });
	            }
	        };
	        _this2.core.on(Events.QUEUE_STAT_CHANGE, statchange);
	        _this2.stopListen = function () {
	            _this2.core.off(Events.QUEUE_STAT_CHANGE, statchange);
	        };
	        return _this2;
	    }

	    Dropzoom.prototype.reset = function reset() {
	        this.core.getFiles().forEach(function (file) {
	            file.cancel();
	        });
	    };

	    Dropzoom.prototype.componentDidMount = function componentDidMount() {
	        var _this3 = this;

	        var areaNode = ReactDOM.findDOMNode(this);

	        var dndArea = this.core.getDndCollector().addArea(areaNode);
	        dndArea.on('start', function () {
	            _this3.setState({ blink: 1 });
	        }).on('response', function (e) {
	            if (areaNode.contains(e.target)) {
	                _this3.setState({ highlight: 1 });
	            } else {
	                _this3.setState({ highlight: 0 });
	            }
	        }).on('end', function () {
	            _this3.setState({ blink: 0, highlight: 0 });
	        });
	        this.dndArea = dndArea;
	    };

	    Dropzoom.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.dndArea && this.dndArea.destroy();
	        this.stopListen && this.stopListen();
	    };

	    Dropzoom.prototype.render = function render() {
	        var className = "kuma-uploader kuma-upload-dropzoom";
	        if (this.props.className) {
	            className += ' ' + this.props.className;
	        }
	        if (this.state.blink) {
	            className += ' blink';
	        }
	        if (this.state.highlight) {
	            className += ' enter';
	        }
	        var children = this.props.children;
	        if (!children || children.length < 1) {
	            children = React.createElement('i', { className: 'kuma-icon kuma-icon-add' });
	        }
	        return React.createElement('div', { className: className }, this.state.total > 0 ? React.createElement(FileList, { locale: this.props.locale, core: this.core, mode: 'icon' }) : React.createElement(Picker, { core: this.core }, children), React.createElement('div', { className: 'kuma-upload-responser' }));
	    };

	    return Dropzoom;
	}(React.Component);

	Uploader.Dropzoom = Dropzoom;

	Uploader.Events = Events;
	Uploader.Status = Status;
	Uploader.setSWF = function (swf) {
	    UploadCore.setSWF(swf);
	};

	Uploader.displayName = "Uploader";

	Uploader.defaultProps = {
	    locale: 'zh-cn'
	};

	Uploader.propTypes = {
	    locale: React.PropTypes.string
	};

		module.exports = Uploader;

/***/ },
/* 719 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	!function (e, t) {
	  "object" == ( false ? "undefined" : _typeof(exports)) && "object" == ( false ? "undefined" : _typeof(module)) ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.UploadCore = t() : e.UploadCore = t();
	}(undefined, function () {
	  return function (e) {
	    function t(r) {
	      if (n[r]) return n[r].exports;var i = n[r] = { exports: {}, id: r, loaded: !1 };return e[r].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports;
	    }var n = {};return t.m = e, t.c = n, t.p = "", t(0);
	  }([function (e, t, n) {
	    "use strict";
	    var r = n(1),
	        i = n(4),
	        o = n(5),
	        s = o.Status;r.Events = i, r.Status = s, r.UploadCore = r, r.VERSION = "2.2.3", r.Core = r, e.exports = r;
	  }, function (e, t, n) {
	    "use strict";
	    function r(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }function i(e, t) {
	      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
	    }function o(e, t) {
	      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
	    }var s = function () {
	      function e(e, t) {
	        for (var n = 0; n < t.length; n++) {
	          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	        }
	      }return function (t, n, r) {
	        return n && e(t.prototype, n), r && e(t, r), t;
	      };
	    }(),
	        u = n(2),
	        a = n(4),
	        c = n(5),
	        l = c.Status,
	        f = n(6),
	        h = f.QueueLimitError,
	        p = f.FilterError,
	        v = f.DuplicateError,
	        d = f.FileExtensionError,
	        y = f.FileSizeError,
	        m = n(3),
	        g = m.formatSize,
	        k = m.parseSize,
	        b = m.normalizeAccept,
	        E = n(7),
	        w = n(8),
	        _ = n(13),
	        P = n(14),
	        O = ["name", "url", "params", "action", "data", "headers", "withCredentials", "timeout", "chunkEnable", "chunkSize", "chunkRetries", "chunkProcessThreads"],
	        R = function (e) {
	      function t() {
	        var e = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0];r(this, t);var n = i(this, Object.getPrototypeOf(t).call(this));n.autoPending = e.autoPending || e.auto, n.capcity = e.capcity || e.queueCapcity || 0, n.multiple = null == e.multiple ? !0 : e.multiple, n.accept = b(e.accept), n.sizeLimit = k(e.sizeLimit || e.fileSizeLimit || 0), n.pending = new A(e.processThreads), n.stat = new L(), n.constraints = new S(), n.filters = new T(), n.multiple || (n.capcity = 1), n.capcity > 0 && n.addConstraint(function () {
	          return n.stat.getTotal() >= n.capcity;
	        }), n.accept && n.accept.length > 0 && n.addFilter(function (e) {
	          return n.accept.some(function (t) {
	            return t.extensions && t.extensions.indexOf(e.ext) > -1;
	          }) ? void 0 : new d(e, 'extension "' + e.ext + '" is not allowed');
	        }), n.sizeLimit > 0 && n.addFilter(function (e) {
	          return e.size > n.sizeLimit ? new y(e, "filesize:" + g(e.size) + " is greater than limit:" + g(n.sizeLimit)) : void 0;
	        }), e.preventDuplicate && n.addFilter(function (e) {
	          return n.stat.getFiles().some(function (t) {
	            return t.name === e.name && t.size === e.size;
	          }) ? new v(e, 'file "' + e.name + '" already in queue') : void 0;
	        }), Array.isArray(e.filters) && e.fitlers.forEach(function (e) {
	          return n.addFilter(e);
	        });var o = e.request || {};return O.forEach(function (t) {
	          e.hasOwnProperty(t) && (o[t] = e[t]);
	        }), n.requestOptions = o, n;
	      }return o(t, e), s(t, [{ key: "createFileRequest", value: function value(e) {
	          return new E(e, this.requestOptions);
	        } }, { key: "isLimit", value: function value() {
	          return this.constraints.some();
	        } }, { key: "addConstraint", value: function value(e) {
	          return this.constraints.add(e);
	        } }, { key: "addFilter", value: function value(e) {
	          return this.filters.add(e);
	        } }, { key: "add", value: function value(e) {
	          var t = this;if (this.isLimit()) return this.emit(a.QUEUE_ERROR, new h()), -1;var n = this.filters.filter(e);return n || this.stat.add(e) || (n = new v(e, 'file "' + e.name + '" already in queue')), n ? (this.emit(a.QUEUE_FILE_FILTERED, e, n), this.emit(a.QUEUE_ERROR, n), 0) : (e.setStatus(l.QUEUED), e.on(a.FILE_STATUS_CHANGE, function (n) {
	            n === l.CANCELLED ? t.stat.remove(e) : n === l.PENDING && setTimeout(function () {
	              t.pending.add(e) && 1 === t.pending.size() && t.emit(a.QUEUE_UPLOAD_START);
	            }, 1), t.emit(a.QUEUE_STAT_CHANGE, t.stat), t.stat.getFiles(l.PROCESS).length < 1 && t.emit(a.QUEUE_UPLOAD_END);
	          }), e.setCore(this), this.emit(a.QUEUE_FILE_ADDED, e), this.emit(a.QUEUE_STAT_CHANGE, this.stat), this.autoPending && e.pending(), 1);
	        } }, { key: "isMultiple", value: function value() {
	          return this.multiple;
	        } }, { key: "isFull", value: function value() {
	          return this.capcity > 0 && this.getTotal() >= this.capcity;
	        } }, { key: "isEmpty", value: function value() {
	          return this.getTotal() < 1;
	        } }, { key: "getAccept", value: function value() {
	          return this.accept;
	        } }, { key: "getStat", value: function value() {
	          return this.stat;
	        } }, { key: "getTotal", value: function value() {
	          return this.getStat().getTotal();
	        } }, { key: "getFiles", value: function value(e) {
	          return this.getStat().getFiles(e);
	        } }, { key: "stat", value: function value(e) {
	          return this.getStat().stat(e);
	        } }, { key: "getPickerCollector", value: function value() {
	          return this.picker || (this.picker = new P(this)), this.picker;
	        } }, { key: "getDndCollector", value: function value() {
	          return this.dnd || (this.dnd = new w(this)), this.dnd;
	        } }, { key: "getPasteCollector", value: function value() {
	          return this.paster || (this.paster = new _(this)), this.paster;
	        } }], [{ key: "setSWF", value: function value(e) {
	          P.setSWF(e);
	        } }]), t;
	    }(u);e.exports = R;var C = function () {
	      function e() {
	        r(this, e), this._set = [];
	      }return s(e, [{ key: "size", value: function value() {
	          return this._set.length;
	        } }, { key: "shift", value: function value() {
	          return this._set.shift();
	        } }, { key: "pop", value: function value() {
	          return this._set.pop();
	        } }, { key: "toArray", value: function value() {
	          return this._set.slice(0);
	        } }, { key: "add", value: function value(e) {
	          return this.has(e) ? !1 : (this._set.push(e), !0);
	        } }, { key: "has", value: function value(e) {
	          return this._set.indexOf(e) > -1;
	        } }, { key: "remove", value: function value(e) {
	          var t = this._set.indexOf(e);return t > -1 ? (this._set.splice(t, 1), !0) : !1;
	        } }, { key: "clear", value: function value() {
	          this._set = [];
	        } }]), e;
	    }(),
	        L = function () {
	      function e() {
	        r(this, e), this.files = new C();
	      }return s(e, [{ key: "add", value: function value(e) {
	          return this.files.add(e);
	        } }, { key: "remove", value: function value(e) {
	          this.files.remove(e);
	        } }, { key: "getTotal", value: function value() {
	          return this.files.size();
	        } }, { key: "getFiles", value: function value(e) {
	          var t = this.files.toArray();return e ? t.filter(function (t) {
	            return !!(t.getStatus() & e);
	          }) : t;
	        } }, { key: "stat", value: function value(e) {
	          var t = {},
	              n = this.getFiles(e);return n.forEach(function (e) {
	            var n = e.getStatus();t[n] = n in t ? t[n] + 1 : 1;
	          }), t.sum = n.length, t;
	        } }]), e;
	    }(),
	        S = function () {
	      function e() {
	        r(this, e), this.constraints = new C();
	      }return s(e, [{ key: "add", value: function value(e) {
	          return this.constraints.add(e), this;
	        } }, { key: "remove", value: function value(e) {
	          return this.constraints.remove(e), this;
	        } }, { key: "some", value: function value() {
	          var e = this;return this.constraints.toArray().some(function (t) {
	            return t.call(e);
	          });
	        } }]), e;
	    }(),
	        T = function () {
	      function e() {
	        r(this, e), this.filters = new C();
	      }return s(e, [{ key: "add", value: function value(e) {
	          return this.filters.add(e), this;
	        } }, { key: "remove", value: function value(e) {
	          return this.filters.remove(e), this;
	        } }, { key: "filter", value: function value(e) {
	          var t = null;return this.filters.toArray().every(function (n) {
	            var r = void 0;try {
	              r = n(e);
	            } catch (i) {
	              r = i;
	            }return "string" == typeof r ? (t = new p(e, r), !1) : r instanceof Error ? (t = r instanceof p ? r : new p(e, r.toString()), !1) : !0;
	          }), t;
	        } }]), e;
	    }(),
	        A = function () {
	      function e(t) {
	        r(this, e), this.threads = t || 2, this.heading = new C(), this.pending = new C();
	      }return s(e, [{ key: "add", value: function value(e) {
	          var t = this;return this.pending.add(e) ? (e.session().always(function () {
	            return t.pending.remove(e);
	          }), this.load(), !0) : !1;
	        } }, { key: "size", value: function value() {
	          return this.pending.size() + this.heading.size();
	        } }, { key: "process", value: function value(e) {
	          var t = this;this.heading.add(e) && e.session().always(function () {
	            t.heading.remove(e), t.load();
	          });
	        } }, { key: "load", value: function value() {
	          for (var e; this.heading.size() < this.threads && (e = this.pending.shift());) {
	            e.prepare() && this.process(e);
	          }
	        } }]), e;
	    }();
	  }, function (e, t, n) {
	    "use strict";
	    function r(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }function i(e, t, n) {
	      var r = t,
	          i = null,
	          o = void 0,
	          s = u(),
	          a = s.promise();a.abort = function () {
	        o = !0;
	      };var c = function c(e) {
	        o || (e && (i = e instanceof Error ? e : new Error(e)), s.reject(i || new Error("Unknown")));
	      },
	          l = function l() {
	        o || (null != i ? c() : s.resolve(r));
	      },
	          f = function f(e) {
	        null == e || null != r && e.constructor !== r.constructor || (r = e);
	      },
	          h = function p(t) {
	        if (!o) {
	          if (t instanceof Error && (i = t), null != i) return c();f(t);var s = e.shift();if (!s) return l();var u = void 0;try {
	            u = s.call(n, r);
	          } catch (a) {
	            return c(a);
	          }u && u.then ? u.then(p, c) : p(u);
	        }
	      };return setTimeout(h, 1), a;
	    }var o = function () {
	      function e(e, t) {
	        for (var n = 0; n < t.length; n++) {
	          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	        }
	      }return function (t, n, r) {
	        return n && e(t.prototype, n), r && e(t, r), t;
	      };
	    }(),
	        s = n(3),
	        u = s.Deferred,
	        a = function () {
	      function e() {
	        r(this, e);
	      }return o(e, [{ key: "on", value: function value(e, t) {
	          return e = e.toLowerCase(), this._events || (this._events = {}), this._events[e] || (this._events[e] = []), this._events[e].push(t), this;
	        } }, { key: "once", value: function value(e, t) {
	          function n() {
	            r.off(e, n), t.apply(this, arguments);
	          }e = e.toLowerCase();var r = this;return n.listener = t, this.on(e, n), this;
	        } }, { key: "off", value: function value(e, t) {
	          e = e.toLowerCase();var n = void 0;if (!this._events || !(n = this._events[e])) return this;for (var r = n.length; r-- > 0;) {
	            if (n[r] === t || n[r].listener === t) {
	              n.splice(r, 1);break;
	            }
	          }return 0 === n.length && delete this._events[e], this;
	        } }, { key: "removeAllListeners", value: function value(e) {
	          return e ? delete this._events[e.toLowerCase()] : this._events = [], this;
	        } }, { key: "setPropagationTarget", value: function value(t) {
	          t instanceof e && (this.propagationTarget = t);
	        } }, { key: "emit", value: function value(e) {
	          for (var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), r = 1; t > r; r++) {
	            n[r - 1] = arguments[r];
	          }this.applyEmit(e, n);
	        } }, { key: "applyEmit", value: function value(e, t) {
	          var n = this;e = e.toLowerCase();var r = void 0;if (this._events && (r = this._events[e]) && r.slice(0).forEach(function (e) {
	            return e.apply(n, t);
	          }), this.propagationTarget) {
	            var i = t.slice(0);i.unshift(this), this.propagationTarget.applyEmit(e, i);
	          }return this;
	        } }, { key: "invoke", value: function value(e, t) {
	          e = e.toLowerCase();var n = void 0;return this._events && (n = this._events[e]) || (n = []), i(n.slice(0), t, this);
	        } }]), e;
	    }();e.exports = a;
	  }, function (e, t) {
	    "use strict";
	    function n(e) {
	      return "string" != typeof e ? "" : e.toLowerCase().split(/ *[ ,;|+] */).map(function (e) {
	        var t = /^\*?\.?(\w+)$/.exec(e);return t ? t[1] : null;
	      }).filter(function (e) {
	        return null !== e;
	      });
	    }function r(e) {
	      return e ? (Array.isArray(e) || (e = [e]), e.map(function (e) {
	        if ("string" == typeof e && (e = e.toLowerCase()) && c.hasOwnProperty(e)) return c[e];var t = n(e.extensions || e);return t.length ? { title: e.title || "", extensions: t, mimeTypes: e.mimeTypes || "" } : null;
	      }).filter(function (e) {
	        return null !== e;
	      })) : null;
	    }function i(e) {
	      var t = {};return (e.match(/\S+/g) || []).forEach(function (e) {
	        t[e] = !0;
	      }), t;
	    }function o(e, t) {
	      for (var n in t) {
	        e[n] = t[n];
	      }return e;
	    }function s(e) {
	      return "function" == typeof e;
	    }function u(e) {
	      e = "string" == typeof e ? i(e) : o({}, e);var t = void 0,
	          n = void 0,
	          r = void 0,
	          u = void 0,
	          a = void 0,
	          c = void 0,
	          f = [],
	          h = void 0,
	          p = !e.once && [],
	          v = function d(i) {
	        for (n = e.memory && i, r = !0, a = c || 0, c = 0, u = f.length, t = !0; f && u > a; a++) {
	          if (f[a].apply(i[0], i[1]) === !1 && e.stopOnFalse) {
	            n = !1;break;
	          }
	        }t = !1, f && (p ? p.length && d(p.shift()) : n ? f = [] : h.disable());
	      };return h = { add: function add() {
	          if (f) {
	            var r = f.length;!function i(t) {
	              t.forEach(function (t) {
	                s(t) ? e.unique && h.has(t) || f.push(t) : Array.isArray(t) && i(t);
	              });
	            }(l(arguments)), t ? u = f.length : n && (c = r, v(n));
	          }return this;
	        }, remove: function remove() {
	          return f && l(arguments).forEach(function (e) {
	            for (var n = f.length; --n >= 0;) {
	              f[n] === e && (f.splice(n, 1), t && (u >= n && u--, a >= n && a--));
	            }
	          }), this;
	        }, has: function has(e) {
	          return e ? f.indexOf(e) > -1 : !(!f || !f.length);
	        }, empty: function empty() {
	          return f = [], u = 0, this;
	        }, disable: function disable() {
	          return f = p = n = null, this;
	        }, disabled: function disabled() {
	          return !f;
	        }, lock: function lock() {
	          return p = null, n || h.disable(), this;
	        }, locked: function locked() {
	          return !p;
	        }, fireWith: function fireWith(e, n) {
	          return !f || r && !p || (n = n || [], n = [e, n.slice ? n.slice() : n], t ? p.push(n) : v(n)), this;
	        }, fire: function fire() {
	          return h.fireWith(this, arguments), this;
	        }, fired: function fired() {
	          return !!r;
	        } };
	    }function a(e) {
	      var t = [["resolve", "done", u("once memory"), "resolved"], ["reject", "fail", u("once memory"), "rejected"], ["notify", "progress", u("memory")]],
	          n = "pending",
	          r = { state: function state() {
	          return n;
	        }, always: function always() {
	          var e = l(arguments);return i.done(e).fail(e), this;
	        }, then: function then() {
	          var e = arguments;return a(function (n) {
	            t.forEach(function (t, o) {
	              var u = s(e[o]) && e[o];i[t[1]](function () {
	                var e = u && u.apply(this, arguments);e && s(e.promise) ? e.promise().done(n.resolve).fail(n.reject).progress(n.notify) : n[t[0] + "With"](this === r ? n.promise() : this, u ? [e] : arguments);
	              });
	            }), e = null;
	          }).promise();
	        }, promise: function promise(e) {
	          return null != e ? o(e, r) : r;
	        } },
	          i = {};return r.pipe = r.then, t.forEach(function (e, o) {
	        var s = e[2],
	            u = e[3];r[e[1]] = s.add, u && s.add(function () {
	          n = u;
	        }, t[1 ^ o][2].disable, t[2][2].lock), i[e[0]] = function () {
	          return i[e[0] + "With"](this === i ? r : this, arguments), this;
	        }, i[e[0] + "With"] = s.fireWith;
	      }), r.promise(i), e && e.call(i, i), i;
	    }t.formatSize = function (e) {
	      e = parseFloat(e);var t = ["", "K", "M", "G", "T", "P", "E", "Z", "Y"],
	          n = 1024,
	          r = e ? Math.floor(Math.log(e) / Math.log(n)) : 0;r = Math.min(r, t.length - 1);var i = Math.pow(10, 2 > r ? 0 : r > 2 ? 2 : 1);return e /= Math.pow(n, r), e = Math.round(e * i) / i, e + t[r] + "B";
	    }, t.parseSize = function (e) {
	      if ("string" != typeof e) return e;var t = { t: 1099511627776, g: 1073741824, m: 1048576, k: 1024 };e = /^([0-9\.]+)([tgmk]?)b?$/i.exec(e);var n = e[2];return e = +e[1], t.hasOwnProperty(n) && (e *= t[n]), e;
	    };var c = { images: { title: "Images", extensions: ["jpg", "jpeg", "gif", "png", "bmp", "svg", "tiff", "tif", "ico", "jpe", "svgz", "pct", "psp", "ai", "psd", "raw", "webp"] }, audios: { title: "Audios", extensions: ["aac", "aif", "flac", "iff", "m4a", "m4b", "mid", "midi", "mp3", "mpa", "mpc", "oga", "ogg", "ra", "ram", "snd", "wav", "wma"] }, videos: { title: "Videos", extensions: ["avi", "divx", "flv", "m4v", "mkv", "mov", "mp4", "mpeg", "mpg", "ogm", "ogv", "ogx", "rm", "rmvb", "smil", "webm", "wmv", "xvid"] } };t.normalizeAccept = r, t.extend = o;var l = Array.from || function (e) {
	      return [].slice.call(e);
	    };t.Deferred = a;
	  }, function (e, t) {
	    "use strict";
	    e.exports = { QUEUE_UPLOAD_START: "queueuploadstart", QUEUE_UPLOAD_END: "queueuploadend", QUEUE_FILE_ADDED: "queuefileadded", QUEUE_FILE_FILTERED: "queuefilefiltered", QUEUE_ERROR: "queueerror", QUEUE_STAT_CHANGE: "statchange", FILE_UPLOAD_START: "fileuploadstart", FILE_UPLOAD_PREPARING: "fileuploadpreparing", FILE_UPLOAD_PREPARED: "fileuploadprepared", CHUNK_UPLOAD_PREPARING: "chunkuploadpreparing", CHUNK_UPLOAD_COMPLETING: "chunkuploadcompleting", FILE_UPLOAD_PROGRESS: "fileuploadprogress", FILE_UPLOAD_END: "fileuploadend", FILE_UPLOAD_COMPLETING: "fileuploadcompleting", FILE_UPLOAD_SUCCESS: "fileuploadsuccess", FILE_UPLOAD_ERROR: "fileuploaderror", FILE_UPLOAD_COMPLETED: "fileuploadcompleted", FILE_CANCEL: "filecancel", FILE_STATUS_CHANGE: "filestatuschange" };
	  }, function (e, t) {
	    "use strict";
	    t.Status = { ALL: 255, PROCESS: 31, INITED: 1, QUEUED: 2, PENDING: 4, PROGRESS: 8, END: 16, SUCCESS: 32, ERROR: 64, CANCELLED: 128 }, t.StatusName = { 1: "inited", 2: "queued", 4: "pending", 8: "progress", 16: "end", 32: "success", 64: "error", 128: "cancelled" };
	  }, function (e, t) {
	    "use strict";
	    function n(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }function r(e, t) {
	      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
	    }function i(e, t) {
	      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
	    }var o = function (e) {
	      function t(e) {
	        n(this, t);var i = r(this, Object.getPrototypeOf(t).call(this, e));return i.message = e, i;
	      }return i(t, e), t;
	    }(Error),
	        s = function (e) {
	      function t(e) {
	        n(this, t);var i = r(this, Object.getPrototypeOf(t).call(this, e));return i.name = "AbortError", i;
	      }return i(t, e), t;
	    }(o),
	        u = function (e) {
	      function t(e) {
	        n(this, t);var i = r(this, Object.getPrototypeOf(t).call(this, e));return i.name = "TimeoutError", i;
	      }return i(t, e), t;
	    }(o),
	        a = function (e) {
	      function t(e, i) {
	        n(this, t);var o = r(this, Object.getPrototypeOf(t).call(this, i));return o.name = "NetworkError", o.status = e, o;
	      }return i(t, e), t;
	    }(o),
	        c = function (e) {
	      function t() {
	        n(this, t);var e = r(this, Object.getPrototypeOf(t).call(this, "queue limit"));return e.name = "QueueLimitError", e;
	      }return i(t, e), t;
	    }(o),
	        l = function (e) {
	      function t(e, i) {
	        n(this, t);var o = r(this, Object.getPrototypeOf(t).call(this, i));return o.name = "FilterError", o.file = e, o;
	      }return i(t, e), t;
	    }(o),
	        f = function (e) {
	      function t(e, i) {
	        n(this, t);var o = r(this, Object.getPrototypeOf(t).call(this, e, i));return o.name = "DuplicateError", o;
	      }return i(t, e), t;
	    }(l),
	        h = function (e) {
	      function t(e, i) {
	        n(this, t);var o = r(this, Object.getPrototypeOf(t).call(this, e, i));return o.name = "FileExtensionError", o;
	      }return i(t, e), t;
	    }(l),
	        p = function (e) {
	      function t(e, i) {
	        n(this, t);var o = r(this, Object.getPrototypeOf(t).call(this, e, i));return o.name = "FileSizeError", o;
	      }return i(t, e), t;
	    }(l);e.exports = { AbortError: s, TimeoutError: u, NetworkError: a, QueueLimitError: c, FilterError: l, DuplicateError: f, FileExtensionError: h, FileSizeError: p };
	  }, function (e, t, n) {
	    "use strict";
	    function r(e) {
	      return e && "undefined" != typeof Symbol && e.constructor === Symbol ? "symbol" : typeof e === "undefined" ? "undefined" : _typeof(e);
	    }function i(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }var o = function () {
	      function e(e, t) {
	        for (var n = 0; n < t.length; n++) {
	          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	        }
	      }return function (t, n, r) {
	        return n && e(t.prototype, n), r && e(t, r), t;
	      };
	    }(),
	        s = n(3),
	        u = s.parseSize,
	        a = function () {
	      function e(t, n) {
	        i(this, e), this.rawResponse = t, this.chunkRequest = n;
	      }return o(e, [{ key: "getChunkRequest", value: function value() {
	          return this.chunkRequest;
	        } }, { key: "getRawResponse", value: function value() {
	          return this.rawResponse;
	        } }, { key: "getResponse", value: function value() {
	          return this.response || this.rawResponse;
	        } }, { key: "getJson", value: function value() {
	          var e = this.getResponse();return null == e ? null : "function" == typeof e.getJson ? e.getJson() : "string" == typeof e ? "" === e ? null : JSON.parse(e) : e;
	        } }, { key: "setResponse", value: function value(e) {
	          return this.response = e, this;
	        } }]), e;
	    }(),
	        c = function () {
	      function e(t, n, r) {
	        i(this, e), this.index = t, this.blob = n, this.fileRequest = r;
	      }return o(e, [{ key: "getName", value: function value() {
	          return this.fileRequest.getName();
	        } }, { key: "getFile", value: function value() {
	          return this.fileRequest.getFile();
	        } }, { key: "getBlob", value: function value() {
	          return this.blob;
	        } }, { key: "getIndex", value: function value() {
	          return this.index;
	        } }, { key: "isMultiChunk", value: function value() {
	          return this.getFile().source !== this.blob;
	        } }, { key: "getParams", value: function value() {
	          return this.params || (this.params = this.fileRequest.getParams().clone()), this.params;
	        } }, { key: "getParam", value: function value(e) {
	          return this.getParams().getParam(e);
	        } }, { key: "setParam", value: function value(e, t) {
	          return this.getParams().setParam(e, t), this;
	        } }, { key: "getFileRequest", value: function value() {
	          return this.fileRequest;
	        } }, { key: "getUrl", value: function value() {
	          return this.url || this.fileRequest.getUrl();
	        } }, { key: "setUrl", value: function value(e) {
	          return this.url = e, this;
	        } }, { key: "getHeaders", value: function value() {
	          return this.headers || (this.headers = this.fileRequest.getHeaders().slice(0)), this.headers;
	        } }, { key: "setHeader", value: function value(e, t) {
	          var n = this.getHeaders();return n.push({ name: e, value: t }), this;
	        } }, { key: "isWithCredentials", value: function value() {
	          return this.fileRequest.isWithCredentials();
	        } }, { key: "getTimeout", value: function value() {
	          return this.fileRequest.getTimeout();
	        } }, { key: "createChunkResponse", value: function value(e) {
	          return new a(e, this);
	        } }]), e;
	    }(),
	        l = function () {
	      function e(t, n) {
	        i(this, e), this.rawResponse = t, this.fileRequest = n;
	      }return o(e, [{ key: "isFromMultiChunkResponse", value: function value() {
	          return this.rawResponse instanceof a ? this.rawResponse.getChunkRequest().isMultiChunk() : !1;
	        } }, { key: "getFileRequest", value: function value() {
	          return this.fileRequest;
	        } }, { key: "getRawResponse", value: function value() {
	          return this.rawResponse;
	        } }, { key: "getResponse", value: function value() {
	          return null != this.response ? this.response : this.rawResponse instanceof a ? this.rawResponse.getResponse() : this.rawResponse;
	        } }, { key: "getJson", value: function value() {
	          var e = this.getResponse();return null == e ? null : "function" == typeof e.getJson ? e.getJson() : "string" == typeof e ? "" === e ? null : JSON.parse(e) : e;
	        } }, { key: "setResponse", value: function value(e) {
	          return this.response = e, this;
	        } }]), e;
	    }(),
	        f = function () {
	      function e(t) {
	        if (i(this, e), Array.isArray(t)) this.params = t.slice(0);else if ("object" === ("undefined" == typeof t ? "undefined" : r(t))) {
	          this.params = [];for (var n in t) {
	            t.hasOwnProperty(n) && this.params.push({ name: n, value: t[n] });
	          }
	        } else this.params = [];
	      }return o(e, [{ key: "setParam", value: function value(e, t) {
	          this.removeParam(e), this.addParam(e, t);
	        } }, { key: "addParam", value: function value(e, t) {
	          this.params.push({ name: e, value: t });
	        } }, { key: "removeParam", value: function value(e) {
	          this.params = this.params.filter(function (t) {
	            return t.name !== e;
	          });
	        } }, { key: "getParam", value: function value(e, t) {
	          var n = this.params.filter(function (t) {
	            return t.name === e;
	          }).map(function (e) {
	            return e.value;
	          });return t ? n.shift() : n;
	        } }, { key: "clone", value: function value() {
	          return new e(this.params);
	        } }, { key: "toArray", value: function value() {
	          return this.params;
	        } }, { key: "toString", value: function value() {
	          var e = this.params.map(function (e) {
	            return encodeURIComponent(e.name) + "=" + (null == e.value ? "" : encodeURIComponent(e.value));
	          });return e.join("&");
	        } }]), e;
	    }(),
	        h = 262144,
	        p = function () {
	      function e(t) {
	        var n = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1];i(this, e), this.file = t, this.name = n.name || "file", this.url = n.url || n.action, this.params = new f(n.params || n.data), this.headers = n.headers || [], this.withCredentials = n.withCredentials, this.timeout = n.timeout || 0, this.chunkSize = n.chunkSize || 0, this.chunkRetries = n.chunkRetries || 0, this.chunkEnable = n.chunkEnable || !1, this.chunkProcessThreads = n.chunkProcessThreads || 2;
	      }return o(e, [{ key: "getFile", value: function value() {
	          return this.file;
	        } }, { key: "getUrl", value: function value() {
	          return this.url || "";
	        } }, { key: "getName", value: function value() {
	          return this.name;
	        } }, { key: "setName", value: function value(e) {
	          return this.name = e, this;
	        } }, { key: "setUrl", value: function value(e) {
	          return this.url = e, this;
	        } }, { key: "getParams", value: function value() {
	          return this.params;
	        } }, { key: "getParam", value: function value(e) {
	          return this.getParams().getParam(e);
	        } }, { key: "setParam", value: function value(e, t) {
	          return this.params.setParam(e, t), this;
	        } }, { key: "getHeaders", value: function value() {
	          return this.headers;
	        } }, { key: "setHeader", value: function value(e, t) {
	          this.headers.push({ name: e, value: t });
	        } }, { key: "isWithCredentials", value: function value() {
	          return this.withCredentials;
	        } }, { key: "setWithCredentials", value: function value(e) {
	          return this.withCredentials = e, this;
	        } }, { key: "getTimeout", value: function value() {
	          return this.timeout;
	        } }, { key: "setTimeout", value: function value(e) {
	          return this.timeout = e, this;
	        } }, { key: "getChunkSize", value: function value() {
	          return u(this.chunkSize);
	        } }, { key: "setChunkSize", value: function value(e) {
	          return this.chunkSize = e, this;
	        } }, { key: "getChunkRetries", value: function value() {
	          return this.chunkRetries;
	        } }, { key: "setChunkRetries", value: function value(e) {
	          return this.chunkRetries = e, 0;
	        } }, { key: "isChunkEnable", value: function value() {
	          var e = this.getChunkSize();return this.chunkEnable && e > h && this.file.getRuntime().canSlice() && this.file.size > e;
	        } }, { key: "setChunkEnable", value: function value(e) {
	          return this.chunkEnable = e, this;
	        } }, { key: "getChunkProcessThreads", value: function value() {
	          return this.chunkProcessThreads;
	        } }, { key: "setChunkProcessThreads", value: function value(e) {
	          return this.chunkProcessThreads = e, this;
	        } }, { key: "createChunkRequest", value: function value(e, t) {
	          return new c(e, t, this);
	        } }, { key: "createFileResponse", value: function value(e) {
	          return new l(e, this);
	        } }]), e;
	    }();e.exports = p;
	  }, function (e, t, n) {
	    "use strict";
	    function r(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }function i(e, t) {
	      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
	    }function o(e, t) {
	      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
	    }function s(e) {
	      return function (t, n) {
	        function r(t) {
	          return --a < 0 || !e(t, n) ? (c = !0, !1) : !0;
	        }function i(e) {
	          c || (e.isFile ? e.file(function (e) {
	            c || r(e);
	          }) : e.isDirectory && e.createReader().readEntries(function (e) {
	            if (!c) for (var t = 0, n = e.length; n > t && !c; t++) {
	              i(e[t]);
	            }
	          }));
	        }for (var o = t.items, s = t.files, u = void 0, a = h, c = !1, l = 0, f = s.length; f > l && !c; l++) {
	          u = o && o[l];var p = u && u.webkitGetAsEntry && u.webkitGetAsEntry();if (p && p.isDirectory) i(p);else if (!r(s[l])) break;
	        }
	      };
	    }function u() {
	      if ("DataTransfer" in window && "FileList" in window && document.addEventListener) {
	        var e = l.getInstance(),
	            t = 0,
	            n = 0,
	            r = void 0,
	            i = s(function (t, n) {
	          if (!n || n.length < 1) return !1;t = new f(e, t);var r = n.length;return n.some(function (e) {
	            var n = e.recieve(t);return n > 0 ? !0 : (0 > n && (r -= 1), !1);
	          }) || r > 0;
	        }),
	            o = function o(e) {
	          t = 1, v.forEach(function (t) {
	            return t.start(e);
	          });
	        },
	            u = function u(e) {
	          var t = v.filter(function (t) {
	            return t.response(e);
	          }).length > 0,
	              n = e.dataTransfer;n && (n.dropEffect = t ? "copy" : "none"), e.preventDefault();
	        },
	            a = function a(e) {
	          t = 0, n = 0, v.forEach(function (t) {
	            return t.end(e);
	          });
	        },
	            c = function c(e) {
	          clearTimeout(r);var n = "dragleave" === e.type;n || t || o(e), u(e), n && (r = setTimeout(function () {
	            return a(e);
	          }, 100));
	        },
	            h = function h(e) {
	          e.preventDefault(), clearTimeout(r), a(e);var t = v.filter(function (t) {
	            return t.contains(e.target);
	          });if (!(t.length < 1)) {
	            var n = e.dataTransfer;try {
	              if (n.getData("text/html")) return;
	            } catch (o) {}i(n, t);
	          }
	        };document.addEventListener("dragenter", c, !1), document.addEventListener("dragover", c, !1), document.addEventListener("dragleave", c, !1), document.addEventListener("drop", h, !1);
	      }
	    }var a = function () {
	      function e(e, t) {
	        for (var n = 0; n < t.length; n++) {
	          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	        }
	      }return function (t, n, r) {
	        return n && e(t.prototype, n), r && e(t, r), t;
	      };
	    }(),
	        c = n(2),
	        l = n(9),
	        f = n(12),
	        h = 100,
	        p = function (e) {
	      function t(e) {
	        r(this, t);var n = i(this, Object.getPrototypeOf(t).call(this));return n.areaElement = e, n;
	      }return o(t, e), a(t, [{ key: "contains", value: function value(e) {
	          return this.areaElement.contains(e);
	        } }, { key: "start", value: function value(e, t) {
	          this.emit("start", e, t);
	        } }, { key: "response", value: function value(e, t) {
	          return t = t && this.contains(e.target), this.emit("response", e, t), t;
	        } }, { key: "end", value: function value(e) {
	          this.emit("end", e);
	        } }]), t;
	    }(c),
	        v = [],
	        d = function () {
	      function e(t) {
	        r(this, e), v.length < 1 && u(), v.push(this), this.core = t, this.areas = [];
	      }return a(e, [{ key: "addArea", value: function value(e) {
	          var t = this;return e = new p(e), this.areas.push(e), e.destroy = function () {
	            e.removeAllListeners();var n = t.areas.indexOf(e);n > -1 && t.areas.splice(n, 1);
	          }, e;
	        } }, { key: "contains", value: function value(e) {
	          return this.areas.some(function (t) {
	            return t.contains(e);
	          });
	        } }, { key: "start", value: function value(e) {
	          this.areas.forEach(function (t) {
	            return t.start(e);
	          });
	        } }, { key: "response", value: function value(e) {
	          return this.areas.map(function (t) {
	            return t.response(e);
	          }).some(function (e) {
	            return e !== !1;
	          });
	        } }, { key: "recieve", value: function value(e) {
	          var t = this.core.add(e);return t > 0 && !this.core.isMultiple() ? -1 : t;
	        } }, { key: "end", value: function value(e) {
	          this.areas.forEach(function (t) {
	            return t.end(e);
	          });
	        } }]), e;
	    }();e.exports = d;
	  }, function (e, t, n) {
	    "use strict";
	    function r(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }function i(e, t) {
	      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
	    }function o(e, t) {
	      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
	    }var s = function () {
	      function e(e, t) {
	        for (var n = 0; n < t.length; n++) {
	          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	        }
	      }return function (t, n, r) {
	        return n && e(t.prototype, n), r && e(t, r), t;
	      };
	    }(),
	        u = n(10),
	        a = n(3),
	        c = a.Deferred,
	        l = n(11),
	        f = void 0,
	        h = function (e) {
	      function t() {
	        return r(this, t), i(this, Object.getPrototypeOf(t).apply(this, arguments));
	      }return o(t, e), s(t, [{ key: "getAsDataUrl", value: function value(e, t) {
	          var n = c(),
	              r = new FileReader(),
	              i = void 0;r.onloadend = function () {
	            r.readyState == FileReader.DONE ? n.resolve(r.result) : n.reject(), clearTimeout(i), r.onloadend = null;
	          }, r.readAsDataURL(e);var o = function o() {
	            r && r.abort(), r = null;
	          };t && (i = setTimeout(o, t));var s = n.promise();return s.abort = o, s;
	        } }, { key: "getTransport", value: function value() {
	          return this.transport || (this.transport = new l(this)), this.transport;
	        } }, { key: "canSlice", value: function value() {
	          return !!(Blob.prototype.slice || Blob.prototype.mozSlice || Blob.prototype.webkitSlice);
	        } }, { key: "slice", value: function value(e, t, n) {
	          var r = e.slice || e.mozSlice || e.webkitSlice;return r.call(e, t, n);
	        } }, { key: "md5", value: function value(e) {
	          var t = c();if (!window.SparkMD5) return t.reject(), t.promise();var n = 2097152,
	              r = Math.ceil(e.size / n),
	              i = 0,
	              o = new SparkMD5.ArrayBuffer(),
	              s = e.mozSlice || e.webkitSlice || e.slice,
	              u = new FileReader(),
	              _a = function a() {
	            if (u) {
	              var c = void 0,
	                  l = void 0;c = i * n, l = Math.min(c + n, e.size), u.onload = function () {
	                o && o.append(u.result);
	              }, u.onloadend = function () {
	                u && (u.readyState == FileReader.DONE ? ++i < r ? setTimeout(_a, 1) : setTimeout(function () {
	                  o && t.resolve(o.end()), _a = e = o = null;
	                }, 50) : t.reject(), u.onloadend = u.onload = null);
	              }, u.readAsArrayBuffer(s.call(e, c, l));
	            }
	          };_a();var l = t.promise();return l.abort = function () {
	            u && u.abort(), o = null, u = null;
	          }, l;
	        } }], [{ key: "getInstance", value: function value() {
	          return f || (f = new t()), f;
	        } }]), t;
	    }(u);e.exports = h;
	  }, function (e, t, n) {
	    "use strict";
	    function r(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }function i(e, t) {
	      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
	    }function o(e, t) {
	      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
	    }var s = function () {
	      function e(e, t) {
	        for (var n = 0; n < t.length; n++) {
	          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	        }
	      }return function (t, n, r) {
	        return n && e(t.prototype, n), r && e(t, r), t;
	      };
	    }(),
	        u = n(2),
	        a = n(4),
	        c = n(3),
	        l = c.Deferred,
	        f = n(6),
	        h = f.NetworkError,
	        p = function (e) {
	      function t() {
	        return r(this, t), i(this, Object.getPrototypeOf(t).apply(this, arguments));
	      }return o(t, e), s(t, [{ key: "md5", value: function value(e) {
	          var t = l();return t.reject(), t.promise();
	        } }, { key: "getAsDataUrl", value: function value(e, t) {
	          var n = l();return n.reject(), n.promise();
	        } }, { key: "getTransport", value: function value() {
	          return null;
	        } }, { key: "getUploading", value: function value() {
	          return this.uploading || (this.uploading = new v(this)), this.uploading;
	        } }, { key: "canSlice", value: function value() {
	          return !1;
	        } }, { key: "slice", value: function value(e) {
	          throw new Error("this runtime current not support slice");
	        } }, { key: "cancel", value: function value(e) {} }]), t;
	    }(u);e.exports = p;var v = function () {
	      function e(t) {
	        r(this, e), this.runtime = t;
	      }return s(e, [{ key: "generate", value: function value(e) {
	          var t = this,
	              n = l(),
	              r = e.getFile(),
	              i = this.runtime,
	              o = r.getSource(),
	              s = r.size,
	              u = e.getChunkSize(),
	              a = e.isChunkEnable(),
	              c = Math.max(e.getChunkProcessThreads(), 1),
	              f = 0,
	              h = 0,
	              p = [],
	              v = function v() {
	            return p.reduce(function (e, t) {
	              return e + ("pending" === t.state() ? 1 : 0);
	            }, 0);
	          },
	              d = function d() {
	            for (var n = void 0, r = void 0, a = void 0; s > h && v() < c;) {
	              f = h, h = Math.min(h + u, s), a = i.slice(o, f, h), r = e.createChunkRequest(p.length, a), r.setHeader("Content-Range", "bytes " + f + "-" + (h - 1) + "/" + s), n = t.slot(r, e.getChunkRetries()), n.progress(y).done(m).fail(k), p.push(n);
	            }
	          },
	              y = function y() {
	            var e = s - h,
	                t = 0;p.forEach(function (n) {
	              e += n.total, t += n.loaded;
	            }), n.notify({ total: e, loaded: t });
	          },
	              m = function m(e) {
	            a && d(), h >= s && p.every(function (e) {
	              return "resolved" === e.state();
	            }) && n.resolve(e);
	          },
	              g = function g() {
	            p.forEach(function (e) {
	              return e.abort();
	            });
	          },
	              k = function k(e) {
	            n.reject(e), g();
	          };if (a) d();else {
	            h = s;var b = this.slot(e.createChunkRequest(0, o), 0);b.progress(y).done(m).fail(k), p.push(b);
	          }var E = n.promise();return E.abort = g, E;
	        } }, { key: "slot", value: function value(e, t) {
	          var n = l(),
	              r = this.runtime,
	              i = e.getFile().getCore(),
	              o = n.promise(),
	              s = function s(e) {
	            e.total && (o.total = e.total), e.loaded && (o.loaded = e.loaded), n.notify(e);
	          },
	              u = function u() {
	            var t, u, l;o.abort = function () {
	              t && t.abort(), u && u.abort(), l && l.abort();
	            }, o.total = e.getBlob().size, o.loaded = 0, t = i.invoke(a.CHUNK_UPLOAD_PREPARING, e), t.then(function (e) {
	              return u = r.getTransport().generate(e), u.progress(s), u;
	            }).then(function (t) {
	              return l = i.invoke(a.CHUNK_UPLOAD_COMPLETING, e.createChunkResponse(t));
	            }).done(n.resolve).fail(c);
	          },
	              c = function c(e) {
	            e instanceof h && t-- > 0 ? setTimeout(u, 500) : n.reject(e), o.abort();
	          };return u(), o;
	        } }]), e;
	    }();
	  }, function (e, t, n) {
	    "use strict";
	    function r(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }var i = function () {
	      function e(e, t) {
	        for (var n = 0; n < t.length; n++) {
	          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	        }
	      }return function (t, n, r) {
	        return n && e(t.prototype, n), r && e(t, r), t;
	      };
	    }(),
	        o = n(3),
	        s = o.Deferred,
	        u = n(6),
	        a = u.TimeoutError,
	        c = u.AbortError,
	        l = u.NetworkError,
	        f = function () {
	      function e() {
	        r(this, e);
	      }return i(e, [{ key: "generate", value: function value(e) {
	          var t = s(),
	              n = new XMLHttpRequest(),
	              r = void 0,
	              i = function i() {
	            n.onload = n.onerror = null, n.upload && (n.upload.onprogress = null), r && clearTimeout(r);
	          },
	              o = function o() {
	            i();try {
	              n.abort();
	            } catch (e) {}
	          },
	              u = function u(e) {
	            return i(), n.status || "error" !== e.type ? 0 === n.status || 304 === n.status || n.status >= 200 && n.status < 300 ? t.resolve(n.responseText) : t.reject(new l(n.status, n.statusText)) : t.reject(new c(e.message));
	          };n.upload && (n.upload.onprogress = function (e) {
	            return t.notify(e);
	          }), n.onerror = u, n.onload = u;var f = e.getTimeout();f > 0 && (r = setTimeout(function () {
	            o(), t.reject(new a("timeout:" + f));
	          }, f));try {
	            !function () {
	              n.open("POST", e.getUrl(), !0), e.isWithCredentials() && (n.withCredentials = !0), e.getHeaders().forEach(function (e) {
	                return n.setRequestHeader(e.name, e.value);
	              });var t = new FormData(),
	                  r = e.getBlob();e.getParams().toArray().forEach(function (e) {
	                return t.append(e.name, e.value);
	              }), t.append(e.getName(), r, r.name || "blob"), n.send(t);
	            }();
	          } catch (h) {
	            o(), t.reject(new c(h.message));
	          }var p = t.promise();return p.abort = o, p;
	        } }]), e;
	    }();e.exports = f;
	  }, function (e, t, n) {
	    "use strict";
	    function r(e, t) {
	      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
	    }function i(e, t) {
	      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
	    }function o(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }function s() {
	      return "FILE-" + (m++).toString(16).toUpperCase();
	    }function u(e) {
	      var t = e.name && g.exec(e.name);return t ? t[1] : (t = e.type && k.exec(e.type), t ? t[1] : "");
	    }function a(e) {
	      return ["jpg", "jpeg", "png", "gif", "bmp", "webp"].indexOf(e.toLowerCase()) > -1 ? "image/" + ("jpg" === e ? "jpeg" : e) : null;
	    }var c = function () {
	      function e(e, t) {
	        for (var n = 0; n < t.length; n++) {
	          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	        }
	      }return function (t, n, r) {
	        return n && e(t.prototype, n), r && e(t, r), t;
	      };
	    }(),
	        l = n(2),
	        f = n(4),
	        h = n(3),
	        p = h.Deferred,
	        v = n(5),
	        d = v.Status,
	        y = v.StatusName,
	        m = 0,
	        g = /\.([^.]+)$/,
	        k = /^image\/(jpg|jpeg|png|gif|bmp|webp)$/i,
	        b = function () {
	      function e(t, n) {
	        o(this, e), this.change(t, n);
	      }return c(e, [{ key: "change", value: function value(e, t) {
	          this.total = e, this.loaded = t || 0, this.percentage = this.loaded === this.total ? 100 : Math.ceil(this.loaded / this.total * 100);
	        } }, { key: "done", value: function value() {
	          this.change(this.total, this.total);
	        } }]), e;
	    }(),
	        E = function (e) {
	      function t(e, n, i) {
	        o(this, t);var c = r(this, Object.getPrototypeOf(t).call(this));c.id = s(), c.name = n.name || i || c.id;var l = u(n).toLowerCase();return l && !g.test(c.name) && (c.name += "." + l), c.ext = l, c.type = n.type || a(c.ext) || "application/octet-stream", c.lastModified = n.lastModified || +new Date(), c.size = n.size || 0, c.runtime = e, c.source = n, c.status = d.INITED, c.progress = new b(c.size, 0), c;
	      }return i(t, e), c(t, [{ key: "getCore", value: function value() {
	          return this.core;
	        } }, { key: "setCore", value: function value(e) {
	          this.core = e, this.setPropagationTarget(e);
	        } }, { key: "getRuntime", value: function value() {
	          return this.runtime;
	        } }, { key: "isImage", value: function value() {
	          return k.test(this.type);
	        } }, { key: "setStatus", value: function value(e) {
	          var t = this.status;t !== d.CANCELLED && e !== t && (this.status = e, this.emit(f.FILE_STATUS_CHANGE, e, t));
	        } }, { key: "getStatus", value: function value() {
	          return this.status;
	        } }, { key: "getStatusName", value: function value() {
	          return this.status in y ? y[this.status] : "unknow";
	        } }, { key: "getSource", value: function value() {
	          return this.source;
	        } }, { key: "getAsDataUrl", value: function value(e) {
	          return this._dataUrlPromise || (this._dataUrlPromise = this.runtime.getAsDataUrl(this.source, e)), this._dataUrlPromise;
	        } }, { key: "md5", value: function value() {
	          return this._md5Promise || (this._md5Promise = this.runtime.md5(this.source)), this._md5Promise;
	        } }, { key: "session", value: function value() {
	          var e = this;if (this._sessionPromise) return this._sessionPromise;var t = p();return t.progress(function (t) {
	            e.setStatus(d.PROGRESS), e.emit(f.FILE_UPLOAD_PROGRESS, t);
	          }).done(function (t) {
	            e.response = t, e._session = null, e._sessionPromise = null, e._flows = [], e.setStatus(d.SUCCESS), e.emit(f.FILE_UPLOAD_SUCCESS, t);
	          }).fail(function (t) {
	            e._session = null, e._sessionPromise = null;for (var n = void 0; n = e._flows.shift();) {
	              n.abort();
	            }t instanceof Error && (e.setStatus(d.ERROR), e.emit(f.FILE_UPLOAD_ERROR, t));
	          }).always(function () {
	            e.emit(f.FILE_UPLOAD_COMPLETED, e.getStatus());
	          }), this._flows = [], this._session = t, this._sessionPromise = t.promise(), this._sessionPromise;
	        } }, { key: "prepare", value: function value() {
	          var e = this;if (this.status !== d.PENDING || !this.core) return !1;this.session(), this.setStatus(d.PROGRESS), this.emit(f.FILE_UPLOAD_START), this.request = this.core.createFileRequest(this);var t = this.core.invoke(f.FILE_UPLOAD_PREPARING, this.request);return this._flows.push(t), t.then(function (t) {
	            e.emit(f.FILE_UPLOAD_PREPARED, t);var n = e.runtime.getUploading().generate(t);return e._flows.push(n), n.progress(function (t) {
	              e.progress.change(t.total, t.loaded), e._session.notify(e.progress);
	            }), n;
	          }).then(function (t) {
	            return e.complete(t);
	          }, this._session.reject), !0;
	        } }, { key: "complete", value: function value(e) {
	          if (this.status === d.PROGRESS) {
	            for (var t = void 0; t = this._flows.shift();) {
	              t.abort();
	            }this.progress.done(), this._session.notify(this.progress), e = this.request.createFileResponse(e), this.setStatus(d.END), this.emit(f.FILE_UPLOAD_END);var n = this.core.invoke(f.FILE_UPLOAD_COMPLETING, e);this._flows.push(n), n.then(this._session.resolve, this._session.reject);
	          }
	        } }, { key: "pending", value: function value() {
	          (this.status === d.ERROR || this.status === d.QUEUED) && (this.progress.change(this.size, 0), this.setStatus(d.PENDING));
	        } }, { key: "abort", value: function value() {
	          this._session && this._session.reject(), this._session = null, this._sessionPromise = null;
	        } }, { key: "cancel", value: function value() {
	          this.setStatus(d.CANCELLED), this.emit(f.FILE_CANCEL), this.abort(), this.runtime.cancel(this.source), this._dataUrlPromise && this._dataUrlPromise.abort(), this._md5Promise && this._md5Promise.abort && this._md5Promise.abort(), this.removeAllListeners();
	        } }, { key: "destroy", value: function value() {
	          this.cancel();
	        } }]), t;
	    }(l);e.exports = E;
	  }, function (e, t, n) {
	    "use strict";
	    function r(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }var i = function () {
	      function e(e, t) {
	        for (var n = 0; n < t.length; n++) {
	          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	        }
	      }return function (t, n, r) {
	        return n && e(t.prototype, n), r && e(t, r), t;
	      };
	    }(),
	        o = n(2),
	        s = n(9),
	        u = n(12),
	        a = function () {
	      function e(t) {
	        r(this, e), this.core = t, this.runtime = s.getInstance();
	      }return i(e, [{ key: "addArea", value: function value(e) {
	          var t = this.core,
	              n = this.runtime,
	              r = new o(),
	              i = function i(e) {
	            var i = e.clipboardData || window.clipboardData,
	                o = i.items,
	                s = i.files;if (s || o) {
	              var a = void 0,
	                  c = void 0,
	                  l = void 0,
	                  f = void 0,
	                  h = void 0,
	                  p = void 0;if (s && s.length) for (a = s.length > 0, c = 0, l = s.length; l > c && (f = new u(n, s[c]), a = 1, p = t.add(f), !(0 > p || p > 0 && !t.isMultiple())); c++) {} else if (o && o.length) {
	                var v = i.getData("text/plain");for (c = 0, l = o.length; l > c && !t.isLimit() && (h = o[c], !("file" === h.kind && (f = h.getAsFile()) && (f = new u(n, f, v), v = null, a = 1, p = t.add(f), 0 > p || p > 0 && !t.isMultiple()))); c++) {}
	              }a && (e.preventDefault(), e.stopPropagation(), r.emit("paste", i));
	            }
	          };return "DataTransfer" in window && "FileList" in window && e.addEventListener && e.addEventListener("paste", i, !1), r.destroy = function () {
	            r.removeAllListeners(), e.removeEventListener && e.removeEventListener("paste", i, !1);
	          }, r;
	        } }]), e;
	    }();e.exports = a;
	  }, function (e, t, n) {
	    "use strict";
	    function r(e, t) {
	      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
	    }function i(e, t) {
	      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
	    }function o(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }var s = function () {
	      function e(e, t) {
	        for (var n = 0; n < t.length; n++) {
	          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	        }
	      }return function (t, n, r) {
	        return n && e(t.prototype, n), r && e(t, r), t;
	      };
	    }(),
	        u = n(2),
	        a = n(9),
	        c = n(15),
	        l = n(12),
	        f = n(3),
	        h = f.extend,
	        p = "",
	        v = function () {
	      var e = document.createElement("div");return function (t) {
	        return e.innerHTML = t, t = e.firstChild, e.removeChild(t), t;
	      };
	    }(),
	        d = function () {
	      function e(t, n) {
	        var r = this;o(this, e);var i = v('<label style="position:fixed;left:-100px;top:-100px;width:50px;height:50px;display:block;cursor:pointer;overflow:hidden;z-index:99999;opacity:0;filter:alpha(opacity=0)"></label>'),
	            s = new c(i, p, function () {
	          return { accept: t.getAccept(), multiple: t.isMultiple() };
	        });s.on("select", function (e) {
	          n(e.files, s), r.current && r.current.emit("files", e.files, s);
	        }), s.on("rollOut", function () {
	          return r.hideOverlay();
	        }), document.body.appendChild(i), this.overlay = i;
	      }return s(e, [{ key: "hideOverlay", value: function value() {
	          h(this.overlay.style, { left: "-100px", top: "-100px", width: "50px", height: "50px" }), this.current && (this.current.emit("rollOut"), this.current = null);
	        } }, { key: "add", value: function value(e) {
	          var t = this,
	              n = this.overlay,
	              r = new u(),
	              i = function i() {
	            var i = e.getBoundingClientRect();h(n.style, { left: i.left + "px", top: i.top + "px", width: i.right - i.left + "px", height: i.bottom - i.top + "px" }), r.emit("rollOver"), t.current && t.current !== r && t.current.emit("rollOut"), t.current = r;
	          };return e.addEventListener ? e.addEventListener("mouseover", i, !1) : e.attachEvent && e.attachEvent("onmouseover", i), r.destroy = function () {
	            t.current === r && t.hideOverlay(), r.removeAllListeners(), e.removeEventListener ? e.removeEventListener("mouseover", i, !1) : e.detachEvent && e.detachEvent("onmouseover", i);
	          }, r;
	        } }]), e;
	    }(),
	        y = function (e) {
	      function t(e, n, i) {
	        o(this, t);var s = r(this, Object.getPrototypeOf(t).call(this));return s.trigger = e, s.core = n, s.label = v('<label style="position:absolute;top:0;left:0;width:100%;height:100%;display:inline-block;cursor:pointer;background:#fff;overflow:hidden;opacity:0"></label>'), s.onChange = function (e) {
	          i(e.target.files), s.destroyInput(), s.createInput();
	        }, e.appendChild(s.label), s.createInput(), s;
	      }return i(t, e), s(t, [{ key: "createInput", value: function value() {
	          var e = v('<input type="file" style="position:absolute;clip:rect(1px 1px 1px 1px);" />'),
	              t = this.core.getAccept();t && t.length > 0 && (t = t.map(function (e) {
	            return e.mimeTypes || "." + e.extensions.join(",.");
	          }), e.setAttribute("accept", t.join(","))), this.core.isMultiple() && e.setAttribute("multiple", "multiple"), e.addEventListener("change", this.onChange, !1), this.label.appendChild(e), this.input = e;
	        } }, { key: "destroyInput", value: function value() {
	          this.input && (this.input.removeEventListener("change", this.onChange, !1), this.label.removeChild(this.input), this.input = null);
	        } }, { key: "destroy", value: function value() {
	          this.destroyInput(), this.removeAllListeners(), this.trigger.removeChild(this.label);
	        } }]), t;
	    }(u),
	        m = function () {
	      function e(t, n) {
	        o(this, e);var r = a.getInstance();this.core = t, this.onFiles = function (e) {
	          n(e, r);
	        };
	      }return s(e, [{ key: "add", value: function value(e) {
	          return new y(e, this.core, this.onFiles);
	        } }]), e;
	    }(),
	        g = function () {
	      function e(t) {
	        o(this, e);var n = function n(e, _n) {
	          for (var r = 0, i = e.length; i > r && !(t.add(new l(_n, e[r])) < 0); r++) {}
	        };"DataTransfer" in window && "FileList" in window ? this.triggerCollection = new m(t, n) : this.triggerCollection = new d(t, n);
	      }return s(e, null, [{ key: "setSWF", value: function value(e) {
	          p = e;
	        } }]), s(e, [{ key: "addArea", value: function value(e) {
	          return this.triggerCollection.add(e);
	        } }]), e;
	    }();e.exports = g;
	  }, function (e, t, n) {
	    "use strict";
	    function r(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }function i(e, t) {
	      if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return !t || "object" != (typeof t === "undefined" ? "undefined" : _typeof(t)) && "function" != typeof t ? e : t;
	    }function o(e, t) {
	      if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (typeof t === "undefined" ? "undefined" : _typeof(t)));e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
	    }function s() {
	      var e = void 0;try {
	        e = navigator.plugins["Shockwave Flash"], e = e.description;
	      } catch (t) {
	        try {
	          e = new ActiveXObject("ShockwaveFlash.ShockwaveFlash").GetVariable("$version");
	        } catch (n) {
	          e = "0.0";
	        }
	      }return e = e.match(/\d+/g), parseFloat(e[0] + "." + e[1]);
	    }function u(e, t, n) {
	      try {
	        e.CallFunction('<invoke name="' + t + '" returntype="javascript">' + __flash__argumentsToXML(n || [], 0) + "</invoke>");
	      } catch (r) {
	        throw "Call to " + t + " failed";
	      }
	    }function a(e, t) {
	      if (s() < 11.4) throw "flash player is not available";var n = document.createElement("div"),
	          r = e + (e.indexOf("?") > 0 ? "&" : "?") + "callInterface=" + encodeURIComponent(t),
	          i = ['id="' + t + '-Picker"', 'type="application/x-shockwave-flash"', 'data="' + r + '"', 'width="100%" height="100%"', 'style="position:absolute;left:0;top:0;display:block;z-index:1;outline:0"'];return window.ActiveXObject && i.push('classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"'), n.innerHTML = "<object " + i.join(" ") + '><param name="movie" value="' + r + '" /><param name="wmode" value="transparent" /><param name="allowscriptaccess" value="always" /></object>', n.firstChild;
	    }function c(e) {
	      var t = e + (p++).toString(16);return t in window ? c(e) : t;
	    }var l = function () {
	      function e(e, t) {
	        for (var n = 0; n < t.length; n++) {
	          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	        }
	      }return function (t, n, r) {
	        return n && e(t.prototype, n), r && e(t, r), t;
	      };
	    }(),
	        f = n(10),
	        h = n(16),
	        p = +new Date(),
	        v = function (e) {
	      function t(e, n, o) {
	        function s() {
	          var t = e.offsetWidth,
	              r = e.offsetHeight,
	              i = void 0;return t && r && (i = a(n, l)) ? void e.appendChild(f.flash = i) : void setTimeout(s, 1e3);
	        }r(this, t);var u = i(this, Object.getPrototypeOf(t).call(this)),
	            l = c("FlashRuntime");u.callInterface = l, window[l] = u, u.options = o;var f = u;return s(), u;
	      }return o(t, e), l(t, [{ key: "getOptions", value: function value() {
	          var e = this.options;return "function" == typeof e && (e = e()), e;
	        } }, { key: "getTransport", value: function value(e, t, n) {
	          return new h(this, e, t, n);
	        } }, { key: "send", value: function value(e, t, n, r) {
	          u(this.flash, "exec", ["send", e, t.id, n, r]);
	        } }, { key: "abort", value: function value(e) {
	          try {
	            u(this.flash, "exec", ["abort", e.id]);
	          } catch (t) {}
	        } }, { key: "cancel", value: function value(e) {
	          u(this.flash, "exec", ["cancel", e.id]);
	        } }, { key: "ping", value: function value() {
	          u(this.flash, "exec", ["pang"]);
	        } }, { key: "destroy", value: function value() {
	          delete window[this.callInterface];
	        } }]), t;
	    }(f);e.exports = v;
	  }, function (e, t, n) {
	    "use strict";
	    function r(e, t) {
	      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
	    }var i = function () {
	      function e(e, t) {
	        for (var n = 0; n < t.length; n++) {
	          var r = t[n];r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
	        }
	      }return function (t, n, r) {
	        return n && e(t.prototype, n), r && e(t, r), t;
	      };
	    }(),
	        o = n(3),
	        s = o.Deferred,
	        u = n(6),
	        a = u.TimeoutError,
	        c = u.AbortError,
	        l = u.NetworkError,
	        f = function () {
	      function e(t) {
	        r(this, e), this.flashRuntime = t;
	      }return i(e, [{ key: "generate", value: function value(e) {
	          var t = s(),
	              n = this.flashRuntime,
	              r = e.getBlob(),
	              i = void 0,
	              o = function o() {
	            n.off("uploadprogress", f), n.off("uploadcomplete", h), n.off("uploaderror", p), i && clearTimeout(i);
	          },
	              u = function u() {
	            o(), n.abort(r.id);
	          },
	              f = function f(e) {
	            e.id === r.id && t.notify(e);
	          },
	              h = function h(e) {
	            return e.id === r.id ? (o(), 304 === e.status || e.status >= 200 && e.status < 300 ? (n.cancel(r), t.resolve(e.response)) : t.reject(new l(e.status, e.response))) : void 0;
	          },
	              p = function p(e) {
	            e.id === r.id && (o(), t.reject(new c(e.message)));
	          };n.on("uploadprogress", f), n.on("uploadcomplete", h), n.on("uploaderror", p);var v = e.getTimeout();v > 0 && (i = setTimeout(function () {
	            u(), t.reject(new a("timeout:" + v));
	          }, v));try {
	            n.send(e.getName(), r, e.getUrl(), e.getParams().toString());
	          } catch (d) {
	            u(), t.reject(new c(d.message));
	          }var y = t.promise();return y.abort = u, y;
	        } }]), e;
	    }();e.exports = f;
	  }]);
		});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(720)(module)))

/***/ },
/* 720 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 721 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var util = __webpack_require__(722);
	var UxcoreProgress = __webpack_require__(648);
	var Line = UxcoreProgress.Line;

	var Progress = function (_React$Component) {
	    _inherits(Progress, _React$Component);

	    function Progress(props) {
	        _classCallCheck(this, Progress);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            percentage: 0
	        };
	        return _this;
	    }

	    Progress.prototype.componentDidMount = function componentDidMount() {

	        var t = null;
	        var me = this;
	        var percentage = me.state.percentage;

	        me._isMounted = true;

	        me.t = setInterval(function () {

	            percentage = percentage + 5;

	            if (me._isMounted) {
	                me.setState({
	                    percentage: percentage
	                });
	            }

	            if (percentage === 95) {

	                clearInterval(me.t);
	            }
	        }, 100);
	    };

	    Progress.prototype.componentWillUnmount = function componentWillUnmount() {
	        var me = this;
	        me._isMounted = false;
	        clearInterval(me.t);
	    };

	    Progress.prototype.render = function render() {
	        return React.createElement(Line, { percent: this.state.percentage, strokeWidth: 8 });
	    };

	    return Progress;
	}(React.Component);

	Progress.isSupport = util.TRANSFORM_PROPERTY !== false;

	Progress.propTypes = {
	    percentage: React.PropTypes.number
	};
	Progress.defaultProps = {
	    percentage: 0
	};

		module.exports = Progress;

/***/ },
/* 722 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	    humanSizeFormat: function humanSizeFormat(size) {
	        size = parseFloat(size);
	        var prefixesSI = ['', 'k', 'm', 'g', 't', 'p', 'e', 'z', 'y'];
	        var base = 1000,
	            index = size ? Math.floor(Math.log(size) / Math.log(base)) : 0;
	        index = Math.min(index, prefixesSI.length - 1);
	        var powedPrecision = Math.pow(10, index < 2 ? 0 : index > 2 ? 2 : 1);
	        size = size / Math.pow(base, index);
	        size = Math.round(size * powedPrecision) / powedPrecision;
	        if (size > 500) {
	            size = Math.round(size / 100) / 10;
	            index++;
	        }
	        return size + prefixesSI[index];
	    },
	    natcut: function natcut(title, len) {
	        var max = len * 2,
	            length = title.length,
	            l = 0,
	            i = 0,
	            part = void 0,
	            s = void 0;
	        for (i = 0; i < length && l <= max; i++) {
	            l += title.charCodeAt(i) > 255 ? 2 : 1;
	        }
	        if (l <= max) {
	            return title;
	        }
	        i = 0;
	        l = 0;
	        len -= 2;
	        while (l < len) {
	            s = title.charCodeAt(i) > 255 ? 2 : 1;
	            if (l + s > len) {
	                break;
	            } else {
	                i++;
	                l += s;
	            }
	        }
	        part = title.substr(0, i);
	        l += 3;

	        i = length;
	        while (l < max) {
	            s = title.charCodeAt(i - 1) > 255 ? 2 : 1;
	            if (l + s > max) {
	                break;
	            } else {
	                i--;
	                l += s;
	            }
	        }
	        return part + '...' + title.substring(Math.min(i, length - 1), length);
	    },
	    TRANSFORM_PROPERTY: function () {
	        var style = document.createElement("div").style;
	        var properties = ["transform", "WebkitTransform", "MozTransform", "msTransform"];
	        for (var i = 0, l = properties.length; i < l; i++) {
	            if (properties[i] in style) {
	                return properties[i];
	            }
	        }
	        return false;
	    }()
		};

/***/ },
/* 723 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var FileItem = __webpack_require__(724);
	var Picker = __webpack_require__(727);

	var _require = __webpack_require__(719);

	var Events = _require.Events;

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var FileList = function (_React$Component) {
	    _inherits(FileList, _React$Component);

	    function FileList(props) {
	        _classCallCheck(this, FileList);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.core = props.core;

	        _this.state = {
	            items: _this.core.getStat().getFiles()
	        };
	        return _this;
	    }

	    FileList.prototype.componentDidMount = function componentDidMount() {
	        var _this2 = this;

	        var statchange = function statchange(stat) {
	            _this2.setState({
	                items: stat.getFiles()
	            });
	        };
	        this.core.on(Events.QUEUE_STAT_CHANGE, statchange);
	        this.stopListen = function () {
	            _this2.core.off(Events.QUEUE_STAT_CHANGE, statchange);
	        };
	    };

	    FileList.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.stopListen && this.stopListen();
	    };

	    FileList.prototype.render = function render() {
	        var _this3 = this;

	        return React.createElement('div', { className: "kuma-upload-filelist " + (this.props.mode === 'nw' ? 'nwmode' : this.props.mode === 'mini' ? 'minimode' : 'iconmode') }, React.createElement('div', { className: 'inner' }, this.state.items.map(function (file) {
	            return React.createElement(FileItem, { locale: _this3.props.locale, key: file.id, file: file, mode: _this3.props.mode, isOnlyImg: _this3.props.isOnlyImg });
	        }), !this.core.isFull() && this.props.mode === 'icon' ? React.createElement(Picker, { core: this.core }, React.createElement('i', { className: 'kuma-icon kuma-icon-add' })) : null));
	    };

	    return FileList;
	}(React.Component);

	FileList.defaultProps = {
	    mode: 'mini'
	};

		module.exports = FileList;

/***/ },
/* 724 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var Preview = __webpack_require__(725);
	var Progress = __webpack_require__(721);
	var util = __webpack_require__(722);

	var _require = __webpack_require__(719);

	var Events = _require.Events;

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var i18n = __webpack_require__(726);

	var FileItem = function (_React$Component) {
	    _inherits(FileItem, _React$Component);

	    function FileItem(props) {
	        _classCallCheck(this, FileItem);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        var file = props.file;
	        _this.file = file;

	        _this.state = {
	            percentage: file.progress ? file.progress.percentage : 0,
	            status: file.getStatusName()
	        };
	        return _this;
	    }

	    FileItem.prototype.componentDidMount = function componentDidMount() {
	        var _this2 = this;

	        var file = this.file;
	        var statuschange = function statuschange() {
	            var state = {
	                status: file.getStatusName()
	            };
	            if (state.status === 'error') {
	                state.percentage = 0;
	            }
	            _this2.setState(state);
	        };
	        var progress = function progress(_progress) {
	            _this2.setState({
	                percentage: _progress.percentage
	            });
	        };
	        file.on(Events.FILE_STATUS_CHANGE, statuschange);
	        file.on(Events.FILE_UPLOAD_PROGRESS, progress);
	        this.stopListen = function () {
	            file.off(Events.FILE_STATUS_CHANGE, statuschange);
	            file.off(Events.FILE_UPLOAD_PROGRESS, progress);
	        };
	    };

	    FileItem.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.stopListen && this.stopListen();
	    };

	    FileItem.prototype.onPending = function onPending() {
	        this.file.pending();
	    };

	    FileItem.prototype.onCancel = function onCancel() {
	        this.file.cancel();
	    };

	    FileItem.prototype.render = function render() {
	        var me = this;
	        var locale = me.props.locale;

	        if (this.props.mode === 'icon') {
	            return React.createElement('div', { className: "kuma-upload-fileitem status-" + this.state.status }, React.createElement('a', { className: 'kuma-upload-action action-remove', onClick: this.onCancel.bind(this), title: i18n[locale]['remove'] }, React.createElement('i', { className: 'kuma-icon kuma-icon-close' })), React.createElement('div', { className: 'filepreview' }, React.createElement(Preview, { file: this.props.file }), this.state.status === 'error' ? React.createElement('a', { className: 'kuma-upload-action action-retry', onClick: this.onPending.bind(this), title: i18n[locale]['retry'] }, React.createElement('i', { className: 'kuma-icon kuma-icon-refresh' })) : null, this.state.status === 'queued' ? React.createElement('a', { className: 'kuma-upload-action action-upload', onClick: this.onPending.bind(this), title: i18n[locale]['upload'] }, React.createElement('i', { className: 'kuma-icon kuma-icon-triangle-right' })) : null, this.state.status === 'progress' || this.state.status === 'pending' ? React.createElement(Progress, { percentage: this.state.percentage }) : null), this.state.status === 'error' ? React.createElement('a', { className: 'kuma-upload-status status-error', title: i18n[locale]['upload_failed'] }, React.createElement('i', { className: 'kuma-icon kuma-icon-caution' })) : null, this.state.status === 'success' ? React.createElement('a', { className: 'kuma-upload-status status-success' }, React.createElement('i', { className: 'kuma-icon kuma-icon-choose' })) : null, React.createElement('div', { className: 'filename', title: this.file.name }, util.natcut(this.file.name, 10)));
	        } else if (this.props.mode === 'nw') {
	            var downloadUrl = void 0,
	                previewUrl = void 0;
	            if (this.state.status === 'success') {

	                var json = this.file.response.getJson();
	                try {
	                    downloadUrl = json.data.downloadUrl || json.data.file || json.data.url;
	                    previewUrl = json.data.previewUrl || downloadUrl;
	                } catch (e) {}
	            }
	            if (this.props.isOnlyImg) {
	                return React.createElement('div', { className: "kuma-upload-fileitem-img status-" + this.state.status }, React.createElement('div', { className: 'field-image-info' }, React.createElement('a', { className: 'field-image-preview', href: previewUrl, target: '_blank' }, React.createElement('img', { src: previewUrl }))), React.createElement('div', { className: 'field-status' }, React.createElement('a', { className: 'kuma-upload-action', onClick: this.onCancel.bind(this) }, React.createElement('i', { className: 'kuma-icon kuma-icon-close' }))));
	            } else {
	                return React.createElement('div', { className: "kuma-upload-fileitem status-" + this.state.status }, React.createElement('label', { className: 'field-icon' }, this.state.status === 'error' ? React.createElement('i', { className: 'kuma-icon kuma-icon-caution' }) : null, this.state.status !== 'error' ? React.createElement('i', { className: 'kuma-upload-fileicon', 'data-ext': this.file.ext, 'data-type': this.file.type }) : null), React.createElement('div', { className: 'field-info-wrap' }, React.createElement('label', { className: 'field-info' }, React.createElement('span', { className: 'filename' }, this.file.name)), React.createElement('label', { className: 'field-status' }, this.state.status === 'error' ? React.createElement('a', { className: 'kuma-upload-status status-error' }, i18n[locale]['upload_failed']) : null, this.state.status !== 'error' && this.state.status !== 'success' ? React.createElement(Progress, null) : null, this.state.status === 'success' || this.state.status === 'error' ? React.createElement('a', { className: 'kuma-upload-action close-action', onClick: this.onCancel.bind(this) }, React.createElement('i', { className: 'kuma-icon kuma-icon-close' })) : null, this.state.status === 'success' && previewUrl ? React.createElement('a', { className: 'kuma-upload-action', target: '_blank', href: previewUrl }, i18n[locale]['preview']) : null, this.state.status === 'success' && downloadUrl ? React.createElement('a', { className: 'kuma-upload-action', target: '_blank', href: downloadUrl }, i18n[locale]['download']) : null)));
	            }
	        } else {
	            var size = util.humanSizeFormat(this.file.size);
	            return React.createElement('div', { className: "kuma-upload-fileitem status-" + this.state.status }, React.createElement('label', { className: 'field-info' }, React.createElement('i', { className: 'kuma-upload-fileicon', 'data-ext': this.file.ext, 'data-type': this.file.type }), React.createElement('span', { className: 'filename', title: this.file.name }, util.natcut(this.file.name, 12)), React.createElement('span', { className: 'filesize' }, '/' + size)), React.createElement('label', { className: 'field-status' }, this.state.status === 'error' ? React.createElement('a', { className: 'kuma-upload-status status-error', title: i18n[locale]['upload_failed'] }, React.createElement('i', { className: 'kuma-icon kuma-icon-caution' })) : null, this.state.status === 'success' ? React.createElement('a', { className: 'kuma-upload-status status-success' }, React.createElement('i', { className: 'kuma-icon kuma-icon-choose' })) : null, this.state.status === 'error' ? React.createElement('a', { className: 'kuma-upload-action action-retry', onClick: this.onPending.bind(this), title: i18n[locale]['retry'] }, React.createElement('i', { className: 'kuma-icon kuma-icon-refresh' })) : null, this.state.status === 'queued' ? React.createElement('a', { className: 'kuma-upload-action action-upload', onClick: this.onPending.bind(this), title: i18n[locale]['upload'] }, React.createElement('i', { className: 'kuma-icon kuma-icon-triangle-right' })) : null, React.createElement('a', { className: 'kuma-upload-action action-remove', onClick: this.onCancel.bind(this), title: i18n[locale]['remove'] }, React.createElement('i', { className: 'kuma-icon kuma-icon-close' }))), React.createElement(Progress, { percentage: this.state.percentage, mode: 'bar' }));
	        }
	    };

	    return FileItem;
	}(React.Component);

	FileItem.defaultProps = {
	    mode: 'mini'
	};

		module.exports = FileItem;

/***/ },
/* 725 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Preview = function (_React$Component) {
	    _inherits(Preview, _React$Component);

	    function Preview(props) {
	        _classCallCheck(this, Preview);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {};

	        var file = props.file;
	        if (file.isImage()) {
	            file.getAsDataUrl(1000).done(function (url) {
	                return _this.setState({ url: url });
	            });
	        }
	        return _this;
	    }

	    Preview.prototype.render = function render() {
	        return React.createElement('div', { className: 'previewer' }, this.state.url ? React.createElement('img', { src: this.state.url }) : React.createElement('i', { className: 'kuma-upload-fileicon', 'data-ext': this.props.file.ext, 'data-type': this.props.file.type }));
	    };

	    return Preview;
	}(React.Component);

		module.exports = Preview;

/***/ },
/* 726 */
/***/ function(module, exports) {

	"use strict";

	var locale = {
	    "en-us": {
	        "download": "download",
	        "preview": "preview",
	        "remove": "remove",
	        "retry": "retry",
	        "upload": "upload",
	        "uploading": "uploading",
	        "upload_failed": "upload failed",
	        "upload_files": "upload files"
	    },
	    "zh-cn": {
	        "download": "下载",
	        "preview": "预览",
	        "remove": "移除",
	        "retry": "重传",
	        "upload": "上传",
	        "uploading": "上传中",
	        "upload_failed": "上传失败",
	        "upload_files": "添加文件"
	    }
	};

	locale['en'] = locale['en-us'];

	module.exports = locale;

/***/ },
/* 727 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Picker = function (_React$Component) {
	    _inherits(Picker, _React$Component);

	    function Picker() {
	        _classCallCheck(this, Picker);

	        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	    }

	    Picker.prototype.componentDidMount = function componentDidMount() {
	        this.area = this.props.core.getPickerCollector().addArea(ReactDOM.findDOMNode(this));
	    };

	    Picker.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.area && this.area.destroy();
	    };

	    Picker.prototype.render = function render() {
	        return React.createElement('div', { className: 'kuma-upload-picker' }, this.props.children);
	    };

	    return Picker;
	}(React.Component);

		module.exports = Picker;

/***/ },
/* 728 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Message Component for uxcore
	 * @author eternaslky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(729);

/***/ },
/* 729 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Notification = __webpack_require__(730);
	var classnames = __webpack_require__(5);
	var defaultDuration = 1.5;
	var messageInstance = void 0;
	var key = 1;
	var prefixCls = 'kuma-message';
	var transitionName = 'moveUp';
	var className = void 0;

	function getMessageInstance() {
	    messageInstance = messageInstance || Notification.newInstance({
	        prefixCls: prefixCls,
	        className: className,
	        transitionName: transitionName,
	        style: {
	            left: '50%'
	        } // 覆盖原来的样式
	    });
	    return messageInstance;
	}

	function notice(content) {
	    var duration = arguments.length <= 1 || arguments[1] === undefined ? defaultDuration : arguments[1];

	    var _classnames;

	    var type = arguments[2];
	    var onClose = arguments[3];

	    var iconClass = {
	        'info': 'kuma-icon kuma-icon-information',
	        'success': 'kuma-icon kuma-icon-success',
	        'error': 'kuma-icon kuma-icon-error',
	        'loading': 'kuma-loading'
	    }[type];

	    var instance = getMessageInstance();
	    instance.notice({
	        key: key,
	        duration: duration,
	        style: {
	            right: '50%'
	        },
	        content: React.createElement('div', { className: classnames((_classnames = {}, _classnames[prefixCls + '-container ' + prefixCls + '-container-' + type] = true, _classnames['fn-clear'] = true, _classnames)) }, React.createElement('i', { className: iconClass }), React.createElement('div', { className: prefixCls + '-content' }, content)),
	        onClose: onClose
	    });
	    return function () {
	        var target = key++;
	        return function () {
	            instance.removeNotice(target);
	        };
	    }();
	}

	module.exports = {
	    info: function info(content, duration, onClose) {
	        return notice(content, duration, 'info', onClose);
	    },
	    success: function success(content, duration, onClose) {
	        return notice(content, duration, 'success', onClose);
	    },
	    error: function error(content, duration, onClose) {
	        return notice(content, duration, 'error', onClose);
	    },
	    loading: function loading(content, duration, onClose) {
	        return notice(content, duration, 'loading', onClose);
	    },
	    config: function config(options) {
	        prefixCls = options.prefixCls || prefixCls;
	        transitionName = options.transitionName || transitionName;
	        className = options.className || className;
	    }
		};

/***/ },
/* 730 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _Notification = __webpack_require__(731);

	var _Notification2 = _interopRequireDefault(_Notification);

	exports['default'] = _Notification2['default'];
	module.exports = exports['default'];

/***/ },
/* 731 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcAnimate = __webpack_require__(732);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _rcUtil = __webpack_require__(741);

	var _Notice = __webpack_require__(757);

	var _Notice2 = _interopRequireDefault(_Notice);

	var seed = 0;
	var now = Date.now();

	function getUuid() {
	  return 'rcNotification_' + now + '_' + seed++;
	}

	var Notification = _react2['default'].createClass({
	  displayName: 'Notification',

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-notification',
	      animation: 'fade',
	      style: {
	        'top': 65,
	        left: '50%'
	      }
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      notices: []
	    };
	  },

	  getTransitionName: function getTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = props.prefixCls + '-' + props.animation;
	    }
	    return transitionName;
	  },

	  add: function add(notice) {
	    var key = notice.key = notice.key || getUuid();
	    var notices = this.state.notices;
	    if (!notices.filter(function (v) {
	      return v.key === key;
	    }).length) {
	      this.setState({
	        notices: notices.concat(notice)
	      });
	    }
	  },

	  remove: function remove(key) {
	    var notices = this.state.notices.filter(function (notice) {
	      return notice.key !== key;
	    });
	    this.setState({
	      notices: notices
	    });
	  },

	  render: function render() {
	    var _className,
	        _this = this;

	    var props = this.props;
	    var noticeNodes = this.state.notices.map(function (notice) {
	      var onClose = (0, _rcUtil.createChainedFunction)(_this.remove.bind(_this, notice.key), notice.onClose);
	      return _react2['default'].createElement(_Notice2['default'], _extends({ prefixCls: props.prefixCls }, notice, { onClose: onClose }), notice.content);
	    });
	    var className = (_className = {}, _defineProperty(_className, props.prefixCls, 1), _defineProperty(_className, props.className, !!props.className), _className);
	    return _react2['default'].createElement('div', { className: (0, _rcUtil.classSet)(className), style: props.style }, _react2['default'].createElement(_rcAnimate2['default'], { transitionName: this.getTransitionName() }, noticeNodes));
	  }
	});

	Notification.newInstance = function (properties) {
	  var props = properties || {};
	  var div = document.createElement('div');
	  document.body.appendChild(div);
	  var notification = _reactDom2['default'].render(_react2['default'].createElement(Notification, props), div);
	  return {
	    notice: function notice(noticeProps) {
	      notification.add(noticeProps);
	    },
	    removeNotice: function removeNotice(key) {
	      notification.remove(key);
	    },
	    component: notification,
	    destroy: function destroy() {
	      _reactDom2['default'].unmountComponentAtNode(div);
	      document.body.removeChild(div);
	    }
	  };
	};

	exports['default'] = Notification;
	module.exports = exports['default'];

/***/ },
/* 732 */
[831, 733],
/* 733 */
[832, 734, 735, 740],
/* 734 */
77,
/* 735 */
[833, 736, 740],
/* 736 */
[834, 737, 738],
/* 737 */
80,
/* 738 */
[835, 739, 739],
/* 739 */
82,
/* 740 */
83,
/* 741 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = {
	  guid: __webpack_require__(742),
	  classSet: __webpack_require__(743),
	  joinClasses: __webpack_require__(744),
	  KeyCode: __webpack_require__(745),
	  PureRenderMixin: __webpack_require__(746),
	  shallowEqual: __webpack_require__(747),
	  createChainedFunction: __webpack_require__(748),
	  Dom: {
	    addEventListener: __webpack_require__(749),
	    contains: __webpack_require__(754)
	  },
	  Children: {
	    toArray: __webpack_require__(755),
	    mapSelf: __webpack_require__(756)
	  }
		};

/***/ },
/* 742 */
/***/ function(module, exports) {

	'use strict';

	var seed = 0;
	module.exports = function () {
	  return Date.now() + '_' + seed++;
		};

/***/ },
/* 743 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

		module.exports = __webpack_require__(5);

/***/ },
/* 744 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This file contains an unmodified version of:
	 * https://github.com/facebook/react/blob/v0.12.0/src/utils/joinClasses.js
	 *
	 * This source code is licensed under the BSD-style license found here:
	 * https://github.com/facebook/react/blob/v0.12.0/LICENSE
	 * An additional grant of patent rights can be found here:
	 * https://github.com/facebook/react/blob/v0.12.0/PATENTS
	 */

	"use strict";

	/**
	 * Combines multiple className strings into one.
	 * http://jsperf.com/joinclasses-args-vs-array
	 *
	 * @param {...?string} classes
	 * @return {string}
	 */

	function joinClasses(className /*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}

		module.exports = joinClasses;

/***/ },
/* 745 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * @ignore
	 * some key-codes definition and utils from closure-library
	 * @author yiminghe@gmail.com
	 */

	var KeyCode = {
	  /**
	   * MAC_ENTER
	   */
	  MAC_ENTER: 3,
	  /**
	   * BACKSPACE
	   */
	  BACKSPACE: 8,
	  /**
	   * TAB
	   */
	  TAB: 9,
	  /**
	   * NUMLOCK on FF/Safari Mac
	   */
	  NUM_CENTER: 12, // NUMLOCK on FF/Safari Mac
	  /**
	   * ENTER
	   */
	  ENTER: 13,
	  /**
	   * SHIFT
	   */
	  SHIFT: 16,
	  /**
	   * CTRL
	   */
	  CTRL: 17,
	  /**
	   * ALT
	   */
	  ALT: 18,
	  /**
	   * PAUSE
	   */
	  PAUSE: 19,
	  /**
	   * CAPS_LOCK
	   */
	  CAPS_LOCK: 20,
	  /**
	   * ESC
	   */
	  ESC: 27,
	  /**
	   * SPACE
	   */
	  SPACE: 32,
	  /**
	   * PAGE_UP
	   */
	  PAGE_UP: 33, // also NUM_NORTH_EAST
	  /**
	   * PAGE_DOWN
	   */
	  PAGE_DOWN: 34, // also NUM_SOUTH_EAST
	  /**
	   * END
	   */
	  END: 35, // also NUM_SOUTH_WEST
	  /**
	   * HOME
	   */
	  HOME: 36, // also NUM_NORTH_WEST
	  /**
	   * LEFT
	   */
	  LEFT: 37, // also NUM_WEST
	  /**
	   * UP
	   */
	  UP: 38, // also NUM_NORTH
	  /**
	   * RIGHT
	   */
	  RIGHT: 39, // also NUM_EAST
	  /**
	   * DOWN
	   */
	  DOWN: 40, // also NUM_SOUTH
	  /**
	   * PRINT_SCREEN
	   */
	  PRINT_SCREEN: 44,
	  /**
	   * INSERT
	   */
	  INSERT: 45, // also NUM_INSERT
	  /**
	   * DELETE
	   */
	  DELETE: 46, // also NUM_DELETE
	  /**
	   * ZERO
	   */
	  ZERO: 48,
	  /**
	   * ONE
	   */
	  ONE: 49,
	  /**
	   * TWO
	   */
	  TWO: 50,
	  /**
	   * THREE
	   */
	  THREE: 51,
	  /**
	   * FOUR
	   */
	  FOUR: 52,
	  /**
	   * FIVE
	   */
	  FIVE: 53,
	  /**
	   * SIX
	   */
	  SIX: 54,
	  /**
	   * SEVEN
	   */
	  SEVEN: 55,
	  /**
	   * EIGHT
	   */
	  EIGHT: 56,
	  /**
	   * NINE
	   */
	  NINE: 57,
	  /**
	   * QUESTION_MARK
	   */
	  QUESTION_MARK: 63, // needs localization
	  /**
	   * A
	   */
	  A: 65,
	  /**
	   * B
	   */
	  B: 66,
	  /**
	   * C
	   */
	  C: 67,
	  /**
	   * D
	   */
	  D: 68,
	  /**
	   * E
	   */
	  E: 69,
	  /**
	   * F
	   */
	  F: 70,
	  /**
	   * G
	   */
	  G: 71,
	  /**
	   * H
	   */
	  H: 72,
	  /**
	   * I
	   */
	  I: 73,
	  /**
	   * J
	   */
	  J: 74,
	  /**
	   * K
	   */
	  K: 75,
	  /**
	   * L
	   */
	  L: 76,
	  /**
	   * M
	   */
	  M: 77,
	  /**
	   * N
	   */
	  N: 78,
	  /**
	   * O
	   */
	  O: 79,
	  /**
	   * P
	   */
	  P: 80,
	  /**
	   * Q
	   */
	  Q: 81,
	  /**
	   * R
	   */
	  R: 82,
	  /**
	   * S
	   */
	  S: 83,
	  /**
	   * T
	   */
	  T: 84,
	  /**
	   * U
	   */
	  U: 85,
	  /**
	   * V
	   */
	  V: 86,
	  /**
	   * W
	   */
	  W: 87,
	  /**
	   * X
	   */
	  X: 88,
	  /**
	   * Y
	   */
	  Y: 89,
	  /**
	   * Z
	   */
	  Z: 90,
	  /**
	   * META
	   */
	  META: 91, // WIN_KEY_LEFT
	  /**
	   * WIN_KEY_RIGHT
	   */
	  WIN_KEY_RIGHT: 92,
	  /**
	   * CONTEXT_MENU
	   */
	  CONTEXT_MENU: 93,
	  /**
	   * NUM_ZERO
	   */
	  NUM_ZERO: 96,
	  /**
	   * NUM_ONE
	   */
	  NUM_ONE: 97,
	  /**
	   * NUM_TWO
	   */
	  NUM_TWO: 98,
	  /**
	   * NUM_THREE
	   */
	  NUM_THREE: 99,
	  /**
	   * NUM_FOUR
	   */
	  NUM_FOUR: 100,
	  /**
	   * NUM_FIVE
	   */
	  NUM_FIVE: 101,
	  /**
	   * NUM_SIX
	   */
	  NUM_SIX: 102,
	  /**
	   * NUM_SEVEN
	   */
	  NUM_SEVEN: 103,
	  /**
	   * NUM_EIGHT
	   */
	  NUM_EIGHT: 104,
	  /**
	   * NUM_NINE
	   */
	  NUM_NINE: 105,
	  /**
	   * NUM_MULTIPLY
	   */
	  NUM_MULTIPLY: 106,
	  /**
	   * NUM_PLUS
	   */
	  NUM_PLUS: 107,
	  /**
	   * NUM_MINUS
	   */
	  NUM_MINUS: 109,
	  /**
	   * NUM_PERIOD
	   */
	  NUM_PERIOD: 110,
	  /**
	   * NUM_DIVISION
	   */
	  NUM_DIVISION: 111,
	  /**
	   * F1
	   */
	  F1: 112,
	  /**
	   * F2
	   */
	  F2: 113,
	  /**
	   * F3
	   */
	  F3: 114,
	  /**
	   * F4
	   */
	  F4: 115,
	  /**
	   * F5
	   */
	  F5: 116,
	  /**
	   * F6
	   */
	  F6: 117,
	  /**
	   * F7
	   */
	  F7: 118,
	  /**
	   * F8
	   */
	  F8: 119,
	  /**
	   * F9
	   */
	  F9: 120,
	  /**
	   * F10
	   */
	  F10: 121,
	  /**
	   * F11
	   */
	  F11: 122,
	  /**
	   * F12
	   */
	  F12: 123,
	  /**
	   * NUMLOCK
	   */
	  NUMLOCK: 144,
	  /**
	   * SEMICOLON
	   */
	  SEMICOLON: 186, // needs localization
	  /**
	   * DASH
	   */
	  DASH: 189, // needs localization
	  /**
	   * EQUALS
	   */
	  EQUALS: 187, // needs localization
	  /**
	   * COMMA
	   */
	  COMMA: 188, // needs localization
	  /**
	   * PERIOD
	   */
	  PERIOD: 190, // needs localization
	  /**
	   * SLASH
	   */
	  SLASH: 191, // needs localization
	  /**
	   * APOSTROPHE
	   */
	  APOSTROPHE: 192, // needs localization
	  /**
	   * SINGLE_QUOTE
	   */
	  SINGLE_QUOTE: 222, // needs localization
	  /**
	   * OPEN_SQUARE_BRACKET
	   */
	  OPEN_SQUARE_BRACKET: 219, // needs localization
	  /**
	   * BACKSLASH
	   */
	  BACKSLASH: 220, // needs localization
	  /**
	   * CLOSE_SQUARE_BRACKET
	   */
	  CLOSE_SQUARE_BRACKET: 221, // needs localization
	  /**
	   * WIN_KEY
	   */
	  WIN_KEY: 224,
	  /**
	   * MAC_FF_META
	   */
	  MAC_FF_META: 224, // Firefox (Gecko) fires this for the meta key instead of 91
	  /**
	   * WIN_IME
	   */
	  WIN_IME: 229
	};

	/*
	 whether text and modified key is entered at the same time.
	 */
	KeyCode.isTextModifyingKeyEvent = function (e) {
	  var keyCode = e.keyCode;
	  if (e.altKey && !e.ctrlKey || e.metaKey ||
	  // Function keys don't generate text
	  keyCode >= KeyCode.F1 && keyCode <= KeyCode.F12) {
	    return false;
	  }

	  // The following keys are quite harmless, even in combination with
	  // CTRL, ALT or SHIFT.
	  switch (keyCode) {
	    case KeyCode.ALT:
	    case KeyCode.CAPS_LOCK:
	    case KeyCode.CONTEXT_MENU:
	    case KeyCode.CTRL:
	    case KeyCode.DOWN:
	    case KeyCode.END:
	    case KeyCode.ESC:
	    case KeyCode.HOME:
	    case KeyCode.INSERT:
	    case KeyCode.LEFT:
	    case KeyCode.MAC_FF_META:
	    case KeyCode.META:
	    case KeyCode.NUMLOCK:
	    case KeyCode.NUM_CENTER:
	    case KeyCode.PAGE_DOWN:
	    case KeyCode.PAGE_UP:
	    case KeyCode.PAUSE:
	    case KeyCode.PRINT_SCREEN:
	    case KeyCode.RIGHT:
	    case KeyCode.SHIFT:
	    case KeyCode.UP:
	    case KeyCode.WIN_KEY:
	    case KeyCode.WIN_KEY_RIGHT:
	      return false;
	    default:
	      return true;
	  }
	};

	/*
	 whether character is entered.
	 */
	KeyCode.isCharacterKey = function (keyCode) {
	  if (keyCode >= KeyCode.ZERO && keyCode <= KeyCode.NINE) {
	    return true;
	  }

	  if (keyCode >= KeyCode.NUM_ZERO && keyCode <= KeyCode.NUM_MULTIPLY) {
	    return true;
	  }

	  if (keyCode >= KeyCode.A && keyCode <= KeyCode.Z) {
	    return true;
	  }

	  // Safari sends zero key code for non-latin characters.
	  if (window.navigation.userAgent.indexOf('WebKit') !== -1 && keyCode === 0) {
	    return true;
	  }

	  switch (keyCode) {
	    case KeyCode.SPACE:
	    case KeyCode.QUESTION_MARK:
	    case KeyCode.NUM_PLUS:
	    case KeyCode.NUM_MINUS:
	    case KeyCode.NUM_PERIOD:
	    case KeyCode.NUM_DIVISION:
	    case KeyCode.SEMICOLON:
	    case KeyCode.DASH:
	    case KeyCode.EQUALS:
	    case KeyCode.COMMA:
	    case KeyCode.PERIOD:
	    case KeyCode.SLASH:
	    case KeyCode.APOSTROPHE:
	    case KeyCode.SINGLE_QUOTE:
	    case KeyCode.OPEN_SQUARE_BRACKET:
	    case KeyCode.BACKSLASH:
	    case KeyCode.CLOSE_SQUARE_BRACKET:
	      return true;
	    default:
	      return false;
	  }
	};

		module.exports = KeyCode;

/***/ },
/* 746 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactComponentWithPureRenderMixin
	*/

	"use strict";

	var shallowEqual = __webpack_require__(747);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   var ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
	    return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);
	  }
	};

		module.exports = ReactComponentWithPureRenderMixin;

/***/ },
/* 747 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */

	"use strict";

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */

	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) && (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

		module.exports = shallowEqual;

/***/ },
/* 748 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @returns {function|null}
	 */
	function createChainedFunction() {
	  var args = arguments;

	  return function chainedFunction() {
	    for (var i = 0; i < args.length; i++) {
	      if (args[i] && args[i].apply) {
	        args[i].apply(this, arguments);
	      }
	    }
	  };
	}

		module.exports = createChainedFunction;

/***/ },
/* 749 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var addDOMEventListener = __webpack_require__(750);

	module.exports = addDOMEventListener['default'] || addDOMEventListener;

/***/ },
/* 750 */
[817, 751],
/* 751 */
[818, 752, 753],
/* 752 */
32,
/* 753 */
33,
/* 754 */
/***/ function(module, exports) {

	"use strict";

	module.exports = function (root, node) {
	  while (node) {
	    if (node === root) {
	      return true;
	    }
	    node = node.parentNode;
	  }

	  return false;
		};

/***/ },
/* 755 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(3);

	module.exports = function (children) {
	  var ret = [];
	  React.Children.forEach(children, function (c) {
	    ret.push(c);
	  });
	  return ret;
		};

/***/ },
/* 756 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(3);

	function mirror(o) {
	  return o;
	}

	module.exports = function (children) {
	  // return ReactFragment
	  return React.Children.map(children, mirror);
		};

/***/ },
/* 757 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _rcUtil = __webpack_require__(741);

	var Notice = _react2['default'].createClass({
	  displayName: 'Notice',

	  propTypes: {
	    duration: _react2['default'].PropTypes.number,
	    onClose: _react2['default'].PropTypes.func,
	    children: _react2['default'].PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onEnd: function onEnd() {},
	      duration: 1.5,
	      style: {
	        right: '50%'
	      }
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var _this = this;

	    this.clearCloseTimer();
	    if (this.props.duration) {
	      this.closeTimer = setTimeout(function () {
	        _this.close();
	      }, this.props.duration * 1000);
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    this.componentDidMount();
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this.clearCloseTimer();
	  },

	  clearCloseTimer: function clearCloseTimer() {
	    if (this.closeTimer) {
	      clearTimeout(this.closeTimer);
	      this.closeTimer = null;
	    }
	  },

	  close: function close() {
	    this.clearCloseTimer();
	    this.props.onClose();
	  },

	  render: function render() {
	    var _className;

	    var props = this.props;
	    var componentClass = props.prefixCls + '-notice';
	    var className = (_className = {}, _defineProperty(_className, '' + componentClass, 1), _defineProperty(_className, componentClass + '-closable', props.closable), _defineProperty(_className, props.className, !!props.className), _className);
	    return _react2['default'].createElement('div', { className: (0, _rcUtil.classSet)(className), style: props.style }, _react2['default'].createElement('div', { className: componentClass + '-content' }, this.props.children), props.closable ? _react2['default'].createElement('a', { tabIndex: '0', onClick: this.close, className: componentClass + '-close' }, _react2['default'].createElement('span', { className: componentClass + '-close-x' })) : null);
	  }
	});

	exports['default'] = Notice;
	module.exports = exports['default'];

/***/ },
/* 758 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * Pickable Component for uxcore
	 * @author onbing
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(759);

/***/ },
/* 759 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	/**
	 * Pickable Component for uxcore
	 * @author onbing
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

	var classnames = __webpack_require__(5);
	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);

	var Items = function () {
	  function Items(props, onChange) {
	    _classCallCheck(this, Items);

	    this.onChange = onChange;
	    this.initItems(props.items || []);
	  }

	  Items.prototype.initItems = function initItems(items) {
	    var _this = this;

	    this.items = items ? items.map(function (item) {
	      return new Item(_this, item);
	    }) : [];
	  };

	  Items.prototype.getItems = function getItems() {
	    return this.items;
	  };

	  Items.prototype.removeItem = function removeItem(item) {
	    // trigger
	    var i = this.items.indexOf(item);
	    if (i < 0) {
	      return;
	    }
	    this.items.splice(i, 1);
	    this.onChange(this.getValues(), this.items);
	  };

	  Items.prototype.clear = function clear() {
	    this.items = [];
	    this.onChange([], []);
	  };

	  Items.prototype.checkChange = function checkChange() {
	    this.onChange(this.getCheckedValues(), this.items.map(function (item) {
	      return {
	        text: item.getText(),
	        value: item.getValue(),
	        checked: item.isChecked()
	      };
	    }));
	  };

	  Items.prototype.clearCheck = function clearCheck() {
	    this.items.forEach(function (item) {
	      return item.unCheck();
	    });
	    this.checkChange();
	  };

	  Items.prototype.getCheckedValues = function getCheckedValues() {
	    return this.items.filter(function (item) {
	      return item.isChecked();
	    }).map(function (item) {
	      return item.getValue();
	    });
	  };

	  Items.prototype.getValues = function getValues() {
	    return this.items.map(function (item) {
	      return item.getValue();
	    });
	  };

	  return Items;
	}();

	var Item = function () {
	  function Item(items, options) {
	    _classCallCheck(this, Item);

	    this.value = options.value;
	    this.text = options.text;
	    this.checked = options.checked;
	    this.items = items;
	  }

	  Item.prototype.getKey = function getKey() {
	    return JSON.stringify(this.value) + "-" + this.text;
	  };

	  Item.prototype.remove = function remove() {
	    this.items.removeItem(this);
	  };

	  Item.prototype.unCheck = function unCheck() {
	    this.checked = false;
	  };

	  Item.prototype.isChecked = function isChecked() {
	    return this.checked;
	  };

	  Item.prototype.toggle = function toggle() {
	    if (this.checked) {
	      this.checked = false;
	    } else {
	      this.checked = true;
	    }
	    this.items.checkChange();
	  };

	  Item.prototype.getText = function getText() {
	    return this.text;
	  };

	  Item.prototype.getValue = function getValue() {
	    return this.value;
	  };

	  return Item;
	}();

	var Pickable = function (_React$Component) {
	  _inherits(Pickable, _React$Component);

	  function Pickable(props) {
	    _classCallCheck(this, Pickable);

	    var _this2 = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this2.items = new Items(_this2.props, _this2.onChange.bind(_this2));
	    return _this2;
	  }

	  Pickable.prototype.onChange = function onChange(values, items) {
	    this.props.onChange && this.props.onChange(values, items);
	    this.setState({});
	  };

	  Pickable.prototype.values = function values() {
	    return this.items.getCheckedValues();
	  };

	  Pickable.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.items) {
	      this.items.initItems(nextProps.items);
	    }
	  };

	  Pickable.prototype.render = function render() {
	    var _this3 = this;

	    var items = this.items.getCheckedValues();
	    var hideClear = this.props.autoHideClear && items.length < 1;
	    return React.createElement('ul', { className: classnames("kuma-pickable", this.props.className) }, this.items.getItems().map(function (item) {
	      return React.createElement('li', { key: item.getKey(), className: classnames("kuma-pickable-item", item.isChecked() && "checked"), onClick: function onClick() {
	          item.toggle();
	        } }, React.createElement('span', { className: 'kuma-pickable-text' }, item.getText()), item.isChecked() && React.createElement('i', { className: 'kuma-icon kuma-icon-choose badge' }));
	    }), this.props.hasClear && !hideClear && React.createElement('li', { className: 'kuma-pickable-clear', onClick: function onClick() {
	        _this3.items.clearCheck();
	      } }, '清除所选'));
	  };

	  return Pickable;
	}(React.Component);

	var Removeable = function (_React$Component2) {
	  _inherits(Removeable, _React$Component2);

	  function Removeable(props) {
	    _classCallCheck(this, Removeable);

	    var _this4 = _possibleConstructorReturn(this, _React$Component2.call(this, props));

	    _this4.items = new Items(_this4.props, _this4.onChange.bind(_this4));
	    return _this4;
	  }

	  Removeable.prototype.onChange = function onChange(values, items) {
	    this.props.onChange && this.props.onChange(values, items);
	    this.setState({});
	  };

	  Removeable.prototype.values = function values() {
	    return this.items.getValues();
	  };

	  Removeable.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.items) {
	      this.items.initItems(nextProps.items);
	    }
	  };

	  Removeable.prototype.render = function render() {
	    var _this5 = this;

	    var items = this.items.getItems();
	    var hideClear = this.props.autoHideClear && items.length < 1;
	    return React.createElement('ul', { className: classnames("kuma-pickable", "kuma-pickable-removeable", this.props.className) }, items.map(function (item) {
	      return React.createElement('li', { key: item.getKey(), className: 'kuma-pickable-item' }, React.createElement('span', { className: 'kuma-pickable-text' }, item.getText()), React.createElement('i', { className: 'kuma-icon kuma-icon-close remover', onClick: function onClick() {
	          return item.remove();
	        } }));
	    }), this.props.hasClear && !hideClear && React.createElement('li', { className: 'kuma-pickable-clear', onClick: function onClick() {
	        _this5.items.clear();
	      } }, '清除所选'));
	  };

	  return Removeable;
	}(React.Component);

	Removeable.defaultProps = {
	  items: null,
	  hasClear: true,
	  autoHideClear: true,
	  onChange: null
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	Removeable.propTypes = {
	  hasClear: React.PropTypes.bool,
	  autoHideClear: React.PropTypes.bool,
	  items: React.PropTypes.array,
	  onChange: React.PropTypes.func
	};

	Removeable.displayName = "Removeable";

	Pickable.Removeable = Removeable;

	Pickable.defaultProps = {
	  items: null,
	  hasClear: true,
	  autoHideClear: true,
	  onChange: null
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	Pickable.propTypes = {
	  hasClear: React.PropTypes.bool,
	  autoHideClear: React.PropTypes.bool,
	  items: React.PropTypes.array,
	  onChange: React.PropTypes.func
	};

	Pickable.displayName = "Pickable";

	module.exports = Pickable;

/***/ },
/* 760 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * PrimaryNav Component for uxcore
	 * @author eternaslky
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(761);

/***/ },
/* 761 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _uxcoreMenu = __webpack_require__(762);

	var _uxcoreMenu2 = _interopRequireDefault(_uxcoreMenu);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * PrimaryNav Component for uxcore
	   * @author eternaslky
	   *
	   * Copyright 2014-2015, Uxcore Team, Alinw.
	   * All rights reserved.
	   */

	var PrimaryNav = function (_React$Component) {
	    _inherits(PrimaryNav, _React$Component);

	    function PrimaryNav(props) {
	        _classCallCheck(this, PrimaryNav);

	        return _possibleConstructorReturn(this, _React$Component.call(this, props));
	    }

	    PrimaryNav.prototype.onSwitchLang = function onSwitchLang(e) {
	        e.preventDefault();
	        this.props.onChangeI18n(this.props.lang, e);
	    };

	    PrimaryNav.prototype.getPrimaryMenu = function getPrimaryMenu() {
	        var props = this.props;
	        return _react2["default"].createElement(_uxcoreMenu2["default"], { mode: 'horizontal', prefixCls: 'main-menu', selectedKeys: props.selectedKeys, defaultSelectedKeys: props.defaultSelectedKeys }, props.primaryNavItems.map(function (item, idx) {
	            var menuItem = void 0,
	                textNode = void 0;
	            if (item.subItems && item.subItems.length > 0) {
	                menuItem = _react2["default"].createElement(_uxcoreMenu.SubMenu, { title: item.text, key: 'primary_item_' + idx }, item.subItems.map(function (subItem, subIdx) {
	                    var subTextNode = void 0;
	                    if (subItem.url) {
	                        subTextNode = _react2["default"].createElement('a', { href: subItem.url, target: subItem.target }, subItem.text);
	                    } else {
	                        subTextNode = subItem.text;
	                    }
	                    return _react2["default"].createElement(_uxcoreMenu.Item, { key: 'primary_item_' + idx + '_' + subIdx }, subTextNode);
	                }));
	            } else {
	                if (item.url) {
	                    textNode = _react2["default"].createElement('a', { href: item.url, target: item.target }, item.text);
	                } else {
	                    textNode = item.text;
	                }
	                menuItem = _react2["default"].createElement(_uxcoreMenu.Item, { key: 'primary_item_' + idx }, textNode);
	            }
	            return menuItem;
	        }));
	    };

	    PrimaryNav.prototype.getSecondaryMenu = function getSecondaryMenu() {
	        var props = this.props;
	        return _react2["default"].createElement(_uxcoreMenu2["default"], { mode: 'horizontal', prefixCls: 'secondary-menu' }, props.secondaryNavItems.map(function (item, idx) {
	            var textNode = void 0;
	            if (item.url) {
	                textNode = textNode = _react2["default"].createElement('a', { href: item.url, target: item.target }, item.text);
	            } else {
	                textNode = item.text;
	            }
	            return _react2["default"].createElement(_uxcoreMenu.Item, { key: 'secondary_item_' + idx }, textNode);
	        }));
	    };

	    PrimaryNav.prototype.onClickSearchButton = function onClickSearchButton(e) {
	        var searchField = this.refs.searchField;
	        this.props.onSearch(searchField.value, searchField);
	    };

	    PrimaryNav.prototype.onPressField = function onPressField(e) {
	        if (e.keyCode === 13) {
	            var searchField = this.refs.searchField;
	            this.props.onSearch(searchField.value, searchField);
	        }
	    };

	    PrimaryNav.prototype.render = function render() {
	        var props = this.props,
	            langSwitch = void 0,
	            ret = void 0,
	            navClass = void 0,
	            searchField = void 0;
	        if (props.hasGlobalSearch) {
	            searchField = _react2["default"].createElement('div', { className: 'navigation-search' }, _react2["default"].createElement('input', {
	                ref: 'searchField',
	                type: 'text',
	                className: 'navigation-search-field',
	                onKeyUp: this.onPressField.bind(this),
	                placeholder: props.searchPlaceholder }), _react2["default"].createElement('button', { className: 'navigation-search-button', onClick: this.onClickSearchButton.bind(this) }, _react2["default"].createElement('i', { className: 'kuma-icon kuma-icon-search' })));
	        }
	        if (props.fullWidth) {
	            if (props.showLangSwitch) {
	                langSwitch = _react2["default"].createElement('a', { href: '#', onClick: this.onSwitchLang.bind(this), className: 'lang-switch' }, props.lang);
	            } else {
	                langSwitch = null;
	            }
	            navClass = (0, _classnames2["default"])({
	                'kuma-container-full': true,
	                'kuma-primary-navigation': true,
	                'kuma-primary-navigation-search': props.hasGlobalSearch,
	                'kuma-nw-uxcore': true,
	                'lang-en': props.locale === 'en',
	                'logo_ali': props.logoType === 'ali',
	                'logo_ant': props.logoType === 'ant'
	            });
	            ret = _react2["default"].createElement('div', { className: navClass }, _react2["default"].createElement('div', { className: 'kuma-pn-brand' }, _react2["default"].createElement('a', { href: 'https://work.alibaba-inc.com', className: 'site-logo', target: '_blank' }), _react2["default"].createElement('h2', { className: 'site-brand' }, _react2["default"].createElement('a', { href: props.systemLink }, props.systemName))), _react2["default"].createElement('div', { className: 'kuma-pn-main' }, searchField, _react2["default"].createElement('div', { className: 'kuma-pn-menu' }, this.getPrimaryMenu()), _react2["default"].createElement('div', { className: 'kuma-pn-lang' }, langSwitch), _react2["default"].createElement('div', { className: 'kuma-pn-secondary-menu' }, this.getSecondaryMenu())));
	        } else {
	            if (props.showLangSwitch) {
	                langSwitch = _react2["default"].createElement('a', { href: '#', onClick: this.onSwitchLang.bind(this), className: 'lang-switch' }, props.lang);
	            } else {
	                langSwitch = null;
	            }
	            navClass = (0, _classnames2["default"])({
	                'fn-border-box': true,
	                'kuma-primary-navigation': true,
	                'kuma-primary-navigation-search': props.hasGlobalSearch,
	                'kuma-nw-uxcore': true,
	                'lang-en': props.locale === 'en',
	                'logo_ali': props.logoType === 'ali',
	                'logo_ant': props.logoType === 'ant'
	            });
	            var content = void 0;
	            if (props.hasGlobalSearch) {
	                ret = _react2["default"].createElement('div', { className: navClass }, _react2["default"].createElement('div', { className: 'kuma-container-1180' }, _react2["default"].createElement('div', { className: 'kuma-row' }, _react2["default"].createElement('div', { className: 'col-xs-7' }, _react2["default"].createElement('a', { href: 'https://work.alibaba-inc.com', className: 'site-logo', target: '_blank' }), _react2["default"].createElement('h2', { className: 'site-brand' }, _react2["default"].createElement('a', { href: props.systemLink }, props.systemName))), _react2["default"].createElement('div', { className: 'col-xs-7' }, searchField), _react2["default"].createElement('div', { className: 'col-xs-8' }, this.getPrimaryMenu()), _react2["default"].createElement('div', { className: 'col-xs-2' }, _react2["default"].createElement('div', { className: 'site-right' }, langSwitch)))));
	            } else {
	                ret = _react2["default"].createElement('div', { className: navClass }, _react2["default"].createElement('div', { className: 'kuma-container-1180' }, _react2["default"].createElement('div', { className: 'kuma-row' }, _react2["default"].createElement('div', { className: 'col-xs-7' }, _react2["default"].createElement('a', { href: 'https://work.alibaba-inc.com', className: 'site-logo', target: '_blank' }), _react2["default"].createElement('h2', { className: 'site-brand' }, _react2["default"].createElement('a', { href: props.systemLink }, props.systemName))), _react2["default"].createElement('div', { className: 'col-xs-11' }, this.getPrimaryMenu()), _react2["default"].createElement('div', { className: 'col-xs-6' }, _react2["default"].createElement('div', { className: 'site-right' }, this.getSecondaryMenu(), langSwitch)))));
	            }
	        }
	        return ret;
	    };

	    return PrimaryNav;
	}(_react2["default"].Component);

	PrimaryNav.defaultProps = {
	    systemName: '系统名称',
	    primaryNavItems: [],
	    secondaryNavItems: [],
	    showLangSwitch: true,
	    lang: 'EN',
	    fullWidth: false,
	    onChangeI18n: function onChangeI18n(lang, e) {},
	    locale: 'zh-cn',
	    systemLink: '#',
	    hasGlobalSearch: false,
	    searchPlaceholder: '搜索',
	    onSearch: function onSearch(value, input) {},
	    selectedKeys: [],
	    defaultSelectedKeys: [],
	    logoType: 'default'
	};

	// http://facebook.github.io/react/docs/reusable-components.html
	PrimaryNav.propTypes = {
	    systemName: _react2["default"].PropTypes.string,
	    primaryNavItems: _react2["default"].PropTypes.array,
	    secondaryNavItems: _react2["default"].PropTypes.array,
	    showLangSwitch: _react2["default"].PropTypes.bool,
	    fullWidth: _react2["default"].PropTypes.bool,
	    lang: _react2["default"].PropTypes.string,
	    onChangeI18n: _react2["default"].PropTypes.func,
	    locale: _react2["default"].PropTypes.oneOf(['zh-cn', 'en']),
	    systemLink: _react2["default"].PropTypes.string,
	    hasGlobalSearch: _react2["default"].PropTypes.bool,
	    searchPlaceholder: _react2["default"].PropTypes.string,
	    onSearch: _react2["default"].PropTypes.func,
	    selectedKeys: _react2["default"].PropTypes.array,
	    defaultSelectedKeys: _react2["default"].PropTypes.array,
	    logoType: _react2["default"].PropTypes.oneOf(['default', 'ali', 'ant'])
	};

	PrimaryNav.displayName = 'PrimaryNav';

	module.exports = PrimaryNav;

/***/ },
/* 762 */
[853, 763],
/* 763 */
[854, 764],
/* 764 */
[843, 765, 793, 805, 806, 807],
/* 765 */
[844, 766, 784, 791],
/* 766 */
[845, 767, 788, 784, 791, 792],
/* 767 */
[810, 768, 769, 771, 772, 773, 774, 779, 780, 785, 786, 787],
/* 768 */
17,
/* 769 */
[811, 770],
/* 770 */
19,
/* 771 */
[812, 770],
/* 772 */
21,
/* 773 */
[813, 774],
/* 774 */
[814, 775],
/* 775 */
[815, 776, 777, 778],
/* 776 */
25,
/* 777 */
26,
/* 778 */
27,
/* 779 */
28,
/* 780 */
[816, 781],
/* 781 */
[817, 782],
/* 782 */
[818, 783, 784],
/* 783 */
32,
/* 784 */
33,
/* 785 */
34,
/* 786 */
35,
/* 787 */
36,
/* 788 */
[846, 789],
/* 789 */
[847, 790],
/* 790 */
403,
/* 791 */
404,
/* 792 */
[848, 784],
/* 793 */
[849, 794, 767, 784, 804],
/* 794 */
[850, 766, 784, 791, 795],
/* 795 */
[831, 796],
/* 796 */
[832, 797, 798, 803],
/* 797 */
77,
/* 798 */
[833, 799, 803],
/* 799 */
[834, 800, 801],
/* 800 */
80,
/* 801 */
[835, 802, 802],
/* 802 */
82,
/* 803 */
83,
/* 804 */
[851, 767],
/* 805 */
[852, 767],
/* 806 */
410,
/* 807 */
411,
/* 808 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	/*
	 * GregorianCalendar class
	 * @ignore
	 * @author yiminghe@gmail.com
	 */
	'use strict';

	var toInt = parseInt;
	var Utils = __webpack_require__(__webpack_module_template_argument_0__);
	var defaultLocale = __webpack_require__(__webpack_module_template_argument_1__);
	var Const = __webpack_require__(__webpack_module_template_argument_2__);

	/*
	 * GregorianCalendar class.
	 *
	 * - no arguments:
	 *   Constructs a default GregorianCalendar using the current time
	 *   in the default time zone with the default locale.
	 * - one argument locale:
	 *   Constructs a GregorianCalendar
	 *   based on the current time in the default time zone with the given locale.
	 *
	 * @class Date.Gregorian
	 */
	function GregorianCalendar(loc) {
	  var locale = loc || defaultLocale;

	  this.locale = locale;

	  this.fields = [];

	  /*
	   * The currently set time for this date.
	   * @protected
	   * @type Number|undefined
	   */
	  this.time = undefined;
	  /*
	   * The timezoneOffset in minutes used by this date.
	   * @type Number
	   * @protected
	   */

	  this.timezoneOffset = locale.timezoneOffset;

	  /*
	   * The first day of the week
	   * @type Number
	   * @protected
	   */
	  this.firstDayOfWeek = locale.firstDayOfWeek;

	  /*
	   * The number of days required for the first week in a month or year,
	   * with possible values from 1 to 7.
	   * @@protected
	   * @type Number
	   */
	  this.minimalDaysInFirstWeek = locale.minimalDaysInFirstWeek;

	  this.fieldsComputed = false;
	}

	Utils.mix(GregorianCalendar, Const);

	Utils.mix(GregorianCalendar, {
	  Utils: Utils,

	  defaultLocale: defaultLocale,

	  /*
	   * Determines if the given year is a leap year.
	   * Returns true if the given year is a leap year. To specify BC year numbers,
	   * 1 - year number must be given. For example, year BC 4 is specified as -3.
	   * @param {Number} year the given year.
	   * @returns {Boolean} true if the given year is a leap year; false otherwise.
	   * @static
	   * @method
	   */
	  isLeapYear: Utils.isLeapYear,

	  /*
	   * Enum indicating year field of date
	   * @type Number
	   */
	  YEAR: 1,
	  /*
	   * Enum indicating month field of date
	   * @type Number
	   */
	  MONTH: 2,
	  /*
	   * Enum indicating the day of the month
	   * @type Number
	   */
	  DAY_OF_MONTH: 3,
	  /*
	   * Enum indicating the hour (24).
	   * @type Number
	   */
	  HOUR_OF_DAY: 4,
	  /*
	   * Enum indicating the minute of the day
	   * @type Number
	   */
	  MINUTES: 5,
	  /*
	   * Enum indicating the second of the day
	   * @type Number
	   */
	  SECONDS: 6,
	  /*
	   * Enum indicating the millisecond of the day
	   * @type Number
	   */
	  MILLISECONDS: 7,
	  /*
	   * Enum indicating the week number within the current year
	   * @type Number
	   */
	  WEEK_OF_YEAR: 8,
	  /*
	   * Enum indicating the week number within the current month
	   * @type Number
	   */
	  WEEK_OF_MONTH: 9,

	  /*
	   * Enum indicating the day of the day number within the current year
	   * @type Number
	   */
	  DAY_OF_YEAR: 10,
	  /*
	   * Enum indicating the day of the week
	   * @type Number
	   */
	  DAY_OF_WEEK: 11,
	  /*
	   * Enum indicating the day of the ordinal number of the day of the week
	   * @type Number
	   */
	  DAY_OF_WEEK_IN_MONTH: 12,

	  /*
	   * Enum indicating am
	   * @type Number
	   */
	  AM: 0,
	  /*
	   * Enum indicating pm
	   * @type Number
	   */
	  PM: 1
	});

	var FIELDS = ['', 'Year', 'Month', 'DayOfMonth', 'HourOfDay', 'Minutes', 'Seconds', 'Milliseconds', 'WeekOfYear', 'WeekOfMonth', 'DayOfYear', 'DayOfWeek', 'DayOfWeekInMonth'];

	var YEAR = GregorianCalendar.YEAR;
	var MONTH = GregorianCalendar.MONTH;
	var DAY_OF_MONTH = GregorianCalendar.DAY_OF_MONTH;
	var HOUR_OF_DAY = GregorianCalendar.HOUR_OF_DAY;
	var MINUTE = GregorianCalendar.MINUTES;
	var SECONDS = GregorianCalendar.SECONDS;

	var MILLISECONDS = GregorianCalendar.MILLISECONDS;
	var DAY_OF_WEEK_IN_MONTH = GregorianCalendar.DAY_OF_WEEK_IN_MONTH;
	var DAY_OF_YEAR = GregorianCalendar.DAY_OF_YEAR;
	var DAY_OF_WEEK = GregorianCalendar.DAY_OF_WEEK;

	var WEEK_OF_MONTH = GregorianCalendar.WEEK_OF_MONTH;
	var WEEK_OF_YEAR = GregorianCalendar.WEEK_OF_YEAR;

	var MONTH_LENGTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // 0-based
	var LEAP_MONTH_LENGTH = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // 0-based

	var ONE_SECOND = 1000;
	var ONE_MINUTE = 60 * ONE_SECOND;
	var ONE_HOUR = 60 * ONE_MINUTE;
	var ONE_DAY = 24 * ONE_HOUR;
	var ONE_WEEK = ONE_DAY * 7;

	var EPOCH_OFFSET = 719163; // Fixed date of January 1, 1970 (Gregorian)

	var mod = Utils.mod;
	var _isLeapYear = Utils.isLeapYear;
	var floorDivide = Math.floor;

	var MIN_VALUES = [undefined, 1, // YEAR
	GregorianCalendar.JANUARY, // MONTH
	1, // DAY_OF_MONTH
	0, // HOUR_OF_DAY
	0, // MINUTE
	0, // SECONDS
	0, // MILLISECONDS

	1, // WEEK_OF_YEAR
	undefined, // WEEK_OF_MONTH

	1, // DAY_OF_YEAR
	GregorianCalendar.SUNDAY, // DAY_OF_WEEK
	1];

	// DAY_OF_WEEK_IN_MONTH
	var MAX_VALUES = [undefined, 292278994, // YEAR
	GregorianCalendar.DECEMBER, // MONTH
	undefined, // DAY_OF_MONTH
	23, // HOUR_OF_DAY
	59, // MINUTE
	59, // SECONDS
	999, // MILLISECONDS
	undefined, // WEEK_OF_YEAR
	undefined, // WEEK_OF_MONTH
	undefined, // DAY_OF_YEAR
	GregorianCalendar.SATURDAY, // DAY_OF_WEEK
	undefined];

	// ------------------- private start

	// DAY_OF_WEEK_IN_MONTH
	function getMonthLength(year, month) {
	  return _isLeapYear(year) ? LEAP_MONTH_LENGTH[month] : MONTH_LENGTH[month];
	}

	function getYearLength(year) {
	  return _isLeapYear(year) ? 366 : 365;
	}

	function adjustDayOfMonth(self) {
	  var fields = self.fields;
	  var year = fields[YEAR];
	  var month = fields[MONTH];
	  var monthLen = getMonthLength(year, month);
	  var dayOfMonth = fields[DAY_OF_MONTH];
	  if (dayOfMonth > monthLen) {
	    self.set(DAY_OF_MONTH, monthLen);
	  }
	}

	function getDayOfWeekDateOnOrBefore(fixedDate, dayOfWeek) {
	  // 1.1.1 is monday
	  // one week has 7 days
	  return fixedDate - mod(fixedDate - dayOfWeek, 7);
	}

	function getWeekNumber(self, fixedDay1, fixedDate) {
	  var fixedDay1st = getDayOfWeekDateOnOrBefore(fixedDay1 + 6, self.firstDayOfWeek);
	  var nDays = fixedDay1st - fixedDay1;
	  if (nDays >= self.minimalDaysInFirstWeek) {
	    fixedDay1st -= 7;
	  }
	  var normalizedDayOfPeriod = fixedDate - fixedDay1st;
	  return floorDivide(normalizedDayOfPeriod / 7) + 1;
	}

	// ------------------- private end

	GregorianCalendar.prototype = {
	  constructor: GregorianCalendar,

	  isGregorianCalendar: 1,

	  /*
	   * Determines if current year is a leap year.
	   * Returns true if the given year is a leap year. To specify BC year numbers,
	   * 1 - year number must be given. For example, year BC 4 is specified as -3.
	   * @returns {Boolean} true if the given year is a leap year; false otherwise.
	   * @method
	   * @member Date.Gregorian
	   */
	  isLeapYear: function isLeapYear() {
	    return _isLeapYear(this.getYear());
	  },

	  /*
	   * Return local info for current date instance
	   * @returns {Object}
	   */
	  getLocale: function getLocale() {
	    return this.locale;
	  },

	  /*
	   * Returns the minimum value for
	   * the given calendar field of this GregorianCalendar instance.
	   * The minimum value is defined as the smallest value
	   * returned by the get method for any possible time value,
	   * taking into consideration the current values of the getFirstDayOfWeek,
	   * getMinimalDaysInFirstWeek.
	   * @param field the calendar field.
	   * @returns {Number} the minimum value for the given calendar field.
	   */
	  getActualMinimum: function getActualMinimum(field) {
	    if (MIN_VALUES[field] !== undefined) {
	      return MIN_VALUES[field];
	    }
	    if (field === WEEK_OF_MONTH) {
	      var cal = this.clone();
	      cal.clear();
	      cal.set(this.fields[YEAR], this.fields[MONTH], 1);
	      return cal.get(WEEK_OF_MONTH);
	    }

	    throw new Error('minimum value not defined!');
	  },

	  /*
	   * Returns the maximum value for the given calendar field
	   * of this GregorianCalendar instance.
	   * The maximum value is defined as the largest value returned
	   * by the get method for any possible time value, taking into consideration
	   * the current values of the getFirstDayOfWeek, getMinimalDaysInFirstWeek methods.
	   * @param field the calendar field.
	   * @returns {Number} the maximum value for the given calendar field.
	   */
	  getActualMaximum: function getActualMaximum(field) {
	    if (MAX_VALUES[field] !== undefined) {
	      return MAX_VALUES[field];
	    }
	    var value = undefined;
	    var fields = this.fields;
	    switch (field) {
	      case DAY_OF_MONTH:
	        value = getMonthLength(fields[YEAR], fields[MONTH]);
	        break;

	      case WEEK_OF_YEAR:
	        var endOfYear = this.clone();
	        endOfYear.clear();
	        endOfYear.set(fields[YEAR], GregorianCalendar.DECEMBER, 31);
	        value = endOfYear.get(WEEK_OF_YEAR);
	        if (value === 1) {
	          value = 52;
	        }
	        break;

	      case WEEK_OF_MONTH:
	        var endOfMonth = this.clone();
	        endOfMonth.clear();
	        endOfMonth.set(fields[YEAR], fields[MONTH], getMonthLength(fields[YEAR], fields[MONTH]));
	        value = endOfMonth.get(WEEK_OF_MONTH);
	        break;

	      case DAY_OF_YEAR:
	        value = getYearLength(fields[YEAR]);
	        break;

	      case DAY_OF_WEEK_IN_MONTH:
	        value = toInt((getMonthLength(fields[YEAR], fields[MONTH]) - 1) / 7) + 1;
	        break;
	      default:
	        break;
	    }
	    if (value === undefined) {
	      throw new Error('maximum value not defined!');
	    }
	    return value;
	  },

	  /*
	   * Determines if the given calendar field has a value set,
	   * including cases that the value has been set by internal fields calculations
	   * triggered by a get method call.
	   * @param field the calendar field to be cleared.
	   * @returns {boolean} true if the given calendar field has a value set; false otherwise.
	   */
	  isSet: function isSet(field) {
	    return this.fields[field] !== undefined;
	  },

	  /*
	   * Converts the time value (millisecond offset from the Epoch)
	   * to calendar field values.
	   * @protected
	   */
	  computeFields: function computeFields() {
	    var time = this.time;
	    var timezoneOffset = this.timezoneOffset * ONE_MINUTE;
	    var fixedDate = toInt(timezoneOffset / ONE_DAY);
	    var timeOfDay = timezoneOffset % ONE_DAY;
	    fixedDate += toInt(time / ONE_DAY);
	    timeOfDay += time % ONE_DAY;
	    if (timeOfDay >= ONE_DAY) {
	      timeOfDay -= ONE_DAY;
	      fixedDate++;
	    } else {
	      while (timeOfDay < 0) {
	        timeOfDay += ONE_DAY;
	        fixedDate--;
	      }
	    }

	    fixedDate += EPOCH_OFFSET;

	    var date = Utils.getGregorianDateFromFixedDate(fixedDate);

	    var year = date.year;

	    var fields = this.fields;
	    fields[YEAR] = year;
	    fields[MONTH] = date.month;
	    fields[DAY_OF_MONTH] = date.dayOfMonth;
	    fields[DAY_OF_WEEK] = date.dayOfWeek;

	    if (timeOfDay !== 0) {
	      fields[HOUR_OF_DAY] = toInt(timeOfDay / ONE_HOUR);
	      var r = timeOfDay % ONE_HOUR;
	      fields[MINUTE] = toInt(r / ONE_MINUTE);
	      r %= ONE_MINUTE;
	      fields[SECONDS] = toInt(r / ONE_SECOND);
	      fields[MILLISECONDS] = r % ONE_SECOND;
	    } else {
	      fields[HOUR_OF_DAY] = fields[MINUTE] = fields[SECONDS] = fields[MILLISECONDS] = 0;
	    }

	    var fixedDateJan1 = Utils.getFixedDate(year, GregorianCalendar.JANUARY, 1);
	    var dayOfYear = fixedDate - fixedDateJan1 + 1;
	    var fixDateMonth1 = fixedDate - date.dayOfMonth + 1;

	    fields[DAY_OF_YEAR] = dayOfYear;
	    fields[DAY_OF_WEEK_IN_MONTH] = toInt((date.dayOfMonth - 1) / 7) + 1;

	    var weekOfYear = getWeekNumber(this, fixedDateJan1, fixedDate);

	    // 本周没有足够的时间在当前年
	    if (weekOfYear === 0) {
	      // If the date belongs to the last week of the
	      // previous year, use the week number of "12/31" of
	      // the "previous" year.
	      var fixedDec31 = fixedDateJan1 - 1;
	      var prevJan1 = fixedDateJan1 - getYearLength(year - 1);
	      weekOfYear = getWeekNumber(this, prevJan1, fixedDec31);
	    } else
	      // 本周是年末最后一周，可能有足够的时间在新的一年
	      if (weekOfYear >= 52) {
	        var nextJan1 = fixedDateJan1 + getYearLength(year);
	        var nextJan1st = getDayOfWeekDateOnOrBefore(nextJan1 + 6, this.firstDayOfWeek);
	        var nDays = nextJan1st - nextJan1;
	        // 本周有足够天数在新的一年
	        if (nDays >= this.minimalDaysInFirstWeek &&
	        // 当天确实在本周，weekOfYear === 53 时是不需要这个判断
	        fixedDate >= nextJan1st - 7) {
	          weekOfYear = 1;
	        }
	      }

	    fields[WEEK_OF_YEAR] = weekOfYear;
	    fields[WEEK_OF_MONTH] = getWeekNumber(this, fixDateMonth1, fixedDate);

	    this.fieldsComputed = true;
	  },

	  /*
	   * Converts calendar field values to the time value
	   * (millisecond offset from the Epoch).
	   * @protected
	   */
	  computeTime: function computeTime() {
	    var year = undefined;
	    var fields = this.fields;
	    if (this.isSet(YEAR)) {
	      year = fields[YEAR];
	    } else {
	      year = new Date().getFullYear();
	    }
	    var timeOfDay = 0;
	    if (this.isSet(HOUR_OF_DAY)) {
	      timeOfDay += fields[HOUR_OF_DAY];
	    }
	    timeOfDay *= 60;
	    timeOfDay += fields[MINUTE] || 0;
	    timeOfDay *= 60;
	    timeOfDay += fields[SECONDS] || 0;
	    timeOfDay *= 1000;
	    timeOfDay += fields[MILLISECONDS] || 0;
	    var fixedDate = 0;
	    fields[YEAR] = year;
	    fixedDate = fixedDate + this.getFixedDate();
	    // millis represents local wall-clock time in milliseconds.
	    var millis = (fixedDate - EPOCH_OFFSET) * ONE_DAY + timeOfDay;
	    millis -= this.timezoneOffset * ONE_MINUTE;
	    this.time = millis;
	    this.computeFields();
	  },

	  /*
	   * Fills in any unset fields in the calendar fields. First,
	   * the computeTime() method is called if the time value (millisecond offset from the Epoch)
	   * has not been calculated from calendar field values.
	   * Then, the computeFields() method is called to calculate all calendar field values.
	   * @protected
	   */
	  complete: function complete() {
	    if (this.time === undefined) {
	      this.computeTime();
	    }
	    if (!this.fieldsComputed) {
	      this.computeFields();
	    }
	  },

	  getFixedDate: function getFixedDate() {
	    var self = this;

	    var fields = self.fields;

	    var firstDayOfWeekCfg = self.firstDayOfWeek;

	    var year = fields[YEAR];

	    var month = GregorianCalendar.JANUARY;

	    if (self.isSet(MONTH)) {
	      month = fields[MONTH];
	      if (month > GregorianCalendar.DECEMBER) {
	        year += toInt(month / 12);
	        month %= 12;
	      } else if (month < GregorianCalendar.JANUARY) {
	        year += floorDivide(month / 12);
	        month = mod(month, 12);
	      }
	    }

	    // Get the fixed date since Jan 1, 1 (Gregorian). We are on
	    // the first day of either `month' or January in 'year'.
	    var fixedDate = Utils.getFixedDate(year, month, 1);
	    var firstDayOfWeek = undefined;
	    var dayOfWeek = self.firstDayOfWeek;

	    if (self.isSet(DAY_OF_WEEK)) {
	      dayOfWeek = fields[DAY_OF_WEEK];
	    }

	    if (self.isSet(MONTH)) {
	      if (self.isSet(DAY_OF_MONTH)) {
	        fixedDate += fields[DAY_OF_MONTH] - 1;
	      } else {
	        if (self.isSet(WEEK_OF_MONTH)) {
	          firstDayOfWeek = getDayOfWeekDateOnOrBefore(fixedDate + 6, firstDayOfWeekCfg);

	          // If we have enough days in the first week, then
	          // move to the previous week.
	          if (firstDayOfWeek - fixedDate >= self.minimalDaysInFirstWeek) {
	            firstDayOfWeek -= 7;
	          }

	          if (dayOfWeek !== firstDayOfWeekCfg) {
	            firstDayOfWeek = getDayOfWeekDateOnOrBefore(firstDayOfWeek + 6, dayOfWeek);
	          }

	          fixedDate = firstDayOfWeek + 7 * (fields[WEEK_OF_MONTH] - 1);
	        } else {
	          var dowim = undefined;
	          if (self.isSet(DAY_OF_WEEK_IN_MONTH)) {
	            dowim = fields[DAY_OF_WEEK_IN_MONTH];
	          } else {
	            dowim = 1;
	          }
	          var lastDate = 7 * dowim;
	          if (dowim < 0) {
	            lastDate = getMonthLength(year, month) + 7 * (dowim + 1);
	          }
	          fixedDate = getDayOfWeekDateOnOrBefore(fixedDate + lastDate - 1, dayOfWeek);
	        }
	      }
	    } else {
	      // We are on the first day of the year.
	      if (self.isSet(DAY_OF_YEAR)) {
	        fixedDate += fields[DAY_OF_YEAR] - 1;
	      } else if (self.isSet(WEEK_OF_YEAR)) {
	        firstDayOfWeek = getDayOfWeekDateOnOrBefore(fixedDate + 6, firstDayOfWeekCfg);
	        // If we have enough days in the first week, then move
	        // to the previous week.
	        if (firstDayOfWeek - fixedDate >= self.minimalDaysInFirstWeek) {
	          firstDayOfWeek -= 7;
	        }
	        if (dayOfWeek !== firstDayOfWeekCfg) {
	          firstDayOfWeek = getDayOfWeekDateOnOrBefore(firstDayOfWeek + 6, dayOfWeek);
	        }
	        fixedDate = firstDayOfWeek + 7 * (fields[WEEK_OF_YEAR] - 1);
	      }
	    }

	    return fixedDate;
	  },

	  /*
	   * Returns this Calendar's time value in milliseconds
	   * @member Date.Gregorian
	   * @returns {Number} the current time as UTC milliseconds from the epoch.
	   */
	  getTime: function getTime() {
	    if (this.time === undefined) {
	      this.computeTime();
	    }
	    return this.time;
	  },

	  /*
	   * Sets this Calendar's current time from the given long value.
	   * @param time the new time in UTC milliseconds from the epoch.
	   */
	  setTime: function setTime(time) {
	    this.time = time;
	    this.fieldsComputed = false;
	    this.complete();
	  },

	  /*
	   * Returns the value of the given calendar field.
	   * @param field the given calendar field.
	   * @returns {Number} the value for the given calendar field.
	   */
	  get: function get(field) {
	    this.complete();
	    return this.fields[field];
	  },

	  /*
	   * Returns the year of the given calendar field.
	   * @method getYear
	   * @returns {Number} the year for the given calendar field.
	   */

	  /*
	   * Returns the month of the given calendar field.
	   * @method getMonth
	   * @returns {Number} the month for the given calendar field.
	   */

	  /*
	   * Returns the day of month of the given calendar field.
	   * @method getDayOfMonth
	   * @returns {Number} the day of month for the given calendar field.
	   */

	  /*
	   * Returns the hour of day of the given calendar field.
	   * @method getHourOfDay
	   * @returns {Number} the hour of day for the given calendar field.
	   */

	  /*
	   * Returns the minute of the given calendar field.
	   * @method getMinute
	   * @returns {Number} the minute for the given calendar field.
	   */

	  /*
	   * Returns the second of the given calendar field.
	   * @method getSecond
	   * @returns {Number} the second for the given calendar field.
	   */

	  /*
	   * Returns the millisecond of the given calendar field.
	   * @method getMilliSecond
	   * @returns {Number} the millisecond for the given calendar field.
	   */

	  /*
	   * Returns the week of year of the given calendar field.
	   * @method getWeekOfYear
	   * @returns {Number} the week of year for the given calendar field.
	   */

	  /*
	   * Returns the week of month of the given calendar field.
	   * @method getWeekOfMonth
	   * @returns {Number} the week of month for the given calendar field.
	   */

	  /*
	   * Returns the day of year of the given calendar field.
	   * @method getDayOfYear
	   * @returns {Number} the day of year for the given calendar field.
	   */

	  /*
	   * Returns the day of week of the given calendar field.
	   * @method getDayOfWeek
	   * @returns {Number} the day of week for the given calendar field.
	   */

	  /*
	   * Returns the day of week in month of the given calendar field.
	   * @method getDayOfWeekInMonth
	   * @returns {Number} the day of week in month for the given calendar field.
	   */

	  /*
	   * Sets the given calendar field to the given value.
	   * @param field the given calendar field.
	   * @param v the value to be set for the given calendar field.
	   */
	  set: function set(field, v) {
	    var len = arguments.length;
	    if (len === 2) {
	      this.fields[field] = v;
	    } else if (len < MILLISECONDS + 1) {
	      for (var i = 0; i < len; i++) {
	        this.fields[YEAR + i] = arguments[i];
	      }
	    } else {
	      throw new Error('illegal arguments for GregorianCalendar set');
	    }
	    this.time = undefined;
	  },

	  /*
	   * Set the year of the given calendar field.
	   * @method setYear
	   */

	  /*
	   * Set the month of the given calendar field.
	   * @method setMonth
	   */

	  /*
	   * Set the day of month of the given calendar field.
	   * @method setDayOfMonth
	   */

	  /*
	   * Set the hour of day of the given calendar field.
	   * @method setHourOfDay
	   */

	  /*
	   * Set the minute of the given calendar field.
	   * @method setMinute
	   */

	  /*
	   * Set the second of the given calendar field.
	   * @method setSecond
	   */

	  /*
	   * Set the millisecond of the given calendar field.
	   * @method setMilliSecond
	   */

	  /*
	   * Set the week of year of the given calendar field.
	   * @method setWeekOfYear
	   */

	  /*
	   * Set the week of month of the given calendar field.
	   * @method setWeekOfMonth
	   */

	  /*
	   * Set the day of year of the given calendar field.
	   * @method setDayOfYear
	   */

	  /*
	   * Set the day of week of the given calendar field.
	   * @method setDayOfWeek
	   */

	  /*
	   * Set the day of week in month of the given calendar field.
	   * @method setDayOfWeekInMonth
	   */

	  /*
	   * add for specified field based on two rules:
	   *
	   *  - Add rule 1. The value of field after the call minus the value of field before the
	   *  call is amount, modulo any overflow that has occurred in field
	   *  Overflow occurs when a field value exceeds its range and,
	   *  as a result, the next larger field is incremented or
	   *  decremented and the field value is adjusted back into its range.
	   *
	   *  - Add rule 2. If a smaller field is expected to be invariant,
	   *  but it is impossible for it to be equal to its
	   *  prior value because of changes in its minimum or maximum after
	   *  field is changed, then its value is adjusted to be as close
	   *  as possible to its expected value. A smaller field represents a
	   *  smaller unit of time. HOUR_OF_DAY is a smaller field than
	   *  DAY_OF_MONTH. No adjustment is made to smaller fields
	   *  that are not expected to be invariant. The calendar system
	   *  determines what fields are expected to be invariant.
	   *
	   *
	   *      @example
	   *      use('date/gregorian',function(S, GregorianCalendar){
	   *          const d = new GregorianCalendar();
	   *          d.set(2012, GregorianCalendar.JANUARY, 31);
	   *          d.add(Gregorian.MONTH,1);
	   *          // 2012-2-29
	   *          document.writeln('<p>'+d.getYear()+'-'+d.getMonth()+'-'+d.getDayOfWeek())
	   *          d.add(Gregorian.MONTH,12);
	   *          // 2013-2-28
	   *          document.writeln('<p>'+d.getYear()+'-'+d.getMonth()+'-'+d.getDayOfWeek())
	   *      });
	   *
	   * @param field the calendar field.
	   * @param {Number} amount he amount of date or time to be added to the field.
	   */
	  add: function add(field, a) {
	    if (!a) {
	      return;
	    }
	    var amount = a;
	    var self = this;
	    var fields = self.fields;
	    // computer and retrieve original value
	    var value = self.get(field);
	    if (field === YEAR) {
	      value += amount;
	      self.set(YEAR, value);
	      adjustDayOfMonth(self);
	    } else if (field === MONTH) {
	      value += amount;
	      var yearAmount = floorDivide(value / 12);
	      value = mod(value, 12);
	      if (yearAmount) {
	        self.set(YEAR, fields[YEAR] + yearAmount);
	      }
	      self.set(MONTH, value);
	      adjustDayOfMonth(self);
	    } else {
	      switch (field) {
	        case HOUR_OF_DAY:
	          amount *= ONE_HOUR;
	          break;
	        case MINUTE:
	          amount *= ONE_MINUTE;
	          break;
	        case SECONDS:
	          amount *= ONE_SECOND;
	          break;
	        case MILLISECONDS:
	          break;
	        case WEEK_OF_MONTH:
	        case WEEK_OF_YEAR:
	        case DAY_OF_WEEK_IN_MONTH:
	          amount *= ONE_WEEK;
	          break;
	        case DAY_OF_WEEK:
	        case DAY_OF_YEAR:
	        case DAY_OF_MONTH:
	          amount *= ONE_DAY;
	          break;
	        default:
	          throw new Error('illegal field for add');
	      }
	      self.setTime(self.time + amount);
	    }
	  },

	  /*
	   * add the year of the given calendar field.
	   * @method addYear
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the month of the given calendar field.
	   * @method addMonth
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the day of month of the given calendar field.
	   * @method addDayOfMonth
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the hour of day of the given calendar field.
	   * @method addHourOfDay
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the minute of the given calendar field.
	   * @method addMinute
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the second of the given calendar field.
	   * @method addSecond
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the millisecond of the given calendar field.
	   * @method addMilliSecond
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the week of year of the given calendar field.
	   * @method addWeekOfYear
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the week of month of the given calendar field.
	   * @method addWeekOfMonth
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the day of year of the given calendar field.
	   * @method addDayOfYear
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the day of week of the given calendar field.
	   * @method addDayOfWeek
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * add the day of week in month of the given calendar field.
	   * @method addDayOfWeekInMonth
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * Get rolled value for the field
	   * @protected
	   */
	  getRolledValue: function getRolledValue(value, a, min, max) {
	    var amount = a;
	    var diff = value - min;
	    var range = max - min + 1;
	    amount %= range;
	    return min + (diff + amount + range) % range;
	  },

	  /*
	   * Adds a signed amount to the specified calendar field without changing larger fields.
	   * A negative roll amount means to subtract from field without changing
	   * larger fields. If the specified amount is 0, this method performs nothing.
	   *
	   *
	   *
	   *      @example
	   *      const d = new GregorianCalendar();
	   *      d.set(1999, GregorianCalendar.AUGUST, 31);
	   *      // 1999-4-30
	   *      // Tuesday June 1, 1999
	   *      d.set(1999, GregorianCalendar.JUNE, 1);
	   *      d.add(Gregorian.WEEK_OF_MONTH,-1); // === d.add(Gregorian.WEEK_OF_MONTH,
	   *      d.get(Gregorian.WEEK_OF_MONTH));
	   *      // 1999-06-29
	   *
	   *
	   * @param field the calendar field.
	   * @param {Number} amount the signed amount to add to field.
	   */
	  roll: function roll(field, amount) {
	    if (!amount) {
	      return;
	    }
	    var self = this;
	    // computer and retrieve original value
	    var value = self.get(field);
	    var min = self.getActualMinimum(field);
	    var max = self.getActualMaximum(field);
	    value = self.getRolledValue(value, amount, min, max);

	    self.set(field, value);

	    // consider compute time priority
	    switch (field) {
	      case MONTH:
	        adjustDayOfMonth(self);
	        break;
	      default:
	        // other fields are set already when get
	        self.updateFieldsBySet(field);
	        break;
	    }
	  },

	  /*
	   * keep field stable.
	   *
	   * 2015-09-29 setMonth 2 vs rollSetMonth 2
	   *
	   */
	  rollSet: function rollSet(field, v) {
	    this.set(field, v);
	    switch (field) {
	      case MONTH:
	        adjustDayOfMonth(this);
	        break;
	      default:
	        // other fields are set already when get
	        this.updateFieldsBySet(field);
	        break;
	    }
	  },

	  /*
	   * roll the year of the given calendar field.
	   * @method rollYear
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the month of the given calendar field.
	   * @param {Number} amount the signed amount to add to field.
	   * @method rollMonth
	   */

	  /*
	   * roll the day of month of the given calendar field.
	   * @method rollDayOfMonth
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the hour of day of the given calendar field.
	   * @method rollHourOfDay
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the minute of the given calendar field.
	   * @method rollMinute
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the second of the given calendar field.
	   * @method rollSecond
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the millisecond of the given calendar field.
	   * @method rollMilliSecond
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the week of year of the given calendar field.
	   * @method rollWeekOfYear
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the week of month of the given calendar field.
	   * @method rollWeekOfMonth
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the day of year of the given calendar field.
	   * @method rollDayOfYear
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * roll the day of week of the given calendar field.
	   * @method rollDayOfWeek
	   * @param {Number} amount the signed amount to add to field.
	   */

	  /*
	   * remove other priority fields when call getFixedDate
	   * precondition: other fields are all set or computed
	   * @protected
	   */
	  updateFieldsBySet: function updateFieldsBySet(field) {
	    var fields = this.fields;
	    switch (field) {
	      case WEEK_OF_MONTH:
	        fields[DAY_OF_MONTH] = undefined;
	        break;
	      case DAY_OF_YEAR:
	        fields[MONTH] = undefined;
	        break;
	      case DAY_OF_WEEK:
	        fields[DAY_OF_MONTH] = undefined;
	        break;
	      case WEEK_OF_YEAR:
	        fields[DAY_OF_YEAR] = undefined;
	        fields[MONTH] = undefined;
	        break;
	      default:
	        break;
	    }
	  },

	  /*
	   * get current date instance's timezone offset
	   * @returns {Number}
	   */
	  getTimezoneOffset: function getTimezoneOffset() {
	    return this.timezoneOffset;
	  },

	  /*
	   * set current date instance's timezone offset
	   */
	  setTimezoneOffset: function setTimezoneOffset(timezoneOffset) {
	    if (this.timezoneOffset !== timezoneOffset) {
	      this.fieldsComputed = undefined;
	      this.timezoneOffset = timezoneOffset;
	    }
	  },

	  /*
	   * set first day of week for current date instance
	   */
	  setFirstDayOfWeek: function setFirstDayOfWeek(firstDayOfWeek) {
	    if (this.firstDayOfWeek !== firstDayOfWeek) {
	      this.firstDayOfWeek = firstDayOfWeek;
	      this.fieldsComputed = false;
	    }
	  },

	  /*
	   * Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.
	   * @returns {Number} the first day of the week.
	   */
	  getFirstDayOfWeek: function getFirstDayOfWeek() {
	    return this.firstDayOfWeek;
	  },

	  /*
	   * Sets what the minimal days required in the first week of the year are; For example,
	   * if the first week is defined as one that contains the first day of the first month of a year,
	   * call this method with value 1.
	   * If it must be a full week, use value 7.
	   * @param minimalDaysInFirstWeek the given minimal days required in the first week of the year.
	   */
	  setMinimalDaysInFirstWeek: function setMinimalDaysInFirstWeek(minimalDaysInFirstWeek) {
	    if (this.minimalDaysInFirstWeek !== minimalDaysInFirstWeek) {
	      this.minimalDaysInFirstWeek = minimalDaysInFirstWeek;
	      this.fieldsComputed = false;
	    }
	  },

	  /*
	   * Gets what the minimal days required in the first week of the year are; e.g.,
	   * if the first week is defined as one that contains the first day of the first month of a year,
	   * this method returns 1.
	   * If the minimal days required must be a full week, this method returns 7.
	   * @returns {Number} the minimal days required in the first week of the year.
	   */
	  getMinimalDaysInFirstWeek: function getMinimalDaysInFirstWeek() {
	    return this.minimalDaysInFirstWeek;
	  },

	  /*
	   * Returns the number of weeks in the week year
	   * represented by this GregorianCalendar.
	   *
	   * For example, if this GregorianCalendar's date is
	   * December 31, 2008 with the ISO
	   * 8601 compatible setting, this method will return 53 for the
	   * period: December 29, 2008 to January 3, 2010
	   * while getActualMaximum(WEEK_OF_YEAR) will return
	   * 52 for the period: December 31, 2007 to December 28, 2008.
	   *
	   * @return {Number} the number of weeks in the week year.
	   */
	  getWeeksInWeekYear: function getWeeksInWeekYear() {
	    var weekYear = this.getWeekYear();
	    if (weekYear === this.get(YEAR)) {
	      return this.getActualMaximum(WEEK_OF_YEAR);
	    }
	    // Use the 2nd week for calculating the max of WEEK_OF_YEAR
	    var gc = this.clone();
	    gc.clear();
	    gc.setWeekDate(weekYear, 2, this.get(DAY_OF_WEEK));
	    return gc.getActualMaximum(WEEK_OF_YEAR);
	  },

	  /*
	   * Returns the week year represented by this GregorianCalendar.
	   * The dates in the weeks between 1 and the
	   * maximum week number of the week year have the same week year value
	   * that may be one year before or after the calendar year value.
	   *
	   * @return {Number} the week year represented by this GregorianCalendar.
	   */
	  getWeekYear: function getWeekYear() {
	    var year = this.get(YEAR); // implicitly  complete
	    var weekOfYear = this.get(WEEK_OF_YEAR);
	    var month = this.get(MONTH);
	    if (month === GregorianCalendar.JANUARY) {
	      if (weekOfYear >= 52) {
	        --year;
	      }
	    } else if (month === GregorianCalendar.DECEMBER) {
	      if (weekOfYear === 1) {
	        ++year;
	      }
	    }
	    return year;
	  },
	  /*
	   * Sets this GregorianCalendar to the date given by the date specifiers - weekYear,
	   * weekOfYear, and dayOfWeek. weekOfYear follows the WEEK_OF_YEAR numbering.
	   * The dayOfWeek value must be one of the DAY_OF_WEEK values: SUNDAY to SATURDAY.
	   *
	   * @param weekYear    the week year
	   * @param weekOfYear  the week number based on weekYear
	   * @param dayOfWeek   the day of week value
	   */
	  setWeekDate: function setWeekDate(weekYear, weekOfYear, dayOfWeek) {
	    if (dayOfWeek < GregorianCalendar.SUNDAY || dayOfWeek > GregorianCalendar.SATURDAY) {
	      throw new Error('invalid dayOfWeek: ' + dayOfWeek);
	    }
	    var fields = this.fields;
	    // To avoid changing the time of day fields by date
	    // calculations, use a clone with the GMT time zone.
	    var gc = this.clone();
	    gc.clear();
	    gc.setTimezoneOffset(0);
	    gc.set(YEAR, weekYear);
	    gc.set(WEEK_OF_YEAR, 1);
	    gc.set(DAY_OF_WEEK, this.getFirstDayOfWeek());
	    var days = dayOfWeek - this.getFirstDayOfWeek();
	    if (days < 0) {
	      days += 7;
	    }
	    days += 7 * (weekOfYear - 1);
	    if (days !== 0) {
	      gc.add(DAY_OF_YEAR, days);
	    } else {
	      gc.complete();
	    }
	    fields[YEAR] = gc.get(YEAR);
	    fields[MONTH] = gc.get(MONTH);
	    fields[DAY_OF_MONTH] = gc.get(DAY_OF_MONTH);
	    this.complete();
	  },
	  /*
	   * Creates and returns a copy of this object.
	   * @returns {Date.Gregorian}
	   */
	  clone: function clone() {
	    if (this.time === undefined) {
	      this.computeTime();
	    }
	    var cal = new GregorianCalendar(this.locale);
	    cal.setTimezoneOffset(cal.getTimezoneOffset());
	    cal.setFirstDayOfWeek(cal.getFirstDayOfWeek());
	    cal.setMinimalDaysInFirstWeek(cal.getMinimalDaysInFirstWeek());
	    cal.setTime(this.time);
	    return cal;
	  },

	  /*
	   * Compares this GregorianCalendar to the specified Object.
	   * The result is true if and only if the argument is a GregorianCalendar object
	   * that represents the same time value (millisecond offset from the Epoch)
	   * under the same Calendar parameters and Gregorian change date as this object.
	   * @param {Date.Gregorian} obj the object to compare with.
	   * @returns {boolean} true if this object is equal to obj; false otherwise.
	   */
	  equals: function equals(obj) {
	    return this.getTime() === obj.getTime() && this.firstDayOfWeek === obj.firstDayOfWeek && this.timezoneOffset === obj.timezoneOffset && this.minimalDaysInFirstWeek === obj.minimalDaysInFirstWeek;
	  },

	  compareToDay: function compareToDay(d2) {
	    var d1Year = this.getYear();
	    var d2Year = d2.getYear();
	    var d1Month = this.getMonth();
	    var d2Month = d2.getMonth();
	    var d1Day = this.getDayOfMonth();
	    var d2Day = d2.getDayOfMonth();
	    if (d1Year !== d2Year) {
	      return d1Year - d2Year;
	    }
	    if (d1Month !== d2Month) {
	      return d1Month - d2Month;
	    }
	    return d1Day - d2Day;
	  },

	  /*
	   * Sets all the calendar field values or specified field and the time value
	   * (millisecond offset from the Epoch) of this Calendar undefined.
	   * This means that isSet() will return false for all the calendar fields,
	   * and the date and time calculations will treat the fields as if they had never been set.
	   * @param [field] the calendar field to be cleared.
	   */
	  clear: function clear(field) {
	    if (field === undefined) {
	      this.field = [];
	    } else {
	      this.fields[field] = undefined;
	    }
	    this.time = undefined;
	    this.fieldsComputed = false;
	  },

	  toString: function toString() {
	    // for debug
	    var v = this;
	    return '[GregorianCalendar]: ' + v.getYear() + '/' + v.getMonth() + '/' + v.getDayOfMonth() + ' ' + v.getHourOfDay() + ':' + v.getMinutes() + ':' + v.getSeconds();
	  }
	};

	var GregorianCalendarProto = GregorianCalendar.prototype;

	Utils.each(FIELDS, function (f, index) {
	  if (f) {
	    GregorianCalendarProto['get' + f] = function get() {
	      return this.get(index);
	    };

	    GregorianCalendarProto['isSet' + f] = function isSet() {
	      return this.isSet(index);
	    };

	    GregorianCalendarProto['set' + f] = function set(v) {
	      return this.set(index, v);
	    };

	    GregorianCalendarProto['add' + f] = function add(v) {
	      return this.add(index, v);
	    };

	    GregorianCalendarProto['roll' + f] = function roll(v) {
	      return this.roll(index, v);
	    };

	    GregorianCalendarProto['rollSet' + f] = function rollSet(v) {
	      return this.rollSet(index, v);
	    };
	  }
	});

	module.exports = GregorianCalendar;
	/*
	 http://docs.oracle.com/javase/7/docs/api/java/util/GregorianCalendar.html

	 TODO
	 - day saving time
	 - i18n
	 - julian calendar
	 */

/***/ },
/* 809 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	/*
	 * utils for gregorian date
	 * @ignore
	 * @author yiminghe@gmail.com
	 */

	'use strict';

	var Const = __webpack_require__(__webpack_module_template_argument_0__);
	var floor = Math.floor;
	var ACCUMULATED_DAYS_IN_MONTH
	//   1/1 2/1 3/1 4/1 5/1 6/1 7/1 8/1 9/1 10/1 11/1 12/1
	= [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];

	var ACCUMULATED_DAYS_IN_MONTH_LEAP
	//   1/1 2/1   3/1   4/1   5/1   6/1   7/1   8/1   9/1
	// 10/1   11/1   12/1
	= [0, 31, 59 + 1, 90 + 1, 120 + 1, 151 + 1, 181 + 1, 212 + 1, 243 + 1, 273 + 1, 304 + 1, 334 + 1];

	var DAYS_OF_YEAR = 365;
	var DAYS_OF_4YEAR = 365 * 4 + 1;
	var DAYS_OF_100YEAR = DAYS_OF_4YEAR * 25 - 1;
	var DAYS_OF_400YEAR = DAYS_OF_100YEAR * 4 + 1;
	var _exports = {};

	function getDayOfYear(year, month, dayOfMonth) {
	  return dayOfMonth + (_exports.isLeapYear(year) ? ACCUMULATED_DAYS_IN_MONTH_LEAP[month] : ACCUMULATED_DAYS_IN_MONTH[month]);
	}

	function getDayOfWeekFromFixedDate(fixedDate) {
	  // The fixed day 1 (January 1, 1 Gregorian) is Monday.
	  if (fixedDate >= 0) {
	    return fixedDate % 7;
	  }
	  return _exports.mod(fixedDate, 7);
	}

	function getGregorianYearFromFixedDate(fixedDate) {
	  var d0 = undefined;
	  var d1 = undefined;
	  var d2 = undefined;
	  var d3 = undefined;
	  var n400 = undefined;
	  var n100 = undefined;
	  var n4 = undefined;
	  var n1 = undefined;
	  var year = undefined;
	  d0 = fixedDate - 1;

	  n400 = floor(d0 / DAYS_OF_400YEAR);
	  d1 = _exports.mod(d0, DAYS_OF_400YEAR);
	  n100 = floor(d1 / DAYS_OF_100YEAR);
	  d2 = _exports.mod(d1, DAYS_OF_100YEAR);
	  n4 = floor(d2 / DAYS_OF_4YEAR);
	  d3 = _exports.mod(d2, DAYS_OF_4YEAR);
	  n1 = floor(d3 / DAYS_OF_YEAR);

	  year = 400 * n400 + 100 * n100 + 4 * n4 + n1;

	  // ?
	  if (!(n100 === 4 || n1 === 4)) {
	    ++year;
	  }

	  return year;
	}

	_exports = module.exports = {
	  each: function each(arr, fn) {
	    for (var i = 0, len = arr.length; i < len; i++) {
	      if (fn(arr[i], i, arr) === false) {
	        break;
	      }
	    }
	  },

	  mix: function mix(t, s) {
	    for (var p in s) {
	      if (s.hasOwnProperty(p)) {
	        t[p] = s[p];
	      }
	    }
	  },

	  isLeapYear: function isLeapYear(year) {
	    if ((year & 3) !== 0) {
	      return false;
	    }
	    return year % 100 !== 0 || year % 400 === 0;
	  },

	  mod: function mod(x, y) {
	    // 负数时不是镜像关系
	    return x - y * floor(x / y);
	  },

	  // month: 0 based
	  getFixedDate: function getFixedDate(year, month, dayOfMonth) {
	    var prevYear = year - 1;
	    // 考虑公元前
	    return DAYS_OF_YEAR * prevYear + floor(prevYear / 4) - floor(prevYear / 100) + floor(prevYear / 400) + getDayOfYear(year, month, dayOfMonth);
	  },

	  getGregorianDateFromFixedDate: function getGregorianDateFromFixedDate(fixedDate) {
	    var year = getGregorianYearFromFixedDate(fixedDate);
	    var jan1 = _exports.getFixedDate(year, Const.JANUARY, 1);
	    var isLeap = _exports.isLeapYear(year);
	    var ACCUMULATED_DAYS = isLeap ? ACCUMULATED_DAYS_IN_MONTH_LEAP : ACCUMULATED_DAYS_IN_MONTH;
	    var daysDiff = fixedDate - jan1;
	    var month = undefined;

	    for (var i = 0; i < ACCUMULATED_DAYS.length; i++) {
	      if (ACCUMULATED_DAYS[i] <= daysDiff) {
	        month = i;
	      } else {
	        break;
	      }
	    }

	    var dayOfMonth = fixedDate - jan1 - ACCUMULATED_DAYS[month] + 1;
	    var dayOfWeek = getDayOfWeekFromFixedDate(fixedDate);

	    return {
	      year: year,
	      month: month,
	      dayOfMonth: dayOfMonth,
	      dayOfWeek: dayOfWeek,
	      isLeap: isLeap
	    };
	  }
		};

/***/ },
/* 810 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__, __webpack_module_template_argument_10__) {

	'use strict';

	module.exports = {
	  guid: __webpack_require__(__webpack_module_template_argument_0__),
	  classSet: __webpack_require__(__webpack_module_template_argument_1__),
	  joinClasses: __webpack_require__(__webpack_module_template_argument_2__),
	  KeyCode: __webpack_require__(__webpack_module_template_argument_3__),
	  PureRenderMixin: __webpack_require__(__webpack_module_template_argument_4__),
	  shallowEqual: __webpack_require__(__webpack_module_template_argument_5__),
	  createChainedFunction: __webpack_require__(__webpack_module_template_argument_6__),
	  Dom: {
	    addEventListener: __webpack_require__(__webpack_module_template_argument_7__),
	    contains: __webpack_require__(__webpack_module_template_argument_8__)
	  },
	  Children: {
	    toArray: __webpack_require__(__webpack_module_template_argument_9__),
	    mapSelf: __webpack_require__(__webpack_module_template_argument_10__)
	  }
		};

/***/ },
/* 811 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	var deprecate = __webpack_require__(__webpack_module_template_argument_0__);
	var classNames = __webpack_require__(5);

	module.exports = deprecate(classNames, '`rcUtil.classSet()` is deprecated, use `classNames()` by `require(\'classnames\')` instead');

/***/ },
/* 812 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	var deprecate = __webpack_require__(__webpack_module_template_argument_0__);
	var classNames = __webpack_require__(5);

	module.exports = deprecate(classNames, '`rcUtil.joinClasses()` is deprecated, use `classNames()` by `require(\'classnames\')` instead');

/***/ },
/* 813 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	var shallowEqual = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * If your React component's render function is "pure", e.g. it will render the
	 * same result given the same props and state, provide this Mixin for a
	 * considerable performance boost.
	 *
	 * Most React components have pure render functions.
	 *
	 * Example:
	 *
	 *   const ReactComponentWithPureRenderMixin =
	 *     require('ReactComponentWithPureRenderMixin');
	 *   React.createClass({
	 *     mixins: [ReactComponentWithPureRenderMixin],
	 *
	 *     render: function() {
	 *       return <div className={this.props.className}>foo</div>;
	 *     }
	 *   });
	 *
	 * Note: This only checks shallow equality for props and state. If these contain
	 * complex data structures this mixin may have false-negatives for deeper
	 * differences. Only mixin to components which have simple props and state, or
	 * use `forceUpdate()` when you know deep data structures have changed.
	 */
	var ReactComponentWithPureRenderMixin = {
	  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
	    return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);
	  }
	};

		module.exports = ReactComponentWithPureRenderMixin;

/***/ },
/* 814 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var fetchKeys = __webpack_require__(__webpack_module_template_argument_0__);

	module.exports = function shallowEqual(objA, objB, compare, compareContext) {

	    var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

	    if (ret !== void 0) {
	        return !!ret;
	    }

	    if (objA === objB) {
	        return true;
	    }

	    if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
	        return false;
	    }

	    var keysA = fetchKeys(objA);
	    var keysB = fetchKeys(objB);

	    var len = keysA.length;
	    if (len !== keysB.length) {
	        return false;
	    }

	    compareContext = compareContext || null;

	    // Test for A's keys different from B.
	    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
	    for (var i = 0; i < len; i++) {
	        var key = keysA[i];
	        if (!bHasOwnProperty(key)) {
	            return false;
	        }
	        var valueA = objA[key];
	        var valueB = objB[key];

	        var _ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
	        if (_ret === false || _ret === void 0 && valueA !== valueB) {
	            return false;
	        }
	    }

	    return true;
		};

/***/ },
/* 815 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	/**
	 * lodash 3.1.2 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var getNative = __webpack_require__(__webpack_module_template_argument_0__),
	    isArguments = __webpack_require__(__webpack_module_template_argument_1__),
	    isArray = __webpack_require__(__webpack_module_template_argument_2__);

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function (object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = typeof value == 'number' || reIsUint.test(value) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) && (isArray(object) || isArguments(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if (allowIndexes && isIndex(key, length) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function (object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if (typeof Ctor == 'function' && Ctor.prototype === object || typeof object != 'function' && isArrayLike(object)) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = length && isLength(length) && (isArray(object) || isArguments(object)) && length || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;

	  while (++index < length) {
	    result[index] = index + '';
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

		module.exports = keys;

/***/ },
/* 816 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = addEventListenerWrap;

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _addDomEventListener = __webpack_require__(__webpack_module_template_argument_0__);

	var _addDomEventListener2 = _interopRequireDefault(_addDomEventListener);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function addEventListenerWrap(target, eventType, cb) {
	  /* eslint camelcase: 2 */
	  var callback = _reactDom2['default'].unstable_batchedUpdates ? function run(e) {
	    _reactDom2['default'].unstable_batchedUpdates(cb, e);
	  } : cb;
	  return (0, _addDomEventListener2['default'])(target, eventType, callback);
	}

		module.exports = exports['default'];

/***/ },
/* 817 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = addEventListener;

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _EventObject = __webpack_require__(__webpack_module_template_argument_0__);

	var _EventObject2 = _interopRequireDefault(_EventObject);

	function addEventListener(target, eventType, callback) {
	  function wrapCallback(e) {
	    var ne = new _EventObject2['default'](e);
	    callback.call(target, ne);
	  }

	  if (target.addEventListener) {
	    target.addEventListener(eventType, wrapCallback, false);
	    return {
	      remove: function remove() {
	        target.removeEventListener(eventType, wrapCallback, false);
	      }
	    };
	  } else if (target.attachEvent) {
	    target.attachEvent('on' + eventType, wrapCallback);
	    return {
	      remove: function remove() {
	        target.detachEvent('on' + eventType, wrapCallback);
	      }
	    };
	  }
	}

		module.exports = exports['default'];

/***/ },
/* 818 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/**
	 * @ignore
	 * event object for dom
	 * @author yiminghe@gmail.com
	 */

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _EventBaseObject = __webpack_require__(__webpack_module_template_argument_0__);

	var _EventBaseObject2 = _interopRequireDefault(_EventBaseObject);

	var _objectAssign = __webpack_require__(__webpack_module_template_argument_1__);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var TRUE = true;
	var FALSE = false;
	var commonProps = ['altKey', 'bubbles', 'cancelable', 'ctrlKey', 'currentTarget', 'eventPhase', 'metaKey', 'shiftKey', 'target', 'timeStamp', 'view', 'type'];

	function isNullOrUndefined(w) {
	  return w === null || w === undefined;
	}

	var eventNormalizers = [{
	  reg: /^key/,
	  props: ['char', 'charCode', 'key', 'keyCode', 'which'],
	  fix: function fix(event, nativeEvent) {
	    if (isNullOrUndefined(event.which)) {
	      event.which = !isNullOrUndefined(nativeEvent.charCode) ? nativeEvent.charCode : nativeEvent.keyCode;
	    }

	    // add metaKey to non-Mac browsers (use ctrl for PC 's and Meta for Macs)
	    if (event.metaKey === undefined) {
	      event.metaKey = event.ctrlKey;
	    }
	  }
	}, {
	  reg: /^touch/,
	  props: ['touches', 'changedTouches', 'targetTouches']
	}, {
	  reg: /^hashchange$/,
	  props: ['newURL', 'oldURL']
	}, {
	  reg: /^gesturechange$/i,
	  props: ['rotation', 'scale']
	}, {
	  reg: /^(mousewheel|DOMMouseScroll)$/,
	  props: [],
	  fix: function fix(event, nativeEvent) {
	    var deltaX = undefined;
	    var deltaY = undefined;
	    var delta = undefined;
	    var wheelDelta = nativeEvent.wheelDelta;
	    var axis = nativeEvent.axis;
	    var wheelDeltaY = nativeEvent.wheelDeltaY;
	    var wheelDeltaX = nativeEvent.wheelDeltaX;
	    var detail = nativeEvent.detail;

	    // ie/webkit
	    if (wheelDelta) {
	      delta = wheelDelta / 120;
	    }

	    // gecko
	    if (detail) {
	      // press control e.detail == 1 else e.detail == 3
	      delta = 0 - (detail % 3 === 0 ? detail / 3 : detail);
	    }

	    // Gecko
	    if (axis !== undefined) {
	      if (axis === event.HORIZONTAL_AXIS) {
	        deltaY = 0;
	        deltaX = 0 - delta;
	      } else if (axis === event.VERTICAL_AXIS) {
	        deltaX = 0;
	        deltaY = delta;
	      }
	    }

	    // Webkit
	    if (wheelDeltaY !== undefined) {
	      deltaY = wheelDeltaY / 120;
	    }
	    if (wheelDeltaX !== undefined) {
	      deltaX = -1 * wheelDeltaX / 120;
	    }

	    // 默认 deltaY (ie)
	    if (!deltaX && !deltaY) {
	      deltaY = delta;
	    }

	    if (deltaX !== undefined) {
	      /**
	       * deltaX of mousewheel event
	       * @property deltaX
	       * @member Event.DomEvent.Object
	       */
	      event.deltaX = deltaX;
	    }

	    if (deltaY !== undefined) {
	      /**
	       * deltaY of mousewheel event
	       * @property deltaY
	       * @member Event.DomEvent.Object
	       */
	      event.deltaY = deltaY;
	    }

	    if (delta !== undefined) {
	      /**
	       * delta of mousewheel event
	       * @property delta
	       * @member Event.DomEvent.Object
	       */
	      event.delta = delta;
	    }
	  }
	}, {
	  reg: /^mouse|contextmenu|click|mspointer|(^DOMMouseScroll$)/i,
	  props: ['buttons', 'clientX', 'clientY', 'button', 'offsetX', 'relatedTarget', 'which', 'fromElement', 'toElement', 'offsetY', 'pageX', 'pageY', 'screenX', 'screenY'],
	  fix: function fix(event, nativeEvent) {
	    var eventDoc = undefined;
	    var doc = undefined;
	    var body = undefined;
	    var target = event.target;
	    var button = nativeEvent.button;

	    // Calculate pageX/Y if missing and clientX/Y available
	    if (target && isNullOrUndefined(event.pageX) && !isNullOrUndefined(nativeEvent.clientX)) {
	      eventDoc = target.ownerDocument || document;
	      doc = eventDoc.documentElement;
	      body = eventDoc.body;
	      event.pageX = nativeEvent.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
	      event.pageY = nativeEvent.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
	    }

	    // which for click: 1 === left; 2 === middle; 3 === right
	    // do not use button
	    if (!event.which && button !== undefined) {
	      if (button & 1) {
	        event.which = 1;
	      } else if (button & 2) {
	        event.which = 3;
	      } else if (button & 4) {
	        event.which = 2;
	      } else {
	        event.which = 0;
	      }
	    }

	    // add relatedTarget, if necessary
	    if (!event.relatedTarget && event.fromElement) {
	      event.relatedTarget = event.fromElement === target ? event.toElement : event.fromElement;
	    }

	    return event;
	  }
	}];

	function retTrue() {
	  return TRUE;
	}

	function retFalse() {
	  return FALSE;
	}

	function DomEventObject(nativeEvent) {
	  var type = nativeEvent.type;

	  var isNative = typeof nativeEvent.stopPropagation === 'function' || typeof nativeEvent.cancelBubble === 'boolean';

	  _EventBaseObject2['default'].call(this);

	  this.nativeEvent = nativeEvent;

	  // in case dom event has been mark as default prevented by lower dom node
	  var isDefaultPrevented = retFalse;
	  if ('defaultPrevented' in nativeEvent) {
	    isDefaultPrevented = nativeEvent.defaultPrevented ? retTrue : retFalse;
	  } else if ('getPreventDefault' in nativeEvent) {
	    // https://bugzilla.mozilla.org/show_bug.cgi?id=691151
	    isDefaultPrevented = nativeEvent.getPreventDefault() ? retTrue : retFalse;
	  } else if ('returnValue' in nativeEvent) {
	    isDefaultPrevented = nativeEvent.returnValue === FALSE ? retTrue : retFalse;
	  }

	  this.isDefaultPrevented = isDefaultPrevented;

	  var fixFns = [];
	  var fixFn = undefined;
	  var l = undefined;
	  var prop = undefined;
	  var props = commonProps.concat();

	  eventNormalizers.forEach(function (normalizer) {
	    if (type.match(normalizer.reg)) {
	      props = props.concat(normalizer.props);
	      if (normalizer.fix) {
	        fixFns.push(normalizer.fix);
	      }
	    }
	  });

	  l = props.length;

	  // clone properties of the original event object
	  while (l) {
	    prop = props[--l];
	    this[prop] = nativeEvent[prop];
	  }

	  // fix target property, if necessary
	  if (!this.target && isNative) {
	    this.target = nativeEvent.srcElement || document; // srcElement might not be defined either
	  }

	  // check if target is a text node (safari)
	  if (this.target && this.target.nodeType === 3) {
	    this.target = this.target.parentNode;
	  }

	  l = fixFns.length;

	  while (l) {
	    fixFn = fixFns[--l];
	    fixFn(this, nativeEvent);
	  }

	  this.timeStamp = nativeEvent.timeStamp || Date.now();
	}

	var EventBaseObjectProto = _EventBaseObject2['default'].prototype;

	(0, _objectAssign2['default'])(DomEventObject.prototype, EventBaseObjectProto, {
	  constructor: DomEventObject,

	  preventDefault: function preventDefault() {
	    var e = this.nativeEvent;

	    // if preventDefault exists run it on the original event
	    if (e.preventDefault) {
	      e.preventDefault();
	    } else {
	      // otherwise set the returnValue property of the original event to FALSE (IE)
	      e.returnValue = FALSE;
	    }

	    EventBaseObjectProto.preventDefault.call(this);
	  },

	  stopPropagation: function stopPropagation() {
	    var e = this.nativeEvent;

	    // if stopPropagation exists run it on the original event
	    if (e.stopPropagation) {
	      e.stopPropagation();
	    } else {
	      // otherwise set the cancelBubble property of the original event to TRUE (IE)
	      e.cancelBubble = TRUE;
	    }

	    EventBaseObjectProto.stopPropagation.call(this);
	  }
	});

	exports['default'] = DomEventObject;
	module.exports = exports['default'];

/***/ },
/* 819 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	/**
	 * @ignore
	 * DateTimeFormat for
	 * Inspired by DateTimeFormat from JDK.
	 * @author yiminghe@gmail.com
	 */

	'use strict';

	var GregorianCalendar = __webpack_require__(__webpack_module_template_argument_0__);
	var enUsLocale = __webpack_require__(__webpack_module_template_argument_1__);
	var MAX_VALUE = Number.MAX_VALUE;
	var warning = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * date or time style enum
	 * @enum {Number} Date.Formatter.Style
	 */
	var DateTimeStyle = {
	  /**
	   * full style
	   */
	  FULL: 0,
	  /**
	   * long style
	   */
	  LONG: 1,
	  /**
	   * medium style
	   */
	  MEDIUM: 2,
	  /**
	   * short style
	   */
	  SHORT: 3
	};

	/*
	 Letter    Date or Time Component    Presentation    Examples
	 G    Era designator    Text    AD
	 y    Year    Year    1996; 96
	 Y    WeekYear    WeekYear    1996; 96
	 M    Month in year    Month    July; Jul; 07
	 w    Week in year    Number    27
	 W    Week in month    Number    2
	 D    Day in year    Number    189
	 d    Day in month    Number    10
	 F    Day of week in month    Number    2
	 E    Day in week    Text    Tuesday; Tue
	 a    Am/pm marker    Text    PM
	 H    Hour in day (0-23)    Number    0
	 k    Hour in day (1-24)    Number    24
	 K    Hour in am/pm (0-11)    Number    0
	 h    Hour in am/pm (1-12)    Number    12
	 m    Minute in hour    Number    30
	 s    Second in minute    Number    55
	 S    Millisecond    Number    978
	 x z    Time zone    General time zone    Pacific Standard Time; PST; GMT-08:00
	 Z    Time zone    RFC 822 time zone    -0800
	 */

	var patternChars = new Array(GregorianCalendar.DAY_OF_WEEK_IN_MONTH + 2).join('1');
	var ERA = 0;
	var calendarIndexMap = {};

	patternChars = patternChars.split('');
	patternChars[ERA] = 'G';
	patternChars[GregorianCalendar.YEAR] = 'y';
	patternChars[GregorianCalendar.MONTH] = 'M';
	patternChars[GregorianCalendar.DAY_OF_MONTH] = 'd';
	patternChars[GregorianCalendar.HOUR_OF_DAY] = 'H';
	patternChars[GregorianCalendar.MINUTES] = 'm';
	patternChars[GregorianCalendar.SECONDS] = 's';
	patternChars[GregorianCalendar.MILLISECONDS] = 'S';
	patternChars[GregorianCalendar.WEEK_OF_YEAR] = 'w';
	patternChars[GregorianCalendar.WEEK_OF_MONTH] = 'W';
	patternChars[GregorianCalendar.DAY_OF_YEAR] = 'D';
	patternChars[GregorianCalendar.DAY_OF_WEEK_IN_MONTH] = 'F';
	patternChars.push('Y');

	patternChars.forEach(function (v, key) {
	  var k = key;
	  if (v === 'Y') {
	    k = GregorianCalendar.YEAR;
	  }
	  if (v) {
	    calendarIndexMap[v] = k;
	  }
	});

	function mix(t, s) {
	  for (var p in s) {
	    if (s.hasOwnProperty(p)) {
	      t[p] = s[p];
	    }
	  }
	}

	var SUBSTITUTE_REG = /\\?\{([^{}]+)\}/g;
	var EMPTY = '';

	function substitute(str, o, regexp) {
	  if (typeof str !== 'string' || !o) {
	    return str;
	  }

	  return str.replace(regexp || SUBSTITUTE_REG, function (match, name) {
	    if (match.charAt(0) === '\\') {
	      return match.slice(1);
	    }
	    return o[name] === undefined ? EMPTY : o[name];
	  });
	}

	patternChars = patternChars.join('') + 'ahkKZE';

	function encode(lastField, count, compiledPattern) {
	  compiledPattern.push({
	    field: lastField,
	    count: count
	  });
	}

	function compile(pattern) {
	  var length = pattern.length;
	  var inQuote = false;
	  var compiledPattern = [];
	  var tmpBuffer = null;
	  var count = 0;
	  var lastField = -1;

	  for (var i = 0; i < length; i++) {
	    var c = pattern.charAt(i);

	    if (c === '\'') {
	      // '' is treated as a single quote regardless of being
	      // in a quoted section.
	      if (i + 1 < length) {
	        c = pattern.charAt(i + 1);
	        if (c === '\'') {
	          i++;
	          if (count !== 0) {
	            encode(lastField, count, compiledPattern);
	            lastField = -1;
	            count = 0;
	          }
	          if (inQuote) {
	            tmpBuffer += c;
	          }
	          continue;
	        }
	      }
	      if (!inQuote) {
	        if (count !== 0) {
	          encode(lastField, count, compiledPattern);
	          lastField = -1;
	          count = 0;
	        }
	        tmpBuffer = '';
	        inQuote = true;
	      } else {
	        compiledPattern.push({
	          text: tmpBuffer
	        });
	        inQuote = false;
	      }
	      continue;
	    }
	    if (inQuote) {
	      tmpBuffer += c;
	      continue;
	    }
	    if (!(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z')) {
	      if (count !== 0) {
	        encode(lastField, count, compiledPattern);
	        lastField = -1;
	        count = 0;
	      }
	      compiledPattern.push({
	        text: c
	      });
	      continue;
	    }

	    if (patternChars.indexOf(c) === -1) {
	      throw new Error('Illegal pattern character "' + c + '"');
	    }

	    if (lastField === -1 || lastField === c) {
	      lastField = c;
	      count++;
	      continue;
	    }
	    encode(lastField, count, compiledPattern);
	    lastField = c;
	    count = 1;
	  }

	  if (inQuote) {
	    throw new Error('Unterminated quote');
	  }

	  if (count !== 0) {
	    encode(lastField, count, compiledPattern);
	  }

	  return compiledPattern;
	}

	var zeroDigit = '0';

	// TODO zeroDigit localization??
	function zeroPaddingNumber(_x, _x2, _x3, _x4) {
	  var _again = true;

	  _function: while (_again) {
	    var value = _x,
	        minDigits = _x2,
	        maxDigits_ = _x3,
	        b = _x4;
	    _again = false;

	    // Optimization for 1, 2 and 4 digit numbers. This should
	    // cover most cases of formatting date/time related items.
	    // Note: This optimization code assumes that maxDigits is
	    // either 2 or Integer.MAX_VALUE (maxIntCount in format()).
	    var buffer = b || [];
	    var maxDigits = maxDigits_ || MAX_VALUE;
	    if (value >= 0) {
	      if (value < 100 && minDigits >= 1 && minDigits <= 2) {
	        if (value < 10 && minDigits === 2) {
	          buffer.push(zeroDigit);
	        }
	        buffer.push(value);
	        return buffer.join('');
	      } else if (value >= 1000 && value < 10000) {
	        if (minDigits === 4) {
	          buffer.push(value);
	          return buffer.join('');
	        }
	        if (minDigits === 2 && maxDigits === 2) {
	          _x = value % 100;
	          _x2 = 2;
	          _x3 = 2;
	          _x4 = buffer;
	          _again = true;
	          buffer = maxDigits = undefined;
	          continue _function;
	        }
	      }
	    }
	    buffer.push(value + '');
	    return buffer.join('');
	  }
	}

	/**
	 *
	 * date time formatter for GregorianCalendar
	 *
	 *      @example
	 *
	 *          const calendar = new GregorianCalendar(2013,9,24);
	 *          // ' to escape
	 *          const formatter = new GregorianCalendarFormat("'today is' ''yyyy/MM/dd a''");
	 *          document.write(formatter.format(calendar));
	 *
	 * @class GregorianCalendarFormat
	 * @param {String} pattern patter string of date formatter
	 *
	 * <table border="1">
	 * <thead valign="bottom">
	 * <tr><th class="head">Letter</th>
	 * <th class="head">Date or Time Component</th>
	 * <th class="head">Presentation</th>
	 * <th class="head">Examples</th>
	 * </tr>
	 * </thead>
	 * <tbody valign="top">
	 * <tr><td>G</td>
	 * <td>Era designator</td>
	 * <td>Text</td>
	 * <td>AD</td>
	 * </tr>
	 * <tr><td>y</td>
	 * <td>Year</td>
	 * <td>Year</td>
	 * <td>1996; 96</td>
	 * </tr>
	 * <tr><td>M</td>
	 * <td>Month in year</td>
	 * <td>Month</td>
	 * <td>July; Jul; 07</td>
	 * </tr>
	 * <tr><td>w</td>
	 * <td>Week in year</td>
	 * <td>Number</td>
	 * <td>27</td>
	 * </tr>
	 * <tr><td>W</td>
	 * <td>Week in month</td>
	 * <td>Number</td>
	 * <td>2</td>
	 * </tr>
	 * <tr><td>D</td>
	 * <td>Day in year</td>
	 * <td>Number</td>
	 * <td>189</td>
	 * </tr>
	 * <tr><td>d</td>
	 * <td>Day in month</td>
	 * <td>Number</td>
	 * <td>10</td>
	 * </tr>
	 * <tr><td>F</td>
	 * <td>Day of week in month</td>
	 * <td>Number</td>
	 * <td>2</td>
	 * </tr>
	 * <tr><td>E</td>
	 * <td>Day in week</td>
	 * <td>Text</td>
	 * <td>Tuesday; Tue</td>
	 * </tr>
	 * <tr><td>a</td>
	 * <td>Am/pm marker</td>
	 * <td>Text</td>
	 * <td>PM</td>
	 * </tr>
	 * <tr><td>H</td>
	 *       <td>Hour in day (0-23)</td>
	 * <td>Number</td>
	 * <td>0</td>
	 * </tr>
	 * <tr><td>k</td>
	 *       <td>Hour in day (1-24)</td>
	 * <td>Number</td>
	 * <td>24</td>
	 * </tr>
	 * <tr><td>K</td>
	 * <td>Hour in am/pm (0-11)</td>
	 * <td>Number</td>
	 * <td>0</td>
	 * </tr>
	 * <tr><td>h</td>
	 * <td>Hour in am/pm (1-12)</td>
	 * <td>Number</td>
	 * <td>12</td>
	 * </tr>
	 * <tr><td>m</td>
	 * <td>Minute in hour</td>
	 * <td>Number</td>
	 * <td>30</td>
	 * </tr>
	 * <tr><td>s</td>
	 * <td>Second in minute</td>
	 * <td>Number</td>
	 * <td>55</td>
	 * </tr>
	 * <tr><td>S</td>
	 * <td>Millisecond</td>
	 * <td>Number</td>
	 * <td>978</td>
	 * </tr>
	 * <tr><td>x/z</td>
	 * <td>Time zone</td>
	 * <td>General time zone</td>
	 * <td>Pacific Standard Time; PST; GMT-08:00</td>
	 * </tr>
	 * <tr><td>Z</td>
	 * <td>Time zone</td>
	 * <td>RFC 822 time zone</td>
	 * <td>-0800</td>
	 * </tr>
	 * </tbody>
	 * </table>

	 * @param {Object} locale format locale
	 */
	function DateTimeFormat(pattern, locale) {
	  this.locale = locale || enUsLocale;
	  this.originalPattern = pattern;
	  this.pattern = compile(pattern);
	}

	function formatField(field, count, locale, calendar) {
	  var current = undefined;
	  var value = undefined;
	  switch (field) {
	    case 'G':
	      value = calendar.getYear() > 0 ? 1 : 0;
	      current = locale.eras[value];
	      break;
	    case 'Y':
	      value = calendar.getWeekYear();
	      if (value <= 0) {
	        value = 1 - value;
	      }
	      current = zeroPaddingNumber(value, 2, count !== 2 ? MAX_VALUE : 2);
	      break;
	    case 'y':
	      value = calendar.getYear();
	      if (value <= 0) {
	        value = 1 - value;
	      }
	      current = zeroPaddingNumber(value, 2, count !== 2 ? MAX_VALUE : 2);
	      break;
	    case 'M':
	      value = calendar.getMonth();
	      if (count >= 4) {
	        current = locale.months[value];
	      } else if (count === 3) {
	        current = locale.shortMonths[value];
	      } else {
	        current = zeroPaddingNumber(value + 1, count);
	      }
	      break;
	    case 'k':
	      current = zeroPaddingNumber(calendar.getHourOfDay() || 24, count);
	      break;
	    case 'E':
	      value = calendar.getDayOfWeek();
	      current = count >= 4 ? locale.weekdays[value] : locale.shortWeekdays[value];
	      break;
	    case 'a':
	      current = locale.ampms[calendar.getHourOfDay() >= 12 ? 1 : 0];
	      break;
	    case 'h':
	      current = zeroPaddingNumber(calendar.getHourOfDay() % 12 || 12, count);
	      break;
	    case 'K':
	      current = zeroPaddingNumber(calendar.getHourOfDay() % 12, count);
	      break;
	    case 'Z':
	      var offset = calendar.getTimezoneOffset();
	      var parts = [offset < 0 ? '-' : '+'];
	      offset = Math.abs(offset);
	      parts.push(zeroPaddingNumber(Math.floor(offset / 60) % 100, 2), zeroPaddingNumber(offset % 60, 2));
	      current = parts.join('');
	      break;
	    default:
	      // case 'd':
	      // case 'H':
	      // case 'm':
	      // case 's':
	      // case 'S':
	      // case 'D':
	      // case 'F':
	      // case 'w':
	      // case 'W':
	      var index = calendarIndexMap[field];
	      value = calendar.get(index);
	      current = zeroPaddingNumber(value, count);
	  }
	  return current;
	}

	function matchPartString(dateStr, startIndex, match, mLen) {
	  for (var i = 0; i < mLen; i++) {
	    if (dateStr.charAt(startIndex + i) !== match.charAt(i)) {
	      return false;
	    }
	  }
	  return true;
	}

	function matchField(dateStr, startIndex, matches) {
	  var matchedLen = -1;
	  var index = -1;
	  var i = undefined;
	  var len = matches.length;
	  for (i = 0; i < len; i++) {
	    var m = matches[i];
	    var mLen = m.length;
	    if (mLen > matchedLen && matchPartString(dateStr, startIndex, m, mLen)) {
	      matchedLen = mLen;
	      index = i;
	    }
	  }
	  return index >= 0 ? {
	    value: index,
	    startIndex: startIndex + matchedLen
	  } : null;
	}

	function getLeadingNumberLen(str) {
	  var i = undefined;
	  var c = undefined;
	  var len = str.length;
	  for (i = 0; i < len; i++) {
	    c = str.charAt(i);
	    if (c < '0' || c > '9') {
	      break;
	    }
	  }
	  return i;
	}

	function matchNumber(dateStr, startIndex, count, obeyCount) {
	  var str = dateStr;
	  var n = undefined;
	  if (obeyCount) {
	    if (dateStr.length < startIndex + count) {
	      return null;
	    }
	    str = dateStr.slice(startIndex, startIndex + count);
	    if (!str.match(/^\d+$/)) {
	      throw new Error('GregorianCalendarFormat parse error, dateStr: ' + dateStr + ', patter: ' + this.originalPattern);
	    }
	  } else {
	    str = str.slice(startIndex);
	  }
	  n = parseInt(str, 10);
	  if (isNaN(n)) {
	    throw new Error('GregorianCalendarFormat parse error, dateStr: ' + dateStr + ', patter: ' + this.originalPattern);
	  }
	  return {
	    value: n,
	    startIndex: startIndex + getLeadingNumberLen(str)
	  };
	}

	function parseField(calendar, dateStr, startIndex_, field, count, obeyCount, tmp) {
	  var match = undefined;
	  var year = undefined;
	  var hour = undefined;
	  var startIndex = startIndex_;
	  if (dateStr.length <= startIndex) {
	    return startIndex;
	  }
	  var locale = this.locale;
	  switch (field) {
	    case 'G':
	      match = matchField(dateStr, startIndex, locale.eras);
	      if (match) {
	        if (calendar.isSetYear()) {
	          if (match.value === 0) {
	            year = calendar.getYear();
	            calendar.setYear(1 - year);
	          }
	        } else {
	          tmp.era = match.value;
	        }
	      }
	      break;
	    case 'y':
	      match = matchNumber.call(this, dateStr, startIndex, count, obeyCount);
	      if (match) {
	        year = match.value;
	        if ('era' in tmp) {
	          if (tmp.era === 0) {
	            year = 1 - year;
	          }
	        }
	        calendar.setYear(year);
	      }
	      break;
	    case 'M':
	      var month = undefined;
	      if (count >= 3) {
	        match = matchField(dateStr, startIndex, locale[count === 3 ? 'shortMonths' : 'months']);
	        if (match) {
	          month = match.value;
	        }
	      } else {
	        match = matchNumber.call(this, dateStr, startIndex, count, obeyCount);
	        if (match) {
	          month = match.value - 1;
	        }
	      }
	      if (match) {
	        calendar.setMonth(month);
	      }
	      break;
	    case 'k':
	      match = matchNumber.call(this, dateStr, startIndex, count, obeyCount);
	      if (match) {
	        calendar.setHourOfDay(match.value % 24);
	      }
	      break;
	    case 'E':
	      match = matchField(dateStr, startIndex, locale[count > 3 ? 'weekdays' : 'shortWeekdays']);
	      if (match) {
	        calendar.setDayOfWeek(match.value);
	      }
	      break;
	    case 'a':
	      match = matchField(dateStr, startIndex, locale.ampms);
	      if (match) {
	        if (calendar.isSetHourOfDay()) {
	          if (match.value) {
	            hour = calendar.getHourOfDay();
	            if (hour < 12) {
	              calendar.setHourOfDay((hour + 12) % 24);
	            }
	          }
	        } else {
	          tmp.ampm = match.value;
	        }
	      }
	      break;
	    case 'h':
	      match = matchNumber.call(this, dateStr, startIndex, count, obeyCount);
	      if (match) {
	        hour = match.value %= 12;
	        if (tmp.ampm) {
	          hour += 12;
	        }
	        calendar.setHourOfDay(hour);
	      }
	      break;
	    case 'K':
	      match = matchNumber.call(this, dateStr, startIndex, count, obeyCount);
	      if (match) {
	        hour = match.value;
	        if (tmp.ampm) {
	          hour += 12;
	        }
	        calendar.setHourOfDay(hour);
	      }
	      break;
	    case 'Z':
	      // let sign = 1;
	      var zoneChar = dateStr.charAt(startIndex);
	      if (zoneChar === '-') {
	        // sign = -1;
	        startIndex++;
	      } else if (zoneChar === '+') {
	        startIndex++;
	      } else {
	        break;
	      }
	      match = matchNumber.call(this, dateStr, startIndex, 2, true);
	      if (match) {
	        var zoneOffset = match.value * 60;
	        startIndex = match.startIndex;
	        match = matchNumber.call(this, dateStr, startIndex, 2, true);
	        if (match) {
	          zoneOffset += match.value;
	        }
	        calendar.setTimezoneOffset(zoneOffset);
	      }
	      break;
	    default:
	      // case 'd':
	      // case 'H':
	      // case 'm':
	      // case 's':
	      // case 'S':
	      // case 'D':
	      // case 'F':
	      // case 'w':
	      // case 'W'
	      match = matchNumber.call(this, dateStr, startIndex, count, obeyCount);
	      if (match) {
	        var index = calendarIndexMap[field];
	        calendar.set(index, match.value);
	      }
	  }
	  if (match) {
	    startIndex = match.startIndex;
	  }
	  return startIndex;
	}

	mix(DateTimeFormat.prototype, {
	  /*
	   * format a GregorianDate instance according to specified pattern
	   * @param {GregorianCalendar} calendar GregorianDate instance
	   * @returns {string} formatted string of GregorianDate instance
	   */
	  format: function format(calendar) {
	    if (!calendar.isGregorianCalendar) {
	      throw new Error('calendar must be type of GregorianCalendar');
	    }
	    var i = undefined;
	    var ret = [];
	    var pattern = this.pattern;
	    var len = pattern.length;
	    for (i = 0; i < len; i++) {
	      var comp = pattern[i];
	      if (comp.text) {
	        ret.push(comp.text);
	      } else if ('field' in comp) {
	        ret.push(formatField(comp.field, comp.count, this.locale, calendar));
	      }
	    }
	    return ret.join('');
	  },

	  /*
	   * parse a formatted string of GregorianDate instance according to specified pattern
	   * @param {String} dateStr formatted string of GregorianDate
	   * @returns {GregorianCalendar}
	   */
	  parse: function parse(dateStr, option_) {
	    var option = option_ || {};
	    var calendarLocale = option.locale;
	    var calendar = new GregorianCalendar(calendarLocale);
	    var i = undefined;
	    var j = undefined;
	    var tmp = {};
	    var obeyCount = option.obeyCount || false;
	    var dateStrLen = dateStr.length;
	    var errorIndex = -1;
	    var startIndex = 0;
	    var oldStartIndex = 0;
	    var pattern = this.pattern;
	    var len = pattern.length;
	    /* eslint no-labels: 0 no-empty-label:0 */
	    loopPattern: {
	      for (i = 0; errorIndex < 0 && i < len; i++) {
	        var comp = pattern[i];
	        var text = undefined;
	        var textLen = undefined;
	        oldStartIndex = startIndex;
	        text = comp.text;
	        if (text) {
	          textLen = text.length;
	          if (textLen + startIndex > dateStrLen) {
	            errorIndex = startIndex;
	          } else {
	            for (j = 0; j < textLen; j++) {
	              if (text.charAt(j) !== dateStr.charAt(j + startIndex)) {
	                errorIndex = startIndex;
	                break loopPattern;
	              }
	            }
	            startIndex += textLen;
	          }
	        } else if ('field' in comp) {
	          if (!option.obeyCount) {
	            var nextComp = pattern[i + 1];
	            obeyCount = false;
	            if (nextComp) {
	              if ('field' in nextComp) {
	                obeyCount = true;
	              } else {
	                var c = nextComp.text.charAt(0);
	                if (c >= '0' && c <= '9') {
	                  obeyCount = true;
	                }
	              }
	            }
	          }
	          startIndex = parseField.call(this, calendar, dateStr, startIndex, comp.field, comp.count, obeyCount, tmp);
	          if (startIndex === oldStartIndex) {
	            errorIndex = startIndex;
	          }
	        }
	      }
	    }

	    if (errorIndex >= 0) {
	      warning(false, 'error when parsing date: ' + dateStr + ', position: ' + dateStr.slice(0, errorIndex) + '^');
	      return undefined;
	    }
	    return calendar;
	  }
	});

	mix(DateTimeFormat, {
	  Style: DateTimeStyle,

	  /*
	   * get a formatter instance of short style pattern.
	   * en-us: M/d/yy h:mm a
	   * zh-cn: yy-M-d ah:mm
	   * @param {Object} locale locale object
	   * @returns {GregorianCalendar}
	   * @static
	   */
	  getInstance: function getInstance(locale) {
	    return this.getDateTimeInstance(DateTimeStyle.SHORT, DateTimeStyle.SHORT, locale);
	  },

	  /*
	   * get a formatter instance of specified date style.
	   * @param {Date.Formatter.Style} dateStyle date format style
	   * @param {Object} locale
	   * @returns {GregorianCalendar}
	   * @static
	   */
	  getDateInstance: function getDateInstance(dateStyle, locale) {
	    return this.getDateTimeInstance(dateStyle, undefined, locale);
	  },

	  /*
	   * get a formatter instance of specified date style and time style.
	   * @param {Date.Formatter.Style} dateStyle date format style
	   * @param {Date.Formatter.Style} timeStyle time format style
	   * @param {Object} locale
	   * @returns {GregorianCalendar}
	   * @static
	   */
	  getDateTimeInstance: function getDateTimeInstance(dateStyle, timeStyle, locale_) {
	    var locale = locale_ || enUsLocale;
	    var datePattern = '';
	    if (dateStyle !== undefined) {
	      datePattern = locale.datePatterns[dateStyle];
	    }
	    var timePattern = '';
	    if (timeStyle !== undefined) {
	      timePattern = locale.timePatterns[timeStyle];
	    }
	    var pattern = datePattern;
	    if (timePattern) {
	      if (datePattern) {
	        pattern = substitute(locale.dateTimePattern, {
	          date: datePattern,
	          time: timePattern
	        });
	      } else {
	        pattern = timePattern;
	      }
	    }
	    return new DateTimeFormat(pattern, locale);
	  },

	  /*
	   * get a formatter instance of specified time style.
	   * @param {Date.Formatter.Style} timeStyle time format style
	   * @param {Object} locale
	   * @returns {GregorianCalendar}
	   * @static
	   */
	  getTimeInstance: function getTimeInstance(timeStyle, locale) {
	    return this.getDateTimeInstance(undefined, timeStyle, locale);
	  }
	});

	module.exports = DateTimeFormat;

	DateTimeFormat.version = '@VERSION@';

	// gc_format@163.com

/***/ },
/* 820 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	module.exports = __webpack_require__(__webpack_module_template_argument_0__);

/***/ },
/* 821 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcUtil = __webpack_require__(__webpack_module_template_argument_0__);

	var _Popup = __webpack_require__(__webpack_module_template_argument_1__);

	var _Popup2 = _interopRequireDefault(_Popup);

	var _utils = __webpack_require__(__webpack_module_template_argument_2__);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	function noop() {}

	function returnEmptyString() {
	  return '';
	}

	var ALL_HANDLERS = ['onClick', 'onMouseDown', 'onTouchStart', 'onMouseEnter', 'onMouseLeave', 'onFocus', 'onBlur'];

	var Trigger = _react2["default"].createClass({
	  displayName: 'Trigger',

	  propTypes: {
	    action: _react.PropTypes.any,
	    showAction: _react.PropTypes.any,
	    hideAction: _react.PropTypes.any,
	    getPopupClassNameFromAlign: _react.PropTypes.any,
	    onPopupVisibleChange: _react.PropTypes.func,
	    afterPopupVisibleChange: _react.PropTypes.func,
	    popup: _react.PropTypes.node.isRequired,
	    popupStyle: _react.PropTypes.object,
	    prefixCls: _react.PropTypes.string,
	    popupClassName: _react.PropTypes.string,
	    popupPlacement: _react.PropTypes.string,
	    builtinPlacements: _react.PropTypes.object,
	    popupTransitionName: _react.PropTypes.string,
	    popupAnimation: _react.PropTypes.any,
	    mouseEnterDelay: _react.PropTypes.number,
	    mouseLeaveDelay: _react.PropTypes.number,
	    zIndex: _react.PropTypes.number,
	    focusDelay: _react.PropTypes.number,
	    blurDelay: _react.PropTypes.number,
	    getPopupContainer: _react.PropTypes.func,
	    destroyPopupOnHide: _react.PropTypes.bool,
	    mask: _react.PropTypes.bool,
	    onPopupAlign: _react.PropTypes.func,
	    popupAlign: _react.PropTypes.object,
	    popupVisible: _react.PropTypes.bool,
	    maskTransitionName: _react.PropTypes.string,
	    maskAnimation: _react.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-trigger-popup',
	      getPopupClassNameFromAlign: returnEmptyString,
	      onPopupVisibleChange: noop,
	      afterPopupVisibleChange: noop,
	      onPopupAlign: noop,
	      popupClassName: '',
	      mouseEnterDelay: 0,
	      mouseLeaveDelay: 0.1,
	      focusDelay: 0,
	      blurDelay: 0.15,
	      popupStyle: {},
	      destroyPopupOnHide: false,
	      popupAlign: {},
	      defaultPopupVisible: false,
	      mask: false,
	      action: [],
	      showAction: [],
	      hideAction: []
	    };
	  },
	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var popupVisible = void 0;
	    if ('popupVisible' in props) {
	      popupVisible = !!props.popupVisible;
	    } else {
	      popupVisible = !!props.defaultPopupVisible;
	    }
	    return {
	      popupVisible: popupVisible
	    };
	  },
	  componentDidMount: function componentDidMount() {
	    this.componentDidUpdate({}, {
	      popupVisible: this.state.popupVisible
	    });
	  },
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    if ('popupVisible' in nextProps) {
	      this.setState({
	        popupVisible: !!nextProps.popupVisible
	      });
	    }
	  },
	  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
	    var _this = this;

	    var props = this.props;
	    var state = this.state;
	    if (this.popupRendered) {
	      var _ret = function () {
	        var self = _this;
	        _reactDom2["default"].unstable_renderSubtreeIntoContainer(_this, _this.getPopupElement(), _this.getPopupContainer(), function renderPopup() {
	          /* eslint react/no-is-mounted:0 */
	          if (this.isMounted()) {
	            self.popupDomNode = this.getPopupDomNode();
	          } else {
	            self.popupDomNode = null;
	          }
	          if (prevState.popupVisible !== state.popupVisible) {
	            props.afterPopupVisibleChange(state.popupVisible);
	          }
	        });
	        if (_this.isClickToHide()) {
	          if (state.popupVisible) {
	            if (!_this.clickOutsideHandler) {
	              _this.clickOutsideHandler = _rcUtil.Dom.addEventListener(document, 'mousedown', _this.onDocumentClick);
	              _this.touchOutsideHandler = _rcUtil.Dom.addEventListener(document, 'touchstart', _this.onDocumentClick);
	            }
	            return {
	              v: void 0
	            };
	          }
	        }
	        if (_this.clickOutsideHandler) {
	          _this.clickOutsideHandler.remove();
	          _this.touchOutsideHandler.remove();
	          _this.clickOutsideHandler = null;
	          _this.touchOutsideHandler = null;
	        }
	      }();

	      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	    }
	  },
	  componentWillUnmount: function componentWillUnmount() {
	    var popupContainer = this.popupContainer;
	    if (popupContainer) {
	      _reactDom2["default"].unmountComponentAtNode(popupContainer);
	      popupContainer.parentNode.removeChild(popupContainer);
	      this.popupContainer = null;
	    }
	    this.clearDelayTimer();
	    if (this.clickOutsideHandler) {
	      this.clickOutsideHandler.remove();
	      this.touchOutsideHandler.remove();
	      this.clickOutsideHandler = null;
	      this.touchOutsideHandler = null;
	    }
	  },
	  onMouseEnter: function onMouseEnter() {
	    this.delaySetPopupVisible(true, this.props.mouseEnterDelay);
	  },
	  onMouseLeave: function onMouseLeave() {
	    this.delaySetPopupVisible(false, this.props.mouseLeaveDelay);
	  },
	  onFocus: function onFocus() {
	    // incase focusin and focusout
	    this.clearDelayTimer();
	    if (this.isFocusToShow()) {
	      this.focusTime = Date.now();
	      this.delaySetPopupVisible(true, this.props.focusDelay);
	    }
	  },
	  onMouseDown: function onMouseDown() {
	    this.preClickTime = Date.now();
	  },
	  onTouchStart: function onTouchStart() {
	    this.preTouchTime = Date.now();
	  },
	  onBlur: function onBlur() {
	    this.clearDelayTimer();
	    if (this.isBlurToHide()) {
	      this.delaySetPopupVisible(false, this.props.blurDelay);
	    }
	  },
	  onClick: function onClick(event) {
	    // focus will trigger click
	    if (this.focusTime) {
	      var preTime = void 0;
	      if (this.preClickTime && this.preTouchTime) {
	        preTime = Math.min(this.preClickTime, this.preTouchTime);
	      } else if (this.preClickTime) {
	        preTime = this.preClickTime;
	      } else if (this.preTouchTime) {
	        preTime = this.preTouchTime;
	      }
	      if (Math.abs(preTime - this.focusTime) < 20) {
	        return;
	      }
	      this.focusTime = 0;
	    }
	    this.preClickTime = 0;
	    this.preTouchTime = 0;
	    event.preventDefault();
	    var nextVisible = !this.state.popupVisible;
	    if (this.isClickToHide() && !nextVisible || nextVisible && this.isClickToShow()) {
	      this.setPopupVisible(!this.state.popupVisible);
	    }
	  },
	  onDocumentClick: function onDocumentClick(event) {
	    var target = event.target;
	    var root = (0, _reactDom.findDOMNode)(this);
	    var popupNode = this.getPopupDomNode();
	    if (!_rcUtil.Dom.contains(root, target) && !_rcUtil.Dom.contains(popupNode, target)) {
	      this.setPopupVisible(false);
	    }
	  },
	  getPopupDomNode: function getPopupDomNode() {
	    // for test
	    return this.popupDomNode;
	  },
	  getRootDomNode: function getRootDomNode() {
	    return _reactDom2["default"].findDOMNode(this);
	  },
	  getPopupContainer: function getPopupContainer() {
	    if (!this.popupContainer) {
	      this.popupContainer = document.createElement('div');
	      var mountNode = this.props.getPopupContainer ? this.props.getPopupContainer((0, _reactDom.findDOMNode)(this)) : document.body;
	      mountNode.appendChild(this.popupContainer);
	    }
	    return this.popupContainer;
	  },
	  getPopupClassNameFromAlign: function getPopupClassNameFromAlign(align) {
	    var className = [];
	    var props = this.props;
	    var popupPlacement = props.popupPlacement;
	    var builtinPlacements = props.builtinPlacements;
	    var prefixCls = props.prefixCls;

	    if (popupPlacement && builtinPlacements) {
	      className.push((0, _utils.getPopupClassNameFromAlign)(builtinPlacements, prefixCls, align));
	    }
	    if (props.getPopupClassNameFromAlign) {
	      className.push(props.getPopupClassNameFromAlign(align));
	    }
	    return className.join(' ');
	  },
	  getPopupAlign: function getPopupAlign() {
	    var props = this.props;
	    var popupPlacement = props.popupPlacement;
	    var popupAlign = props.popupAlign;
	    var builtinPlacements = props.builtinPlacements;

	    if (popupPlacement && builtinPlacements) {
	      return (0, _utils.getAlignFromPlacement)(builtinPlacements, popupPlacement, popupAlign);
	    }
	    return popupAlign;
	  },
	  getPopupElement: function getPopupElement() {
	    var props = this.props;
	    var state = this.state;
	    var mouseProps = {};
	    if (props.action.indexOf('hover') !== -1) {
	      mouseProps.onMouseEnter = this.onMouseEnter;
	      mouseProps.onMouseLeave = this.onMouseLeave;
	    }
	    return _react2["default"].createElement(_Popup2["default"], _extends({
	      prefixCls: props.prefixCls,
	      destroyPopupOnHide: props.destroyPopupOnHide,
	      visible: state.popupVisible,
	      className: props.popupClassName,
	      action: props.action,
	      align: this.getPopupAlign(),
	      onAlign: props.onPopupAlign,
	      animation: props.popupAnimation,
	      getClassNameFromAlign: this.getPopupClassNameFromAlign
	    }, mouseProps, {
	      getRootDomNode: this.getRootDomNode,
	      style: props.popupStyle,
	      mask: props.mask,
	      zIndex: props.zIndex,
	      transitionName: props.popupTransitionName,
	      maskAnimation: props.maskAnimation,
	      maskTransitionName: props.maskTransitionName
	    }), props.popup);
	  },
	  setPopupVisible: function setPopupVisible(popupVisible) {
	    this.clearDelayTimer();
	    if (this.state.popupVisible !== popupVisible) {
	      if (!('popupVisible' in this.props)) {
	        this.setState({
	          popupVisible: popupVisible
	        });
	      }
	      this.props.onPopupVisibleChange(popupVisible);
	    }
	  },
	  delaySetPopupVisible: function delaySetPopupVisible(visible, delayS) {
	    var _this2 = this;

	    var delay = delayS * 1000;
	    this.clearDelayTimer();
	    if (delay) {
	      this.delayTimer = setTimeout(function () {
	        _this2.setPopupVisible(visible);
	        _this2.clearDelayTimer();
	      }, delay);
	    } else {
	      this.setPopupVisible(visible);
	    }
	  },
	  clearDelayTimer: function clearDelayTimer() {
	    if (this.delayTimer) {
	      clearTimeout(this.delayTimer);
	      this.delayTimer = null;
	    }
	  },
	  isClickToShow: function isClickToShow() {
	    var _props = this.props;
	    var action = _props.action;
	    var showAction = _props.showAction;

	    return action.indexOf('click') !== -1 || showAction.indexOf('click') !== -1;
	  },
	  isClickToHide: function isClickToHide() {
	    var _props2 = this.props;
	    var action = _props2.action;
	    var hideAction = _props2.hideAction;

	    return action.indexOf('click') !== -1 || hideAction.indexOf('click') !== -1;
	  },
	  isMouseEnterToShow: function isMouseEnterToShow() {
	    var _props3 = this.props;
	    var action = _props3.action;
	    var showAction = _props3.showAction;

	    return action.indexOf('hover') !== -1 || showAction.indexOf('mouseEnter') !== -1;
	  },
	  isMouseLeaveToHide: function isMouseLeaveToHide() {
	    var _props4 = this.props;
	    var action = _props4.action;
	    var hideAction = _props4.hideAction;

	    return action.indexOf('hover') !== -1 || hideAction.indexOf('mouseLeave') !== -1;
	  },
	  isFocusToShow: function isFocusToShow() {
	    var _props5 = this.props;
	    var action = _props5.action;
	    var showAction = _props5.showAction;

	    return action.indexOf('focus') !== -1 || showAction.indexOf('focus') !== -1;
	  },
	  isBlurToHide: function isBlurToHide() {
	    var _props6 = this.props;
	    var action = _props6.action;
	    var hideAction = _props6.hideAction;

	    return action.indexOf('focus') !== -1 || hideAction.indexOf('blur') !== -1;
	  },
	  render: function render() {
	    this.popupRendered = this.popupRendered || this.state.popupVisible;
	    var props = this.props;
	    var children = props.children;
	    var child = _react2["default"].Children.only(children);
	    var childProps = child.props || {};
	    var newChildProps = {};

	    if (this.isClickToHide() || this.isClickToShow()) {
	      newChildProps.onClick = (0, _rcUtil.createChainedFunction)(this.onClick, childProps.onClick);
	      newChildProps.onMouseDown = (0, _rcUtil.createChainedFunction)(this.onMouseDown, childProps.onMouseDown);
	      newChildProps.onTouchStart = (0, _rcUtil.createChainedFunction)(this.onTouchStart, childProps.onTouchStart);
	    }
	    if (this.isMouseEnterToShow()) {
	      newChildProps.onMouseEnter = (0, _rcUtil.createChainedFunction)(this.onMouseEnter, childProps.onMouseEnter);
	    }
	    if (this.isMouseLeaveToHide()) {
	      newChildProps.onMouseLeave = (0, _rcUtil.createChainedFunction)(this.onMouseLeave, childProps.onMouseLeave);
	    }
	    if (this.isFocusToShow() || this.isBlurToHide()) {
	      newChildProps.onFocus = (0, _rcUtil.createChainedFunction)(this.onFocus, childProps.onFocus);
	      newChildProps.onBlur = (0, _rcUtil.createChainedFunction)(this.onBlur, childProps.onBlur);
	    }

	    ALL_HANDLERS.forEach(function (handler) {
	      var newFn = void 0;
	      if (props[handler] && newChildProps[handler]) {
	        newFn = (0, _rcUtil.createChainedFunction)(props[handler], newChildProps[handler]);
	      } else {
	        newFn = props[handler] || newChildProps[handler];
	      }
	      if (newFn) {
	        newChildProps[handler] = newFn;
	      }
	    });

	    return _react2["default"].cloneElement(child, newChildProps);
	  }
	});

	exports["default"] = Trigger;
	module.exports = exports['default'];

/***/ },
/* 822 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcAlign = __webpack_require__(__webpack_module_template_argument_0__);

	var _rcAlign2 = _interopRequireDefault(_rcAlign);

	var _rcAnimate = __webpack_require__(__webpack_module_template_argument_1__);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var _PopupInner = __webpack_require__(__webpack_module_template_argument_2__);

	var _PopupInner2 = _interopRequireDefault(_PopupInner);

	var _LazyRenderBox = __webpack_require__(__webpack_module_template_argument_3__);

	var _LazyRenderBox2 = _interopRequireDefault(_LazyRenderBox);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	var Popup = _react2["default"].createClass({
	  displayName: 'Popup',

	  propTypes: {
	    visible: _react.PropTypes.bool,
	    style: _react.PropTypes.object,
	    getClassNameFromAlign: _react.PropTypes.func,
	    onAlign: _react.PropTypes.func,
	    getRootDomNode: _react.PropTypes.func,
	    onMouseEnter: _react.PropTypes.func,
	    align: _react.PropTypes.any,
	    destroyPopupOnHide: _react.PropTypes.bool,
	    className: _react.PropTypes.string,
	    prefixCls: _react.PropTypes.string,
	    onMouseLeave: _react.PropTypes.func
	  },

	  componentDidMount: function componentDidMount() {
	    this.rootNode = this.getPopupDomNode();
	  },
	  onAlign: function onAlign(popupDomNode, align) {
	    var props = this.props;
	    var alignClassName = props.getClassNameFromAlign(props.align);
	    var currentAlignClassName = props.getClassNameFromAlign(align);
	    if (alignClassName !== currentAlignClassName) {
	      this.currentAlignClassName = currentAlignClassName;
	      popupDomNode.className = this.getClassName(currentAlignClassName);
	    }
	    props.onAlign(popupDomNode, align);
	  },
	  getPopupDomNode: function getPopupDomNode() {
	    return _reactDom2["default"].findDOMNode(this.refs.popup);
	  },
	  getTarget: function getTarget() {
	    return this.props.getRootDomNode();
	  },
	  getMaskTransitionName: function getMaskTransitionName() {
	    var props = this.props;
	    var transitionName = props.maskTransitionName;
	    var animation = props.maskAnimation;
	    if (!transitionName && animation) {
	      transitionName = props.prefixCls + '-' + animation;
	    }
	    return transitionName;
	  },
	  getTransitionName: function getTransitionName() {
	    var props = this.props;
	    var transitionName = props.transitionName;
	    if (!transitionName && props.animation) {
	      transitionName = props.prefixCls + '-' + props.animation;
	    }
	    return transitionName;
	  },
	  getClassName: function getClassName(currentAlignClassName) {
	    return this.props.prefixCls + ' ' + this.props.className + ' ' + currentAlignClassName;
	  },
	  getPopupElement: function getPopupElement() {
	    var props = this.props;
	    var align = props.align;
	    var style = props.style;
	    var visible = props.visible;
	    var prefixCls = props.prefixCls;
	    var destroyPopupOnHide = props.destroyPopupOnHide;

	    var className = this.getClassName(this.currentAlignClassName || props.getClassNameFromAlign(align));
	    var hiddenClassName = prefixCls + '-hidden';
	    if (!visible) {
	      this.currentAlignClassName = null;
	    }
	    var newStyle = _extends({}, style, this.getZIndexStyle());
	    var popupInnerProps = {
	      className: className,
	      prefixCls: prefixCls,
	      ref: 'popup',
	      onMouseEnter: props.onMouseEnter,
	      onMouseLeave: props.onMouseLeave,
	      style: newStyle
	    };
	    if (destroyPopupOnHide) {
	      return _react2["default"].createElement(_rcAnimate2["default"], {
	        component: '',
	        exclusive: true,
	        transitionAppear: true,
	        transitionName: this.getTransitionName()
	      }, visible ? _react2["default"].createElement(_rcAlign2["default"], {
	        target: this.getTarget,
	        key: 'popup',
	        monitorWindowResize: true,
	        align: align,
	        onAlign: this.onAlign
	      }, _react2["default"].createElement(_PopupInner2["default"], _extends({
	        visible: true
	      }, popupInnerProps), props.children)) : null);
	    }
	    return _react2["default"].createElement(_rcAnimate2["default"], {
	      component: '',
	      exclusive: true,
	      transitionAppear: true,
	      transitionName: this.getTransitionName(),
	      showProp: 'xVisible'
	    }, _react2["default"].createElement(_rcAlign2["default"], {
	      target: this.getTarget,
	      key: 'popup',
	      monitorWindowResize: true,
	      xVisible: visible,
	      childrenProps: { visible: 'xVisible' },
	      disabled: !visible,
	      align: align,
	      onAlign: this.onAlign
	    }, _react2["default"].createElement(_PopupInner2["default"], _extends({
	      hiddenClassName: hiddenClassName
	    }, popupInnerProps), props.children)));
	  },
	  getZIndexStyle: function getZIndexStyle() {
	    var style = {};
	    var props = this.props;
	    if (props.zIndex !== undefined) {
	      style.zIndex = props.zIndex;
	    }
	    return style;
	  },
	  getMaskElement: function getMaskElement() {
	    var props = this.props;
	    var maskElement = void 0;
	    if (props.mask) {
	      var maskTransition = this.getMaskTransitionName();
	      maskElement = _react2["default"].createElement(_LazyRenderBox2["default"], {
	        style: this.getZIndexStyle(),
	        key: 'mask',
	        className: props.prefixCls + '-mask',
	        hiddenClassName: props.prefixCls + '-mask-hidden',
	        visible: props.visible
	      });
	      if (maskTransition) {
	        maskElement = _react2["default"].createElement(_rcAnimate2["default"], {
	          key: 'mask',
	          showProp: 'visible',
	          transitionAppear: true,
	          component: '',
	          transitionName: maskTransition
	        }, maskElement);
	      }
	    }
	    return maskElement;
	  },
	  render: function render() {
	    return _react2["default"].createElement('div', null, this.getMaskElement(), this.getPopupElement());
	  }
	});

	exports["default"] = Popup;
	module.exports = exports['default'];

/***/ },
/* 823 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// export this package's api
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _Align = __webpack_require__(__webpack_module_template_argument_0__);

	var _Align2 = _interopRequireDefault(_Align);

	exports['default'] = _Align2['default'];
	module.exports = exports['default'];

/***/ },
/* 824 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _domAlign = __webpack_require__(__webpack_module_template_argument_0__);

	var _domAlign2 = _interopRequireDefault(_domAlign);

	var _rcUtil = __webpack_require__(__webpack_module_template_argument_1__);

	var _isWindow = __webpack_require__(__webpack_module_template_argument_2__);

	var _isWindow2 = _interopRequireDefault(_isWindow);

	function buffer(fn, ms) {
	  var timer = undefined;
	  return function bufferFn() {
	    if (timer) {
	      clearTimeout(timer);
	    }
	    timer = setTimeout(fn, ms);
	  };
	}

	var Align = _react2['default'].createClass({
	  displayName: 'Align',

	  propTypes: {
	    childrenProps: _react.PropTypes.object,
	    align: _react.PropTypes.object.isRequired,
	    target: _react.PropTypes.func,
	    onAlign: _react.PropTypes.func,
	    monitorBufferTime: _react.PropTypes.number,
	    monitorWindowResize: _react.PropTypes.bool,
	    disabled: _react.PropTypes.bool,
	    children: _react.PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      target: function target() {
	        return window;
	      },
	      onAlign: function onAlign() {},
	      monitorBufferTime: 50,
	      monitorWindowResize: false,
	      disabled: false
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var props = this.props;
	    // if parent ref not attached .... use document.getElementById
	    if (!props.disabled) {
	      var source = _reactDom2['default'].findDOMNode(this);
	      props.onAlign(source, (0, _domAlign2['default'])(source, props.target(), props.align));
	      if (props.monitorWindowResize) {
	        this.startMonitorWindowResize();
	      }
	    }
	  },

	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    var reAlign = false;
	    var props = this.props;
	    var currentTarget = undefined;

	    if (!props.disabled) {
	      if (prevProps.disabled || prevProps.align !== props.align) {
	        reAlign = true;
	        currentTarget = props.target();
	      } else {
	        var lastTarget = prevProps.target();
	        currentTarget = props.target();
	        if ((0, _isWindow2['default'])(lastTarget) && (0, _isWindow2['default'])(currentTarget)) {
	          reAlign = false;
	        } else if (lastTarget !== currentTarget) {
	          reAlign = true;
	        }
	      }
	    }

	    if (reAlign) {
	      var source = _reactDom2['default'].findDOMNode(this);
	      props.onAlign(source, (0, _domAlign2['default'])(source, currentTarget, props.align));
	    }

	    if (props.monitorWindowResize && !props.disabled) {
	      this.startMonitorWindowResize();
	    } else {
	      this.stopMonitorWindowResize();
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this.stopMonitorWindowResize();
	  },

	  onWindowResize: function onWindowResize() {
	    var props = this.props;
	    if (!props.disabled) {
	      var source = _reactDom2['default'].findDOMNode(this);
	      props.onAlign(source, (0, _domAlign2['default'])(source, props.target(), props.align));
	    }
	  },

	  startMonitorWindowResize: function startMonitorWindowResize() {
	    if (!this.resizeHandler) {
	      this.resizeHandler = _rcUtil.Dom.addEventListener(window, 'resize', buffer(this.onWindowResize, this.props.monitorBufferTime));
	    }
	  },

	  stopMonitorWindowResize: function stopMonitorWindowResize() {
	    if (this.resizeHandler) {
	      this.resizeHandler.remove();
	      this.resizeHandler = null;
	    }
	  },

	  render: function render() {
	    var _props = this.props;
	    var childrenProps = _props.childrenProps;
	    var children = _props.children;

	    var child = _react2['default'].Children.only(children);
	    if (childrenProps) {
	      var newProps = {};
	      for (var prop in childrenProps) {
	        if (childrenProps.hasOwnProperty(prop)) {
	          newProps[prop] = this.props[childrenProps[prop]];
	        }
	      }
	      return _react2['default'].cloneElement(child, newProps);
	    }
	    return child;
	  }
	});

	exports['default'] = Align;
	module.exports = exports['default'];

/***/ },
/* 825 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__) {

	/**
	 * align dom node flexibly
	 * @author yiminghe@gmail.com
	 */

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _utils = __webpack_require__(__webpack_module_template_argument_0__);

	var _utils2 = _interopRequireDefault(_utils);

	var _getOffsetParent = __webpack_require__(__webpack_module_template_argument_1__);

	var _getOffsetParent2 = _interopRequireDefault(_getOffsetParent);

	var _getVisibleRectForElement = __webpack_require__(__webpack_module_template_argument_2__);

	var _getVisibleRectForElement2 = _interopRequireDefault(_getVisibleRectForElement);

	var _adjustForViewport = __webpack_require__(__webpack_module_template_argument_3__);

	var _adjustForViewport2 = _interopRequireDefault(_adjustForViewport);

	var _getRegion = __webpack_require__(__webpack_module_template_argument_4__);

	var _getRegion2 = _interopRequireDefault(_getRegion);

	var _getElFuturePos = __webpack_require__(__webpack_module_template_argument_5__);

	var _getElFuturePos2 = _interopRequireDefault(_getElFuturePos);

	// http://yiminghe.iteye.com/blog/1124720

	function isFailX(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.left < visibleRect.left || elFuturePos.left + elRegion.width > visibleRect.right;
	}

	function isFailY(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.top < visibleRect.top || elFuturePos.top + elRegion.height > visibleRect.bottom;
	}

	function isCompleteFailX(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.left > visibleRect.right || elFuturePos.left + elRegion.width < visibleRect.left;
	}

	function isCompleteFailY(elFuturePos, elRegion, visibleRect) {
	  return elFuturePos.top > visibleRect.bottom || elFuturePos.top + elRegion.height < visibleRect.top;
	}

	function flip(points, reg, map) {
	  var ret = [];
	  _utils2['default'].each(points, function (p) {
	    ret.push(p.replace(reg, function (m) {
	      return map[m];
	    }));
	  });
	  return ret;
	}

	function flipOffset(offset, index) {
	  offset[index] = -offset[index];
	  return offset;
	}

	function convertOffset(str, offsetLen) {
	  var n = undefined;
	  if (/%$/.test(str)) {
	    n = parseInt(str.substring(0, str.length - 1), 10) / 100 * offsetLen;
	  } else {
	    n = parseInt(str, 10);
	  }
	  return n || 0;
	}

	function normalizeOffset(offset, el) {
	  offset[0] = convertOffset(offset[0], el.width);
	  offset[1] = convertOffset(offset[1], el.height);
	}

	function domAlign(el, refNode, align) {
	  var points = align.points;
	  var offset = align.offset || [0, 0];
	  var targetOffset = align.targetOffset || [0, 0];
	  var overflow = align.overflow;
	  var target = align.target || refNode;
	  var source = align.source || el;
	  offset = [].concat(offset);
	  targetOffset = [].concat(targetOffset);
	  overflow = overflow || {};
	  var newOverflowCfg = {};

	  var fail = 0;
	  // 当前节点可以被放置的显示区域
	  var visibleRect = (0, _getVisibleRectForElement2['default'])(source);
	  // 当前节点所占的区域, left/top/width/height
	  var elRegion = (0, _getRegion2['default'])(source);
	  // 参照节点所占的区域, left/top/width/height
	  var refNodeRegion = (0, _getRegion2['default'])(target);
	  // 将 offset 转换成数值，支持百分比
	  normalizeOffset(offset, elRegion);
	  normalizeOffset(targetOffset, refNodeRegion);
	  // 当前节点将要被放置的位置
	  var elFuturePos = (0, _getElFuturePos2['default'])(elRegion, refNodeRegion, points, offset, targetOffset);
	  // 当前节点将要所处的区域
	  var newElRegion = _utils2['default'].merge(elRegion, elFuturePos);

	  // 如果可视区域不能完全放置当前节点时允许调整
	  if (visibleRect && (overflow.adjustX || overflow.adjustY)) {
	    if (overflow.adjustX) {
	      // 如果横向不能放下
	      if (isFailX(elFuturePos, elRegion, visibleRect)) {
	        // 对齐位置反下
	        var newPoints = flip(points, /[lr]/ig, {
	          l: 'r',
	          r: 'l'
	        });
	        // 偏移量也反下
	        var newOffset = flipOffset(offset, 0);
	        var newTargetOffset = flipOffset(targetOffset, 0);
	        var newElFuturePos = (0, _getElFuturePos2['default'])(elRegion, refNodeRegion, newPoints, newOffset, newTargetOffset);
	        if (!isCompleteFailX(newElFuturePos, elRegion, visibleRect)) {
	          fail = 1;
	          points = newPoints;
	          offset = newOffset;
	          targetOffset = newTargetOffset;
	        }
	      }
	    }

	    if (overflow.adjustY) {
	      // 如果纵向不能放下
	      if (isFailY(elFuturePos, elRegion, visibleRect)) {
	        // 对齐位置反下
	        var newPoints = flip(points, /[tb]/ig, {
	          t: 'b',
	          b: 't'
	        });
	        // 偏移量也反下
	        var newOffset = flipOffset(offset, 1);
	        var newTargetOffset = flipOffset(targetOffset, 1);
	        var newElFuturePos = (0, _getElFuturePos2['default'])(elRegion, refNodeRegion, newPoints, newOffset, newTargetOffset);
	        if (!isCompleteFailY(newElFuturePos, elRegion, visibleRect)) {
	          fail = 1;
	          points = newPoints;
	          offset = newOffset;
	          targetOffset = newTargetOffset;
	        }
	      }
	    }

	    // 如果失败，重新计算当前节点将要被放置的位置
	    if (fail) {
	      elFuturePos = (0, _getElFuturePos2['default'])(elRegion, refNodeRegion, points, offset, targetOffset);
	      _utils2['default'].mix(newElRegion, elFuturePos);
	    }

	    // 检查反下后的位置是否可以放下了
	    // 如果仍然放不下只有指定了可以调整当前方向才调整
	    newOverflowCfg.adjustX = overflow.adjustX && isFailX(elFuturePos, elRegion, visibleRect);

	    newOverflowCfg.adjustY = overflow.adjustY && isFailY(elFuturePos, elRegion, visibleRect);

	    // 确实要调整，甚至可能会调整高度宽度
	    if (newOverflowCfg.adjustX || newOverflowCfg.adjustY) {
	      newElRegion = (0, _adjustForViewport2['default'])(elFuturePos, elRegion, visibleRect, newOverflowCfg);
	    }
	  }

	  // need judge to in case set fixed with in css on height auto element
	  if (newElRegion.width !== elRegion.width) {
	    _utils2['default'].css(source, 'width', source.width() + newElRegion.width - elRegion.width);
	  }

	  if (newElRegion.height !== elRegion.height) {
	    _utils2['default'].css(source, 'height', source.height() + newElRegion.height - elRegion.height);
	  }

	  // https://github.com/kissyteam/kissy/issues/190
	  // http://localhost:8888/kissy/src/overlay/demo/other/relative_align/align.html
	  // 相对于屏幕位置没变，而 left/top 变了
	  // 例如 <div 'relative'><el absolute></div>
	  _utils2['default'].offset(source, {
	    left: newElRegion.left,
	    top: newElRegion.top
	  }, {
	    useCssRight: align.useCssRight,
	    useCssBottom: align.useCssBottom
	  });

	  return {
	    points: points,
	    offset: offset,
	    targetOffset: targetOffset,
	    overflow: newOverflowCfg
	  };
	}

	domAlign.__getOffsetParent = _getOffsetParent2['default'];

	domAlign.__getVisibleRectForElement = _getVisibleRectForElement2['default'];

	exports['default'] = domAlign;

	/**
	 *  2012-04-26 yiminghe@gmail.com
	 *   - 优化智能对齐算法
	 *   - 慎用 resizeXX
	 *
	 *  2011-07-13 yiminghe@gmail.com note:
	 *   - 增加智能对齐，以及大小调整选项
	 **/
		module.exports = exports['default'];

/***/ },
/* 826 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _utils = __webpack_require__(__webpack_module_template_argument_0__);

	var _utils2 = _interopRequireDefault(_utils);

	/**
	 * 得到会导致元素显示不全的祖先元素
	 */

	function getOffsetParent(element) {
	  // ie 这个也不是完全可行
	  /*
	   <div style="width: 50px;height: 100px;overflow: hidden">
	   <div style="width: 50px;height: 100px;position: relative;" id="d6">
	   元素 6 高 100px 宽 50px<br/>
	   </div>
	   </div>
	   */
	  // element.offsetParent does the right thing in ie7 and below. Return parent with layout!
	  //  In other browsers it only includes elements with position absolute, relative or
	  // fixed, not elements with overflow set to auto or scroll.
	  //        if (UA.ie && ieMode < 8) {
	  //            return element.offsetParent;
	  //        }
	  // 统一的 offsetParent 方法
	  var doc = element.ownerDocument;
	  var body = doc.body;
	  var parent = undefined;
	  var positionStyle = _utils2['default'].css(element, 'position');
	  var skipStatic = positionStyle === 'fixed' || positionStyle === 'absolute';

	  if (!skipStatic) {
	    return element.nodeName.toLowerCase() === 'html' ? null : element.parentNode;
	  }

	  for (parent = element.parentNode; parent && parent !== body; parent = parent.parentNode) {
	    positionStyle = _utils2['default'].css(parent, 'position');
	    if (positionStyle !== 'static') {
	      return parent;
	    }
	  }
	  return null;
	}

	exports['default'] = getOffsetParent;
	module.exports = exports['default'];

/***/ },
/* 827 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _utils = __webpack_require__(__webpack_module_template_argument_0__);

	var _utils2 = _interopRequireDefault(_utils);

	var _getOffsetParent = __webpack_require__(__webpack_module_template_argument_1__);

	var _getOffsetParent2 = _interopRequireDefault(_getOffsetParent);

	/**
	 * 获得元素的显示部分的区域
	 */
	function getVisibleRectForElement(element) {
	  var visibleRect = {
	    left: 0,
	    right: Infinity,
	    top: 0,
	    bottom: Infinity
	  };
	  var el = (0, _getOffsetParent2['default'])(element);
	  var scrollX = undefined;
	  var scrollY = undefined;
	  var winSize = undefined;
	  var doc = element.ownerDocument;
	  var win = doc.defaultView || doc.parentWindow;
	  var body = doc.body;
	  var documentElement = doc.documentElement;

	  // Determine the size of the visible rect by climbing the dom accounting for
	  // all scrollable containers.
	  while (el) {
	    // clientWidth is zero for inline block elements in ie.
	    if ((navigator.userAgent.indexOf('MSIE') === -1 || el.clientWidth !== 0) &&
	    // body may have overflow set on it, yet we still get the entire
	    // viewport. In some browsers, el.offsetParent may be
	    // document.documentElement, so check for that too.
	    el !== body && el !== documentElement && _utils2['default'].css(el, 'overflow') !== 'visible') {
	      var pos = _utils2['default'].offset(el);
	      // add border
	      pos.left += el.clientLeft;
	      pos.top += el.clientTop;
	      visibleRect.top = Math.max(visibleRect.top, pos.top);
	      visibleRect.right = Math.min(visibleRect.right,
	      // consider area without scrollBar
	      pos.left + el.clientWidth);
	      visibleRect.bottom = Math.min(visibleRect.bottom, pos.top + el.clientHeight);
	      visibleRect.left = Math.max(visibleRect.left, pos.left);
	    } else if (el === body || el === documentElement) {
	      break;
	    }
	    el = (0, _getOffsetParent2['default'])(el);
	  }

	  // Clip by window's viewport.
	  scrollX = _utils2['default'].getWindowScrollLeft(win);
	  scrollY = _utils2['default'].getWindowScrollTop(win);
	  visibleRect.left = Math.max(visibleRect.left, scrollX);
	  visibleRect.top = Math.max(visibleRect.top, scrollY);
	  winSize = {
	    width: _utils2['default'].viewportWidth(win),
	    height: _utils2['default'].viewportHeight(win)
	  };
	  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
	  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
	  return visibleRect.top >= 0 && visibleRect.left >= 0 && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null;
	}

	exports['default'] = getVisibleRectForElement;
	module.exports = exports['default'];

/***/ },
/* 828 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _utils = __webpack_require__(__webpack_module_template_argument_0__);

	var _utils2 = _interopRequireDefault(_utils);

	function adjustForViewport(elFuturePos, elRegion, visibleRect, overflow) {
	  var pos = _utils2['default'].clone(elFuturePos);
	  var size = {
	    width: elRegion.width,
	    height: elRegion.height
	  };

	  if (overflow.adjustX && pos.left < visibleRect.left) {
	    pos.left = visibleRect.left;
	  }

	  // Left edge inside and right edge outside viewport, try to resize it.
	  if (overflow.resizeWidth && pos.left >= visibleRect.left && pos.left + size.width > visibleRect.right) {
	    size.width -= pos.left + size.width - visibleRect.right;
	  }

	  // Right edge outside viewport, try to move it.
	  if (overflow.adjustX && pos.left + size.width > visibleRect.right) {
	    // 保证左边界和可视区域左边界对齐
	    pos.left = Math.max(visibleRect.right - size.width, visibleRect.left);
	  }

	  // Top edge outside viewport, try to move it.
	  if (overflow.adjustY && pos.top < visibleRect.top) {
	    pos.top = visibleRect.top;
	  }

	  // Top edge inside and bottom edge outside viewport, try to resize it.
	  if (overflow.resizeHeight && pos.top >= visibleRect.top && pos.top + size.height > visibleRect.bottom) {
	    size.height -= pos.top + size.height - visibleRect.bottom;
	  }

	  // Bottom edge outside viewport, try to move it.
	  if (overflow.adjustY && pos.top + size.height > visibleRect.bottom) {
	    // 保证上边界和可视区域上边界对齐
	    pos.top = Math.max(visibleRect.bottom - size.height, visibleRect.top);
	  }

	  return _utils2['default'].mix(pos, size);
	}

	exports['default'] = adjustForViewport;
	module.exports = exports['default'];

/***/ },
/* 829 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _utils = __webpack_require__(__webpack_module_template_argument_0__);

	var _utils2 = _interopRequireDefault(_utils);

	function getRegion(node) {
	  var offset = undefined;
	  var w = undefined;
	  var h = undefined;
	  if (!_utils2['default'].isWindow(node) && node.nodeType !== 9) {
	    offset = _utils2['default'].offset(node);
	    w = _utils2['default'].outerWidth(node);
	    h = _utils2['default'].outerHeight(node);
	  } else {
	    var win = _utils2['default'].getWindow(node);
	    offset = {
	      left: _utils2['default'].getWindowScrollLeft(win),
	      top: _utils2['default'].getWindowScrollTop(win)
	    };
	    w = _utils2['default'].viewportWidth(win);
	    h = _utils2['default'].viewportHeight(win);
	  }
	  offset.width = w;
	  offset.height = h;
	  return offset;
	}

	exports['default'] = getRegion;
	module.exports = exports['default'];

/***/ },
/* 830 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _getAlignOffset = __webpack_require__(__webpack_module_template_argument_0__);

	var _getAlignOffset2 = _interopRequireDefault(_getAlignOffset);

	function getElFuturePos(elRegion, refNodeRegion, points, offset, targetOffset) {
	  var xy = undefined;
	  var diff = undefined;
	  var p1 = undefined;
	  var p2 = undefined;

	  xy = {
	    left: elRegion.left,
	    top: elRegion.top
	  };

	  p1 = (0, _getAlignOffset2['default'])(refNodeRegion, points[1]);
	  p2 = (0, _getAlignOffset2['default'])(elRegion, points[0]);

	  diff = [p2.left - p1.left, p2.top - p1.top];

	  return {
	    left: xy.left - diff[0] + offset[0] - targetOffset[0],
	    top: xy.top - diff[1] + offset[1] - targetOffset[1]
	  };
	}

	exports['default'] = getElFuturePos;
	module.exports = exports['default'];

/***/ },
/* 831 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// export this package's api
	'use strict';

	module.exports = __webpack_require__(__webpack_module_template_argument_0__);

/***/ },
/* 832 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _ChildrenUtils = __webpack_require__(__webpack_module_template_argument_0__);

	var _AnimateChild = __webpack_require__(__webpack_module_template_argument_1__);

	var _AnimateChild2 = _interopRequireDefault(_AnimateChild);

	var _util = __webpack_require__(__webpack_module_template_argument_2__);

	var _util2 = _interopRequireDefault(_util);

	var defaultKey = 'rc_animate_' + Date.now();

	function getChildrenFromProps(props) {
	  var children = props.children;
	  if (_react2['default'].isValidElement(children)) {
	    if (!children.key) {
	      return _react2['default'].cloneElement(children, {
	        key: defaultKey
	      });
	    }
	  }
	  return children;
	}

	function noop() {}

	var Animate = _react2['default'].createClass({
	  displayName: 'Animate',

	  propTypes: {
	    component: _react2['default'].PropTypes.any,
	    animation: _react2['default'].PropTypes.object,
	    transitionName: _react2['default'].PropTypes.string,
	    transitionEnter: _react2['default'].PropTypes.bool,
	    transitionAppear: _react2['default'].PropTypes.bool,
	    exclusive: _react2['default'].PropTypes.bool,
	    transitionLeave: _react2['default'].PropTypes.bool,
	    onEnd: _react2['default'].PropTypes.func,
	    onEnter: _react2['default'].PropTypes.func,
	    onLeave: _react2['default'].PropTypes.func,
	    onAppear: _react2['default'].PropTypes.func,
	    showProp: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      animation: {},
	      component: 'span',
	      transitionEnter: true,
	      transitionLeave: true,
	      transitionAppear: false,
	      onEnd: noop,
	      onEnter: noop,
	      onLeave: noop,
	      onAppear: noop
	    };
	  },

	  getInitialState: function getInitialState() {
	    this.currentlyAnimatingKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	    return {
	      children: (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(this.props))
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    var _this = this;

	    var showProp = this.props.showProp;
	    var children = this.state.children;
	    if (showProp) {
	      children = children.filter(function (child) {
	        return !!child.props[showProp];
	      });
	    }
	    children.forEach(function (child) {
	      _this.performAppear(child.key);
	    });
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var _this2 = this;

	    this.nextProps = nextProps;
	    var nextChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(nextProps));
	    var props = this.props;
	    // exclusive needs immediate response
	    if (props.exclusive) {
	      Object.keys(this.currentlyAnimatingKeys).forEach(function (key) {
	        _this2.stop(key);
	      });
	    }
	    var showProp = props.showProp;
	    var currentlyAnimatingKeys = this.currentlyAnimatingKeys;
	    // last props children if exclusive
	    var currentChildren = props.exclusive ? (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props)) : this.state.children;
	    // in case destroy in showProp mode
	    var newChildren = [];
	    if (showProp) {
	      currentChildren.forEach(function (currentChild) {
	        var nextChild = (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, currentChild.key);
	        var newChild = undefined;
	        if ((!nextChild || !nextChild.props[showProp]) && currentChild.props[showProp]) {
	          newChild = _react2['default'].cloneElement(nextChild || currentChild, _defineProperty({}, showProp, true));
	        } else {
	          newChild = nextChild;
	        }
	        if (newChild) {
	          newChildren.push(newChild);
	        }
	      });
	      nextChildren.forEach(function (nextChild) {
	        if (!(0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, nextChild.key)) {
	          newChildren.push(nextChild);
	        }
	      });
	    } else {
	      newChildren = (0, _ChildrenUtils.mergeChildren)(currentChildren, nextChildren);
	    }

	    // need render to avoid update
	    this.setState({
	      children: newChildren
	    });

	    nextChildren.forEach(function (child) {
	      var key = child.key;
	      if (currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasPrev = (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
	      if (showProp) {
	        var showInNext = child.props[showProp];
	        if (hasPrev) {
	          var showInNow = (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	          if (!showInNow && showInNext) {
	            _this2.keysToEnter.push(key);
	          }
	        } else if (showInNext) {
	          _this2.keysToEnter.push(key);
	        }
	      } else if (!hasPrev) {
	        _this2.keysToEnter.push(key);
	      }
	    });

	    currentChildren.forEach(function (child) {
	      var key = child.key;
	      if (currentlyAnimatingKeys[key]) {
	        return;
	      }
	      var hasNext = (0, _ChildrenUtils.findChildInChildrenByKey)(nextChildren, key);
	      if (showProp) {
	        var showInNow = child.props[showProp];
	        if (hasNext) {
	          var showInNext = (0, _ChildrenUtils.findShownChildInChildrenByKey)(nextChildren, key, showProp);
	          if (!showInNext && showInNow) {
	            _this2.keysToLeave.push(key);
	          }
	        } else if (showInNow) {
	          _this2.keysToLeave.push(key);
	        }
	      } else if (!hasNext) {
	        _this2.keysToLeave.push(key);
	      }
	    });
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.isMounted()) {
	      var keysToEnter = this.keysToEnter;
	      this.keysToEnter = [];
	      keysToEnter.forEach(this.performEnter);
	      var keysToLeave = this.keysToLeave;
	      this.keysToLeave = [];
	      keysToLeave.forEach(this.performLeave);
	    }
	  },

	  performEnter: function performEnter(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillEnter(this.handleDoneAdding.bind(this, key, 'enter'));
	    }
	  },

	  performAppear: function performAppear(key) {
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillAppear(this.handleDoneAdding.bind(this, key, 'appear'));
	    }
	  },

	  handleDoneAdding: function handleDoneAdding(key, type) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));
	    if (!this.isValidChildByKey(currentChildren, key)) {
	      // exclusive will not need this
	      this.performLeave(key);
	    } else {
	      if (type === 'appear') {
	        if (_util2['default'].allowAppearCallback(props)) {
	          props.onAppear(key);
	          props.onEnd(key, true);
	        }
	      } else {
	        if (_util2['default'].allowEnterCallback(props)) {
	          props.onEnter(key);
	          props.onEnd(key, true);
	        }
	      }
	    }
	  },

	  performLeave: function performLeave(key) {
	    // may already remove by exclusive
	    if (this.refs[key]) {
	      this.currentlyAnimatingKeys[key] = true;
	      this.refs[key].componentWillLeave(this.handleDoneLeaving.bind(this, key));
	    }
	  },

	  handleDoneLeaving: function handleDoneLeaving(key) {
	    var props = this.props;
	    delete this.currentlyAnimatingKeys[key];
	    // if update on exclusive mode, skip check
	    if (props.exclusive && props !== this.nextProps) {
	      return;
	    }
	    var currentChildren = (0, _ChildrenUtils.toArrayChildren)(getChildrenFromProps(props));
	    // in case state change is too fast
	    if (this.isValidChildByKey(currentChildren, key)) {
	      this.performEnter(key);
	    } else {
	      if (_util2['default'].allowLeaveCallback(props)) {
	        props.onLeave(key);
	        props.onEnd(key, false);
	      }
	      if (this.isMounted() && !(0, _ChildrenUtils.isSameChildren)(this.state.children, currentChildren, props.showProp)) {
	        this.setState({
	          children: currentChildren
	        });
	      }
	    }
	  },

	  isValidChildByKey: function isValidChildByKey(currentChildren, key) {
	    var showProp = this.props.showProp;
	    if (showProp) {
	      return (0, _ChildrenUtils.findShownChildInChildrenByKey)(currentChildren, key, showProp);
	    }
	    return (0, _ChildrenUtils.findChildInChildrenByKey)(currentChildren, key);
	  },

	  stop: function stop(key) {
	    delete this.currentlyAnimatingKeys[key];
	    var component = this.refs[key];
	    if (component) {
	      component.stop();
	    }
	  },

	  render: function render() {
	    var props = this.props;
	    this.nextProps = props;
	    var stateChildren = this.state.children;
	    var children = null;
	    if (stateChildren) {
	      children = stateChildren.map(function (child) {
	        if (child === null) {
	          return child;
	        }
	        if (!child.key) {
	          throw new Error('must set key for <rc-animate> children');
	        }
	        return _react2['default'].createElement(_AnimateChild2['default'], {
	          key: child.key,
	          ref: child.key,
	          animation: props.animation,
	          transitionName: props.transitionName,
	          transitionEnter: props.transitionEnter,
	          transitionAppear: props.transitionAppear,
	          transitionLeave: props.transitionLeave }, child);
	      });
	    }
	    var Component = props.component;
	    if (Component) {
	      return _react2['default'].createElement(Component, this.props, children);
	    }
	    return children[0] || null;
	  }
	});

	exports['default'] = Animate;
	module.exports = exports['default'];

/***/ },
/* 833 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _cssAnimation = __webpack_require__(__webpack_module_template_argument_0__);

	var _cssAnimation2 = _interopRequireDefault(_cssAnimation);

	var _util = __webpack_require__(__webpack_module_template_argument_1__);

	var _util2 = _interopRequireDefault(_util);

	var transitionMap = {
	  enter: 'transitionEnter',
	  appear: 'transitionAppear',
	  leave: 'transitionLeave'
	};

	var AnimateChild = _react2['default'].createClass({
	  displayName: 'AnimateChild',

	  propTypes: {
	    children: _react2['default'].PropTypes.any
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this.stop();
	  },

	  componentWillEnter: function componentWillEnter(done) {
	    if (_util2['default'].isEnterSupported(this.props)) {
	      this.transition('enter', done);
	    } else {
	      done();
	    }
	  },

	  componentWillAppear: function componentWillAppear(done) {
	    if (_util2['default'].isAppearSupported(this.props)) {
	      this.transition('appear', done);
	    } else {
	      done();
	    }
	  },

	  componentWillLeave: function componentWillLeave(done) {
	    if (_util2['default'].isLeaveSupported(this.props)) {
	      this.transition('leave', done);
	    } else {
	      done();
	    }
	  },

	  transition: function transition(animationType, finishCallback) {
	    var _this = this;

	    var node = _reactDom2['default'].findDOMNode(this);
	    var props = this.props;
	    var transitionName = props.transitionName;
	    this.stop();
	    var end = function end() {
	      _this.stopper = null;
	      finishCallback();
	    };
	    if ((_cssAnimation.isCssAnimationSupported || !props.animation[animationType]) && transitionName && props[transitionMap[animationType]]) {
	      this.stopper = (0, _cssAnimation2['default'])(node, transitionName + '-' + animationType, end);
	    } else {
	      this.stopper = props.animation[animationType](node, end);
	    }
	  },

	  stop: function stop() {
	    var stopper = this.stopper;
	    if (stopper) {
	      this.stopper = null;
	      stopper.stop();
	    }
	  },

	  render: function render() {
	    return this.props.children;
	  }
	});

	exports['default'] = AnimateChild;
	module.exports = exports['default'];

/***/ },
/* 834 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Event = __webpack_require__(__webpack_module_template_argument_0__);

	var _Event2 = _interopRequireDefault(_Event);

	var _componentClasses = __webpack_require__(__webpack_module_template_argument_1__);

	var _componentClasses2 = _interopRequireDefault(_componentClasses);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	var isCssAnimationSupported = _Event2["default"].endEvents.length !== 0;

	var capitalPrefixes = ['Webkit', 'Moz', 'O',
	// ms is special .... !
	'ms'];
	var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];

	function getDuration(node, name) {
	  var style = window.getComputedStyle(node);

	  var ret = '';
	  for (var i = 0; i < prefixes.length; i++) {
	    ret = style.getPropertyValue(prefixes[i] + name);
	    if (ret) {
	      break;
	    }
	  }
	  return ret;
	}

	function fixBrowserByTimeout(node) {
	  if (isCssAnimationSupported) {
	    var transitionDuration = parseFloat(getDuration(node, 'transition-duration')) || 0;
	    var animationDuration = parseFloat(getDuration(node, 'animation-duration')) || 0;
	    var time = Math.max(transitionDuration, animationDuration);
	    // sometimes, browser bug
	    node.rcEndAnimTimeout = setTimeout(function () {
	      node.rcEndAnimTimeout = null;
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }, time * 1000 + 200);
	  }
	}

	function clearBrowserBugTimeout(node) {
	  if (node.rcEndAnimTimeout) {
	    clearTimeout(node.rcEndAnimTimeout);
	    node.rcEndAnimTimeout = null;
	  }
	}

	var cssAnimation = function cssAnimation(node, transitionName, endCallback) {
	  var className = transitionName;
	  var activeClassName = className + '-active';
	  var end = endCallback;
	  var start = void 0;
	  var active = void 0;
	  var nodeClasses = (0, _componentClasses2["default"])(node);

	  if (endCallback && Object.prototype.toString.call(endCallback) === '[object Object]') {
	    end = endCallback.end;
	    start = endCallback.start;
	    active = endCallback.active;
	  }

	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }

	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }

	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }

	    clearBrowserBugTimeout(node);

	    nodeClasses.remove(className);
	    nodeClasses.remove(activeClassName);

	    _Event2["default"].removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;

	    // Usually this optional end is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (end) {
	      end();
	    }
	  };

	  _Event2["default"].addEndEventListener(node, node.rcEndListener);

	  nodeClasses.add(className);

	  if (start) {
	    start();
	  }

	  node.rcAnimTimeout = setTimeout(function () {
	    node.rcAnimTimeout = null;
	    nodeClasses.add(activeClassName);
	    if (active) {
	      active();
	    }
	    fixBrowserByTimeout(node);
	  }, 0);

	  return {
	    stop: function stop() {
	      if (node.rcEndListener) {
	        node.rcEndListener();
	      }
	    }
	  };
	};

	cssAnimation.style = function (node, style, callback) {
	  if (node.rcEndListener) {
	    node.rcEndListener();
	  }

	  node.rcEndListener = function (e) {
	    if (e && e.target !== node) {
	      return;
	    }

	    if (node.rcAnimTimeout) {
	      clearTimeout(node.rcAnimTimeout);
	      node.rcAnimTimeout = null;
	    }

	    clearBrowserBugTimeout(node);

	    _Event2["default"].removeEndEventListener(node, node.rcEndListener);
	    node.rcEndListener = null;

	    // Usually this optional callback is used for informing an owner of
	    // a leave animation and telling it to remove the child.
	    if (callback) {
	      callback();
	    }
	  };

	  _Event2["default"].addEndEventListener(node, node.rcEndListener);

	  node.rcAnimTimeout = setTimeout(function () {
	    for (var s in style) {
	      if (style.hasOwnProperty(s)) {
	        node.style[s] = style[s];
	      }
	    }
	    node.rcAnimTimeout = null;
	    fixBrowserByTimeout(node);
	  }, 0);
	};

	cssAnimation.setTransition = function (node, p, value) {
	  var property = p;
	  var v = value;
	  if (value === undefined) {
	    v = property;
	    property = '';
	  }
	  property = property || '';
	  capitalPrefixes.forEach(function (prefix) {
	    node.style[prefix + 'Transition' + property] = v;
	  });
	};

	cssAnimation.isCssAnimationSupported = isCssAnimationSupported;

	exports["default"] = cssAnimation;
	module.exports = exports['default'];

/***/ },
/* 835 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	'use strict';

	/**
	 * Module dependencies.
	 */

	try {
	  var index = __webpack_require__(__webpack_module_template_argument_0__);
	} catch (err) {
	  var index = __webpack_require__(__webpack_module_template_argument_1__);
	}

	/**
	 * Whitespace regexp.
	 */

	var re = /\s+/;

	/**
	 * toString reference.
	 */

	var toString = Object.prototype.toString;

	/**
	 * Wrap `el` in a `ClassList`.
	 *
	 * @param {Element} el
	 * @return {ClassList}
	 * @api public
	 */

	module.exports = function (el) {
	  return new ClassList(el);
	};

	/**
	 * Initialize a new ClassList for `el`.
	 *
	 * @param {Element} el
	 * @api private
	 */

	function ClassList(el) {
	  if (!el || !el.nodeType) {
	    throw new Error('A DOM element reference is required');
	  }
	  this.el = el;
	  this.list = el.classList;
	}

	/**
	 * Add class `name` if not already present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.add = function (name) {
	  // classList
	  if (this.list) {
	    this.list.add(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (! ~i) arr.push(name);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove class `name` when present, or
	 * pass a regular expression to remove
	 * any which match.
	 *
	 * @param {String|RegExp} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.remove = function (name) {
	  if ('[object RegExp]' == toString.call(name)) {
	    return this.removeMatching(name);
	  }

	  // classList
	  if (this.list) {
	    this.list.remove(name);
	    return this;
	  }

	  // fallback
	  var arr = this.array();
	  var i = index(arr, name);
	  if (~i) arr.splice(i, 1);
	  this.el.className = arr.join(' ');
	  return this;
	};

	/**
	 * Remove all classes matching `re`.
	 *
	 * @param {RegExp} re
	 * @return {ClassList}
	 * @api private
	 */

	ClassList.prototype.removeMatching = function (re) {
	  var arr = this.array();
	  for (var i = 0; i < arr.length; i++) {
	    if (re.test(arr[i])) {
	      this.remove(arr[i]);
	    }
	  }
	  return this;
	};

	/**
	 * Toggle class `name`, can force state via `force`.
	 *
	 * For browsers that support classList, but do not support `force` yet,
	 * the mistake will be detected and corrected.
	 *
	 * @param {String} name
	 * @param {Boolean} force
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.toggle = function (name, force) {
	  // classList
	  if (this.list) {
	    if ("undefined" !== typeof force) {
	      if (force !== this.list.toggle(name, force)) {
	        this.list.toggle(name); // toggle again to correct
	      }
	    } else {
	        this.list.toggle(name);
	      }
	    return this;
	  }

	  // fallback
	  if ("undefined" !== typeof force) {
	    if (!force) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  } else {
	    if (this.has(name)) {
	      this.remove(name);
	    } else {
	      this.add(name);
	    }
	  }

	  return this;
	};

	/**
	 * Return an array of classes.
	 *
	 * @return {Array}
	 * @api public
	 */

	ClassList.prototype.array = function () {
	  var className = this.el.getAttribute('class') || '';
	  var str = className.replace(/^\s+|\s+$/g, '');
	  var arr = str.split(re);
	  if ('' === arr[0]) arr.shift();
	  return arr;
	};

	/**
	 * Check if class `name` is present.
	 *
	 * @param {String} name
	 * @return {ClassList}
	 * @api public
	 */

	ClassList.prototype.has = ClassList.prototype.contains = function (name) {
	  return this.list ? this.list.contains(name) : !! ~index(this.array(), name);
		};

/***/ },
/* 836 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _LazyRenderBox = __webpack_require__(__webpack_module_template_argument_0__);

	var _LazyRenderBox2 = _interopRequireDefault(_LazyRenderBox);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}

	var PopupInner = _react2["default"].createClass({
	  displayName: 'PopupInner',

	  propTypes: {
	    hiddenClassName: _react.PropTypes.string,
	    className: _react.PropTypes.string,
	    prefixCls: _react.PropTypes.string,
	    onMouseEnter: _react.PropTypes.func,
	    onMouseLeave: _react.PropTypes.func,
	    children: _react.PropTypes.any
	  },
	  render: function render() {
	    var props = this.props;
	    var className = props.className;
	    if (!props.visible) {
	      className += ' ' + props.hiddenClassName;
	    }
	    return _react2["default"].createElement('div', {
	      className: className,
	      onMouseEnter: props.onMouseEnter,
	      onMouseLeave: props.onMouseLeave,
	      style: props.style
	    }, _react2["default"].createElement(_LazyRenderBox2["default"], { className: props.prefixCls + '-content', visible: props.visible }, props.children));
	  }
	});

	exports["default"] = PopupInner;
	module.exports = exports['default'];

/***/ },
/* 837 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	module.exports = __webpack_require__(__webpack_module_template_argument_0__);

/***/ },
/* 838 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _placements = __webpack_require__(__webpack_module_template_argument_0__);

	var _rcTrigger = __webpack_require__(__webpack_module_template_argument_1__);

	var _rcTrigger2 = _interopRequireDefault(_rcTrigger);

	var Tooltip = _react2['default'].createClass({
	  displayName: 'Tooltip',

	  propTypes: {
	    trigger: _react.PropTypes.any,
	    children: _react.PropTypes.any,
	    defaultVisible: _react.PropTypes.bool,
	    visible: _react.PropTypes.bool,
	    placement: _react.PropTypes.string,
	    transitionName: _react.PropTypes.string,
	    animation: _react.PropTypes.any,
	    onVisibleChange: _react.PropTypes.func,
	    afterVisibleChange: _react.PropTypes.func,
	    overlay: _react.PropTypes.node.isRequired,
	    overlayStyle: _react.PropTypes.object,
	    overlayClassName: _react.PropTypes.string,
	    prefixCls: _react.PropTypes.string,
	    mouseEnterDelay: _react.PropTypes.number,
	    mouseLeaveDelay: _react.PropTypes.number,
	    getTooltipContainer: _react.PropTypes.func,
	    destroyTooltipOnHide: _react.PropTypes.bool,
	    align: _react.PropTypes.shape({
	      offset: _react.PropTypes.array,
	      targetOffset: _react.PropTypes.array
	    }),
	    arrowContent: _react.PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-tooltip',
	      mouseEnterDelay: 0,
	      destroyTooltipOnHide: false,
	      mouseLeaveDelay: 0.1,
	      align: {},
	      placement: 'right',
	      trigger: ['hover'],
	      arrowContent: null
	    };
	  },

	  getPopupElement: function getPopupElement() {
	    var _props = this.props;
	    var arrowContent = _props.arrowContent;
	    var overlay = _props.overlay;
	    var prefixCls = _props.prefixCls;

	    return [_react2['default'].createElement('div', { className: prefixCls + '-arrow', key: 'arrow' }, arrowContent), _react2['default'].createElement('div', { className: prefixCls + '-inner', key: 'content' }, overlay)];
	  },

	  getPopupDomNode: function getPopupDomNode() {
	    return this.refs.trigger.popupDomNode;
	  },

	  render: function render() {
	    var _props2 = this.props;
	    var overlayClassName = _props2.overlayClassName;
	    var trigger = _props2.trigger;
	    var mouseEnterDelay = _props2.mouseEnterDelay;
	    var mouseLeaveDelay = _props2.mouseLeaveDelay;
	    var overlayStyle = _props2.overlayStyle;
	    var prefixCls = _props2.prefixCls;
	    var children = _props2.children;
	    var onVisibleChange = _props2.onVisibleChange;
	    var transitionName = _props2.transitionName;
	    var animation = _props2.animation;
	    var placement = _props2.placement;
	    var align = _props2.align;
	    var destroyTooltipOnHide = _props2.destroyTooltipOnHide;
	    var defaultVisible = _props2.defaultVisible;
	    var getTooltipContainer = _props2.getTooltipContainer;

	    var restProps = _objectWithoutProperties(_props2, ['overlayClassName', 'trigger', 'mouseEnterDelay', 'mouseLeaveDelay', 'overlayStyle', 'prefixCls', 'children', 'onVisibleChange', 'transitionName', 'animation', 'placement', 'align', 'destroyTooltipOnHide', 'defaultVisible', 'getTooltipContainer']);

	    var extraProps = _extends({}, restProps);
	    if ('visible' in this.props) {
	      extraProps.popupVisible = this.props.visible;
	    }
	    return _react2['default'].createElement(_rcTrigger2['default'], _extends({ popupClassName: overlayClassName,
	      ref: 'trigger',
	      prefixCls: prefixCls,
	      popup: this.getPopupElement(),
	      action: trigger,
	      builtinPlacements: _placements.placements,
	      popupPlacement: placement,
	      popupAlign: align,
	      getPopupContainer: getTooltipContainer,
	      onPopupVisibleChange: onVisibleChange,
	      popupTransitionName: transitionName,
	      popupAnimation: animation,
	      defaultPopupVisible: defaultVisible,
	      destroyPopupOnHide: destroyTooltipOnHide,
	      mouseLeaveDelay: mouseLeaveDelay,
	      popupStyle: overlayStyle,
	      mouseEnterDelay: mouseEnterDelay
	    }, extraProps), children);
	  }
	});

	exports['default'] = Tooltip;
	module.exports = exports['default'];

/***/ },
/* 839 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	/**
	 * Const Component for uxcore
	 * @author zhouquan.yezq
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(__webpack_module_template_argument_0__);

/***/ },
/* 840 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	var React = __webpack_require__(3);
	var ReactDOM = __webpack_require__(4);
	var Constants = __webpack_require__(__webpack_module_template_argument_0__);
	var classnames = __webpack_require__(5);
	var assign = __webpack_require__(334);
	var deepequal = __webpack_require__(335);

	var FormField = function (_React$Component) {
	    _inherits(FormField, _React$Component);

	    function FormField(props) {
	        _classCallCheck(this, FormField);

	        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	        _this.state = {
	            value: props.value,
	            formatValue: _this.formatValue(props.value),
	            error: false,
	            errMsg: ''
	        };
	        return _this;
	    }

	    FormField.prototype.componentDidMount = function componentDidMount() {
	        var me = this;
	        if (!me.props.standalone) {
	            me.props.attachFormField(me);
	            me.props.handleDataChange(me, {
	                value: me.props.value,
	                pass: true
	            }, true);
	        }
	    };

	    FormField.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        var me = this;
	        if (!me._isEqual(nextProps.value, me.props.value)) {
	            me.handleDataChange(nextProps.value, true);
	        }
	    };

	    FormField.prototype._isEqual = function _isEqual(a, b) {
	        return deepequal(a, b);
	    };

	    FormField.prototype.componentWillUnmount = function componentWillUnmount() {
	        var me = this;
	        if (!me.props.standalone) {
	            this.props.detachFormField(this);
	        }
	    };

	    FormField.prototype.getName = function getName() {
	        return this.props.jsxname;
	    };

	    /*
	     * Fired when field value changes，update form's state and then trigger re-render.
	     * @param fromReset {boolean} if handleDataChange is invoked by form's resetValues,
	     * doValidate should not be invoked.
	     */

	    FormField.prototype.handleDataChange = function handleDataChange(value, fromReset) {
	        var me = this;
	        me.setState({
	            value: value,
	            formatValue: me.formatValue(value),
	            error: !!fromReset ? false : me.state.error,
	            /*
	             * why set state fromReset? some field like editor cannot be reset in the common way
	             * so set this state to tell the field that you need to reset by yourself.
	             */
	            fromReset: !!fromReset
	        }, function () {
	            var pass = true;
	            // validateOnBlur only support InputFormField & TextAraeFormField now
	            if (!fromReset && !me.props.standalone && !me.props.validateOnBlur) {
	                pass = me.doValidate();
	            }
	            !!me.props.handleDataChange && me.props.handleDataChange(me, {
	                value: value,
	                pass: pass
	            });
	        });
	    };

	    /**
	     * @return {boolean} if validate pass, return true, or, return false
	     * if no rule, it means validate pass.
	     */

	    FormField.prototype.doValidate = function doValidate(force) {
	        var me = this;
	        var instant = true;
	        if ('instantValidate' in me.props) {
	            instant = me.props.instantValidate;
	        } else {
	            instant = me.props.jsxinstant;
	        }
	        // `force` has the top priority, `undefined` is not equal to `false`
	        // `instant` has the sceond priority here
	        // eternalsky@2016.03.15
	        if (force === true || force !== false && instant) {
	            if (me.props.jsxrules) {
	                var error = me.isDirty();
	                me.setState({ error: error.isDirty, errMsg: error.errMsg });
	                return !error.isDirty;
	            } else {
	                return true;
	            }
	        } else {
	            return true;
	        }
	    };

	    /*
	     * rule can be an object, containing errMsg & validator,
	     * and rule can also be an array containing such objects.
	     * this func will check them one by one, and return false
	     * unless all rules pass
	     */

	    FormField.prototype.isDirty = function isDirty() {
	        var me = this;
	        var rules = me.props.jsxrules;
	        var isDirty = false;
	        var errMsg = "";
	        if ((typeof rules === 'undefined' ? 'undefined' : _typeof(rules)) == "object" && !Array.isArray(rules)) {
	            isDirty = !rules.validator(me.state.value);
	            errMsg = rules.errMsg;
	        } else if (Array.isArray(rules)) {
	            for (var i = 0; i < rules.length; i++) {
	                isDirty = !rules[i].validator(me.state.value);
	                if (isDirty) {
	                    errMsg = rules[i].errMsg;
	                    break;
	                }
	            }
	        }
	        return {
	            isDirty: isDirty,
	            errMsg: errMsg
	        };
	    };

	    FormField.prototype.renderTips = function renderTips() {
	        var me = this;
	        var mode = me.props.jsxmode || me.props.mode;
	        if (mode != Constants.MODE.EDIT) return;
	        if (me.props.standalone && me.props.message && me.props.message.type == "tip") {
	            return React.createElement('li', { className: 'kuma-uxform-tips' }, React.createElement('i', { className: 'kuma-icon kuma-icon-information' }), me.props.message.message);
	        }
	        if (!!this.props.jsxtips && !me.state.error) {
	            return React.createElement('li', { className: 'kuma-uxform-tips' }, React.createElement('i', { className: 'kuma-icon kuma-icon-information' }), this.props.jsxtips);
	        }
	    };

	    /*
	     * You should rewrite this method，when you need to format the value as you concern.
	     */

	    FormField.prototype.formatValue = function formatValue(value) {
	        return value;
	    };

	    /*
	     * You should rewrite this method, when you are developing a new type of form field.
	     */

	    FormField.prototype.renderField = function renderField() {};

	    FormField.prototype.renderErrorMsg = function renderErrorMsg() {
	        var me = this;
	        var mode = me.props.jsxmode || me.props.mode;
	        if (mode != Constants.MODE.EDIT) return;
	        if (me.props.standalone && me.props.message && me.props.message.type == "error") {
	            return React.createElement('li', { className: 'kuma-uxform-errormsg' }, React.createElement('i', { className: 'kuma-icon kuma-icon-error' }), me.props.message.message);
	        }
	        if (!!me.state.error) {
	            return React.createElement('li', { className: 'kuma-uxform-errormsg' }, React.createElement('i', { className: 'kuma-icon kuma-icon-error' }), me.state.errMsg);
	        }
	    };

	    FormField.prototype.renderLabel = function renderLabel() {
	        var me = this;
	        var mode = me.props.jsxmode || me.props.mode;
	        var align = me.props.verticalAlign || me.props.jsxVerticalAlign; // jsxVerticalAlign is an internal varible.
	        if (me.props.jsxshowLabel) {
	            return React.createElement('label', { className: classnames({
	                    "kuma-label": true,
	                    "vertical-align": align
	                }) }, React.createElement('span', { className: 'required' }, me.props.required && mode == Constants.MODE.EDIT ? "* " : ""), React.createElement('span', { className: 'label-content', dangerouslySetInnerHTML: { __html: me.props.jsxlabel } }));
	        }
	    };

	    FormField.prototype.addSpecificClass = function addSpecificClass(classname) {
	        return this.props.jsxprefixCls;
	    };

	    FormField.prototype.render = function render() {
	        var _classnames;

	        var me = this;
	        var specificCls = me.addSpecificClass();
	        var mode = me.props.jsxmode || me.props.mode;

	        return React.createElement('div', { className: classnames((_classnames = {}, _classnames[specificCls] = true, _classnames[me.props.className] = !!me.props.className, _classnames)), style: assign({}, me.props.style, {
	                display: me.props.jsxshow ? "table" : "none"
	            }) }, me.renderLabel(), React.createElement('ul', { className: classnames({
	                "kuma-uxform-field-content": true,
	                "view-mode": mode == Constants.MODE.VIEW,
	                "edit-mode": mode == Constants.MODE.EDIT,
	                "has-error": !!me.state.error
	            }) }, React.createElement('li', { className: 'kuma-uxform-field-core' }, me.renderField()), me.renderTips(), me.renderErrorMsg()));
	    };

	    return FormField;
	}(React.Component);

	;

	FormField.propTypes = {
	    instantValidate: React.PropTypes.bool, // 是否立即校验
	    jsxshow: React.PropTypes.bool,
	    jsxmode: React.PropTypes.string,
	    jsxshowLabel: React.PropTypes.bool,
	    jsxprefixCls: React.PropTypes.string,
	    jsxflex: React.PropTypes.number,
	    jsxname: React.PropTypes.string.isRequired,
	    jsxplaceholder: React.PropTypes.string,
	    jsxlabel: React.PropTypes.string,
	    jsxtips: React.PropTypes.string,
	    jsxrules: React.PropTypes.oneOfType([React.PropTypes.object, React.PropTypes.array]),
	    standalone: React.PropTypes.bool,
	    required: React.PropTypes.bool
	};

	FormField.defaultProps = {
	    jsxshow: true, // 是否显示该块
	    jsxshowLabel: true, // 是否展示 label
	    jsxprefixCls: "kuma-uxform-field", // 默认类名
	    jsxflex: 1, // 占 Form 的比例，类似于 css3 中的 flex-box
	    jsxname: "", // 表单字段
	    jsxplaceholder: "", // 在未选值之前的占位符
	    jsxlabel: "", // 左侧表单域标题
	    jsxtips: "", // 提醒
	    standalone: false, // 是否处于独立使用模式
	    mode: Constants.MODE.EDIT,
	    required: false
	};

	FormField.displayName = "FormField";

	module.exports = FormField;

/***/ },
/* 841 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var pSlice = Array.prototype.slice;
	var objectKeys = __webpack_require__(__webpack_module_template_argument_0__);
	var isArguments = __webpack_require__(__webpack_module_template_argument_1__);

	var deepEqual = module.exports = function (actual, expected, opts) {
	  if (!opts) opts = {};
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (actual instanceof Date && expected instanceof Date) {
	    return actual.getTime() === expected.getTime();

	    // 7.3. Other pairs that do not both pass typeof value == 'object',
	    // equivalence is determined by ==.
	  } else if (!actual || !expected || (typeof actual === 'undefined' ? 'undefined' : _typeof(actual)) != 'object' && (typeof expected === 'undefined' ? 'undefined' : _typeof(expected)) != 'object') {
	      return opts.strict ? actual === expected : actual == expected;

	      // 7.4. For all other Object pairs, including Array objects, equivalence is
	      // determined by having the same number of owned properties (as verified
	      // with Object.prototype.hasOwnProperty.call), the same set of keys
	      // (although not necessarily the same order), equivalent values for every
	      // corresponding key, and an identical 'prototype' property. Note: this
	      // accounts for both named and indexed properties on Arrays.
	    } else {
	        return objEquiv(actual, expected, opts);
	      }
	};

	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}

	function isBuffer(x) {
	  if (!x || (typeof x === 'undefined' ? 'undefined' : _typeof(x)) !== 'object' || typeof x.length !== 'number') return false;
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') return false;
	  return true;
	}

	function objEquiv(a, b, opts) {
	  var i, key;
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return deepEqual(a, b, opts);
	  }
	  if (isBuffer(a)) {
	    if (!isBuffer(b)) {
	      return false;
	    }
	    if (a.length !== b.length) return false;
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) return false;
	    }
	    return true;
	  }
	  try {
	    var ka = objectKeys(a),
	        kb = objectKeys(b);
	  } catch (e) {
	    //happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length) return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i]) return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], opts)) return false;
	  }
	  return (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === (typeof b === 'undefined' ? 'undefined' : _typeof(b));
		}

/***/ },
/* 842 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	/**
	 * Select2 Component for uxcore
	 * @author 
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(__webpack_module_template_argument_0__);

/***/ },
/* 843 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _Menu = __webpack_require__(__webpack_module_template_argument_0__);

	var _Menu2 = _interopRequireDefault(_Menu);

	var _SubMenu = __webpack_require__(__webpack_module_template_argument_1__);

	var _SubMenu2 = _interopRequireDefault(_SubMenu);

	var _MenuItem = __webpack_require__(__webpack_module_template_argument_2__);

	var _MenuItem2 = _interopRequireDefault(_MenuItem);

	var _MenuItemGroup = __webpack_require__(__webpack_module_template_argument_3__);

	var _MenuItemGroup2 = _interopRequireDefault(_MenuItemGroup);

	var _Divider = __webpack_require__(__webpack_module_template_argument_4__);

	var _Divider2 = _interopRequireDefault(_Divider);

	exports.SubMenu = _SubMenu2['default'];
	exports.Item = _MenuItem2['default'];
	exports.MenuItem = _MenuItem2['default'];
	exports.MenuItemGroup = _MenuItemGroup2['default'];
	exports.ItemGroup = _MenuItemGroup2['default'];
	exports.Divider = _Divider2['default'];
	exports['default'] = _Menu2['default'];

/***/ },
/* 844 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _MenuMixin = __webpack_require__(__webpack_module_template_argument_0__);

	var _MenuMixin2 = _interopRequireDefault(_MenuMixin);

	var _objectAssign = __webpack_require__(__webpack_module_template_argument_1__);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _util = __webpack_require__(__webpack_module_template_argument_2__);

	var Menu = _react2['default'].createClass({
	  displayName: 'Menu',

	  propTypes: {
	    openSubMenuOnMouseEnter: _react2['default'].PropTypes.bool,
	    closeSubMenuOnMouseLeave: _react2['default'].PropTypes.bool,
	    selectedKeys: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.string),
	    defaultSelectedKeys: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.string),
	    defaultOpenKeys: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.string),
	    openKeys: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.string),
	    mode: _react2['default'].PropTypes.string,
	    onClick: _react2['default'].PropTypes.func,
	    onSelect: _react2['default'].PropTypes.func,
	    onDeselect: _react2['default'].PropTypes.func,
	    onDestroy: _react2['default'].PropTypes.func,
	    openTransitionName: _react2['default'].PropTypes.string,
	    openAnimation: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.object]),
	    level: _react2['default'].PropTypes.number,
	    eventKey: _react2['default'].PropTypes.string,
	    selectable: _react2['default'].PropTypes.bool,
	    children: _react2['default'].PropTypes.any
	  },

	  mixins: [_MenuMixin2['default']],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      openSubMenuOnMouseEnter: true,
	      closeSubMenuOnMouseLeave: true,
	      selectable: true,
	      onClick: _util.noop,
	      onSelect: _util.noop,
	      onOpen: _util.noop,
	      onClose: _util.noop,
	      onDeselect: _util.noop,
	      defaultSelectedKeys: [],
	      defaultOpenKeys: []
	    };
	  },

	  getInitialState: function getInitialState() {
	    var props = this.props;
	    var selectedKeys = props.defaultSelectedKeys;
	    var openKeys = props.defaultOpenKeys;
	    if ('selectedKeys' in props) {
	      selectedKeys = props.selectedKeys || [];
	    }
	    if ('openKeys' in props) {
	      openKeys = props.openKeys || [];
	    }
	    return {
	      selectedKeys: selectedKeys, openKeys: openKeys
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var props = {};
	    if ('selectedKeys' in nextProps) {
	      props.selectedKeys = nextProps.selectedKeys;
	    }
	    if ('openKeys' in nextProps) {
	      props.openKeys = nextProps.openKeys;
	    }
	    this.setState(props);
	  },

	  onDestroy: function onDestroy(key) {
	    var state = this.state;
	    var props = this.props;
	    var selectedKeys = state.selectedKeys;
	    var openKeys = state.openKeys;
	    var index = selectedKeys.indexOf(key);
	    if (!('selectedKeys' in props) && index !== -1) {
	      selectedKeys.splice(index, 1);
	    }
	    index = openKeys.indexOf(key);
	    if (!('openKeys' in props) && index !== -1) {
	      openKeys.splice(index, 1);
	    }
	  },

	  onItemHover: function onItemHover(e) {
	    var _this = this;

	    var item = e.item;

	    // special for top sub menu
	    if (this.props.mode !== 'inline' && !this.props.closeSubMenuOnMouseLeave && item.isSubMenu) {
	      (function () {
	        var activeKey = _this.state.activeKey;
	        var activeItem = _this.getFlatInstanceArray().filter(function (c) {
	          return c && c.props.eventKey === activeKey;
	        })[0];
	        if (activeItem && activeItem.props.open) {
	          _this.onOpenChange({
	            key: item.props.eventKey,
	            item: e.item,
	            open: true
	          });
	        }
	      })();
	    }

	    this.onCommonItemHover(e);
	  },

	  onSelect: function onSelect(selectInfo) {
	    var props = this.props;
	    if (props.selectable) {
	      // root menu
	      var selectedKeys = this.state.selectedKeys;
	      var selectedKey = selectInfo.key;
	      if (props.multiple) {
	        selectedKeys = selectedKeys.concat([selectedKey]);
	      } else {
	        selectedKeys = [selectedKey];
	      }
	      if (!('selectedKeys' in props)) {
	        this.setState({
	          selectedKeys: selectedKeys
	        });
	      }
	      props.onSelect((0, _objectAssign2['default'])({}, selectInfo, {
	        selectedKeys: selectedKeys
	      }));
	    }
	  },

	  onClick: function onClick(e) {
	    var props = this.props;
	    props.onClick(e);
	  },

	  onOpenChange: function onOpenChange(e) {
	    var openKeys = this.state.openKeys;
	    var props = this.props;
	    var changed = true;
	    if (e.open) {
	      changed = openKeys.indexOf(e.key) === -1;
	      if (changed) {
	        openKeys = openKeys.concat(e.key);
	      }
	    } else {
	      var index = openKeys.indexOf(e.key);
	      changed = index !== -1;
	      if (changed) {
	        openKeys = openKeys.concat();
	        openKeys.splice(index, 1);
	      }
	    }
	    if (changed) {
	      if (!('openKeys' in this.props)) {
	        // hack: batch does not update state
	        this.state.openKeys = openKeys;
	        this.setState({ openKeys: openKeys });
	      }
	      var info = (0, _objectAssign2['default'])({ openKeys: openKeys }, e);
	      if (e.open) {
	        props.onOpen(info);
	      } else {
	        props.onClose(info);
	      }
	    }
	  },

	  onDeselect: function onDeselect(selectInfo) {
	    var props = this.props;
	    if (props.selectable) {
	      var selectedKeys = this.state.selectedKeys.concat();
	      var selectedKey = selectInfo.key;
	      var index = selectedKeys.indexOf(selectedKey);
	      if (index !== -1) {
	        selectedKeys.splice(index, 1);
	      }
	      if (!('selectedKeys' in props)) {
	        this.setState({
	          selectedKeys: selectedKeys
	        });
	      }
	      props.onDeselect((0, _objectAssign2['default'])({}, selectInfo, {
	        selectedKeys: selectedKeys
	      }));
	    }
	  },

	  getOpenTransitionName: function getOpenTransitionName() {
	    var props = this.props;
	    var transitionName = props.openTransitionName;
	    var animationName = props.openAnimation;
	    if (!transitionName && typeof animationName === 'string') {
	      transitionName = props.prefixCls + '-open-' + animationName;
	    }
	    return transitionName;
	  },

	  isInlineMode: function isInlineMode() {
	    return this.props.mode === 'inline';
	  },

	  lastOpenSubMenu: function lastOpenSubMenu() {
	    var _this2 = this;

	    var lastOpen = [];
	    if (this.state.openKeys.length) {
	      lastOpen = this.getFlatInstanceArray().filter(function (c) {
	        return c && _this2.state.openKeys.indexOf(c.props.eventKey) !== -1;
	      });
	    }
	    return lastOpen[0];
	  },

	  renderMenuItem: function renderMenuItem(c, i, subIndex) {
	    var key = (0, _util.getKeyFromChildrenIndex)(c, this.props.eventKey, i);
	    var state = this.state;
	    var extraProps = {
	      openKeys: state.openKeys,
	      open: state.openKeys.indexOf(key) !== -1,
	      selectedKeys: state.selectedKeys,
	      selected: state.selectedKeys.indexOf(key) !== -1,
	      openSubMenuOnMouseEnter: this.props.openSubMenuOnMouseEnter
	    };
	    return this.renderCommonMenuItem(c, i, subIndex, extraProps);
	  },

	  render: function render() {
	    var props = (0, _objectAssign2['default'])({}, this.props);
	    props.className += ' ' + props.prefixCls + '-root';
	    return this.renderRoot(props);
	  }
	});

	exports['default'] = Menu;
	module.exports = exports['default'];

/***/ },
/* 845 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _rcUtil = __webpack_require__(__webpack_module_template_argument_0__);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _domScrollIntoView = __webpack_require__(__webpack_module_template_argument_1__);

	var _domScrollIntoView2 = _interopRequireDefault(_domScrollIntoView);

	var _objectAssign = __webpack_require__(__webpack_module_template_argument_2__);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _util = __webpack_require__(__webpack_module_template_argument_3__);

	var _DOMWrap = __webpack_require__(__webpack_module_template_argument_4__);

	var _DOMWrap2 = _interopRequireDefault(_DOMWrap);

	function allDisabled(arr) {
	  if (!arr.length) {
	    return true;
	  }
	  return arr.every(function (c) {
	    return !!c.props.disabled;
	  });
	}

	function getActiveKey(props, originalActiveKey) {
	  var activeKey = originalActiveKey;
	  var children = props.children;
	  var eventKey = props.eventKey;
	  if (activeKey) {
	    var found = undefined;
	    (0, _util.loopMenuItem)(children, function (c, i) {
	      if (!c.props.disabled && activeKey === (0, _util.getKeyFromChildrenIndex)(c, eventKey, i)) {
	        found = true;
	      }
	    });
	    if (found) {
	      return activeKey;
	    }
	  }
	  activeKey = null;
	  if (props.defaultActiveFirst) {
	    (0, _util.loopMenuItem)(children, function (c, i) {
	      if (!activeKey && !c.props.disabled) {
	        activeKey = (0, _util.getKeyFromChildrenIndex)(c, eventKey, i);
	      }
	    });
	    return activeKey;
	  }
	  return activeKey;
	}

	function saveRef(index, subIndex, c) {
	  if (c) {
	    if (subIndex !== undefined) {
	      this.instanceArray[index] = this.instanceArray[index] || [];
	      this.instanceArray[index][subIndex] = c;
	    } else {
	      this.instanceArray[index] = c;
	    }
	  }
	}

	var MenuMixin = {
	  propTypes: {
	    focusable: _react2['default'].PropTypes.bool,
	    multiple: _react2['default'].PropTypes.bool,
	    style: _react2['default'].PropTypes.object,
	    defaultActiveFirst: _react2['default'].PropTypes.bool,
	    visible: _react2['default'].PropTypes.bool,
	    activeKey: _react2['default'].PropTypes.string,
	    selectedKeys: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.string),
	    defaultSelectedKeys: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.string),
	    defaultOpenKeys: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.string),
	    openKeys: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.string),
	    children: _react2['default'].PropTypes.any
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      prefixCls: 'rc-menu',
	      className: '',
	      mode: 'vertical',
	      level: 1,
	      inlineIndent: 24,
	      visible: true,
	      focusable: true,
	      style: {}
	    };
	  },

	  getInitialState: function getInitialState() {
	    var props = this.props;
	    return {
	      activeKey: getActiveKey(props, props.activeKey)
	    };
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    var props = undefined;
	    if ('activeKey' in nextProps) {
	      props = {
	        activeKey: getActiveKey(nextProps, nextProps.activeKey)
	      };
	    } else {
	      var originalActiveKey = this.state.activeKey;
	      var activeKey = getActiveKey(nextProps, originalActiveKey);
	      // fix: this.setState(), parent.render(),
	      if (activeKey !== originalActiveKey) {
	        props = {
	          activeKey: activeKey
	        };
	      }
	    }
	    if (props) {
	      this.setState(props);
	    }
	  },

	  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
	    return this.props.visible || nextProps.visible;
	  },

	  componentWillMount: function componentWillMount() {
	    this.instanceArray = [];
	  },

	  // all keyboard events callbacks run from here at first
	  onKeyDown: function onKeyDown(e) {
	    var _this = this;

	    var keyCode = e.keyCode;
	    var handled = undefined;
	    this.getFlatInstanceArray().forEach(function (obj) {
	      if (obj && obj.props.active) {
	        handled = obj.onKeyDown(e);
	      }
	    });
	    if (handled) {
	      return 1;
	    }
	    var activeItem = null;
	    if (keyCode === _rcUtil.KeyCode.UP || keyCode === _rcUtil.KeyCode.DOWN) {
	      activeItem = this.step(keyCode === _rcUtil.KeyCode.UP ? -1 : 1);
	    }
	    if (activeItem) {
	      e.preventDefault();
	      this.setState({
	        activeKey: activeItem.props.eventKey
	      }, function () {
	        (0, _domScrollIntoView2['default'])(_reactDom2['default'].findDOMNode(activeItem), _reactDom2['default'].findDOMNode(_this), {
	          onlyScrollIfNeeded: true
	        });
	      });
	      return 1;
	    } else if (activeItem === undefined) {
	      e.preventDefault();
	      this.setState({
	        activeKey: null
	      });
	      return 1;
	    }
	  },

	  onCommonItemHover: function onCommonItemHover(e) {
	    var mode = this.props.mode;
	    var key = e.key;
	    var hover = e.hover;
	    var trigger = e.trigger;

	    var activeKey = this.state.activeKey;
	    if (!trigger || hover || this.props.closeSubMenuOnMouseLeave || !e.item.isSubMenu || mode === 'inline') {
	      this.setState({
	        activeKey: hover ? key : null
	      });
	    } else {}
	    // keep active for sub menu for click active
	    // empty

	    // clear last open status
	    if (hover && mode !== 'inline') {
	      var activeItem = this.getFlatInstanceArray().filter(function (c) {
	        return c && c.props.eventKey === activeKey;
	      })[0];
	      if (activeItem && activeItem.isSubMenu && activeItem.props.eventKey !== key) {
	        this.onOpenChange({
	          item: activeItem,
	          key: activeItem.props.eventKey,
	          open: false
	        });
	      }
	    }
	  },

	  getFlatInstanceArray: function getFlatInstanceArray() {
	    var instanceArray = this.instanceArray;
	    var hasInnerArray = instanceArray.some(function (a) {
	      return Array.isArray(a);
	    });
	    if (hasInnerArray) {
	      instanceArray = [];
	      this.instanceArray.forEach(function (a) {
	        if (Array.isArray(a)) {
	          instanceArray.push.apply(instanceArray, a);
	        } else {
	          instanceArray.push(a);
	        }
	      });
	      this.instanceArray = instanceArray;
	    }
	    return instanceArray;
	  },

	  renderCommonMenuItem: function renderCommonMenuItem(child, i, subIndex, extraProps) {
	    var state = this.state;
	    var props = this.props;
	    var key = (0, _util.getKeyFromChildrenIndex)(child, props.eventKey, i);
	    var childProps = child.props;
	    var newChildProps = (0, _objectAssign2['default'])({
	      mode: props.mode,
	      level: props.level,
	      inlineIndent: props.inlineIndent,
	      renderMenuItem: this.renderMenuItem,
	      rootPrefixCls: props.prefixCls,
	      index: i,
	      parentMenu: this,
	      ref: childProps.disabled ? undefined : (0, _rcUtil.createChainedFunction)(child.ref, saveRef.bind(this, i, subIndex)),
	      eventKey: key,
	      closeSubMenuOnMouseLeave: props.closeSubMenuOnMouseLeave,
	      onItemHover: this.onItemHover,
	      active: !childProps.disabled && key === state.activeKey,
	      multiple: props.multiple,
	      onClick: this.onClick,
	      openTransitionName: this.getOpenTransitionName(),
	      openAnimation: props.openAnimation,
	      onOpenChange: this.onOpenChange,
	      onDeselect: this.onDeselect,
	      onDestroy: this.onDestroy,
	      onSelect: this.onSelect
	    }, extraProps);
	    if (props.mode === 'inline') {
	      newChildProps.closeSubMenuOnMouseLeave = newChildProps.openSubMenuOnMouseEnter = false;
	    }
	    return _react2['default'].cloneElement(child, newChildProps);
	  },

	  renderRoot: function renderRoot(props) {
	    var _classes;

	    this.instanceArray = [];
	    var classes = (_classes = {}, _defineProperty(_classes, props.prefixCls, 1), _defineProperty(_classes, props.prefixCls + '-' + props.mode, 1), _defineProperty(_classes, props.className, !!props.className), _classes);
	    var domProps = {
	      className: (0, _classnames2['default'])(classes),
	      role: 'menu',
	      'aria-activedescendant': ''
	    };
	    if (props.id) {
	      domProps.id = props.id;
	    }
	    if (props.focusable) {
	      domProps.tabIndex = '0';
	      domProps.onKeyDown = this.onKeyDown;
	    }
	    return(
	      // ESLint is not smart enough to know that the type of `children` was checked.
	      /* eslint-disable */
	      _react2['default'].createElement(_DOMWrap2['default'], _extends({ style: props.style,
	        tag: 'ul',
	        hiddenClassName: props.prefixCls + '-hidden',
	        visible: props.visible
	      }, domProps), _react2['default'].Children.map(props.children, this.renderMenuItem))
	      /*eslint-enable */

	    );
	  },

	  step: function step(direction) {
	    var children = this.getFlatInstanceArray();
	    var activeKey = this.state.activeKey;
	    var len = children.length;
	    if (direction < 0) {
	      children = children.concat().reverse();
	    }
	    // find current activeIndex
	    var activeIndex = -1;
	    children.every(function (c, ci) {
	      if (c && c.props.eventKey === activeKey) {
	        activeIndex = ci;
	        return false;
	      }
	      return true;
	    });
	    if (!this.props.defaultActiveFirst && activeIndex !== -1) {
	      if (allDisabled(children.slice(activeIndex, len - 1))) {
	        return undefined;
	      }
	    }
	    var start = (activeIndex + 1) % len;
	    var i = start;
	    for (;;) {
	      var child = children[i];
	      if (!child || child.props.disabled) {
	        i = (i + 1 + len) % len;
	        // complete a loop
	        if (i === start) {
	          return null;
	        }
	      } else {
	        return child;
	      }
	    }
	  }
	};

	exports['default'] = MenuMixin;
	module.exports = exports['default'];

/***/ },
/* 846 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	module.exports = __webpack_require__(__webpack_module_template_argument_0__);

/***/ },
/* 847 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	var util = __webpack_require__(__webpack_module_template_argument_0__);

	function scrollIntoView(elem, container, config) {
	  config = config || {};
	  // document 归一化到 window
	  if (container.nodeType === 9) {
	    container = util.getWindow(container);
	  }

	  var allowHorizontalScroll = config.allowHorizontalScroll;
	  var onlyScrollIfNeeded = config.onlyScrollIfNeeded;
	  var alignWithTop = config.alignWithTop;
	  var alignWithLeft = config.alignWithLeft;
	  var offsetTop = config.offsetTop || 0;
	  var offsetLeft = config.offsetLeft || 0;
	  var offsetBottom = config.offsetBottom || 0;
	  var offsetRight = config.offsetRight || 0;

	  allowHorizontalScroll = allowHorizontalScroll === undefined ? true : allowHorizontalScroll;

	  var isWin = util.isWindow(container);
	  var elemOffset = util.offset(elem);
	  var eh = util.outerHeight(elem);
	  var ew = util.outerWidth(elem);
	  var containerOffset = undefined;
	  var ch = undefined;
	  var cw = undefined;
	  var containerScroll = undefined;
	  var diffTop = undefined;
	  var diffBottom = undefined;
	  var win = undefined;
	  var winScroll = undefined;
	  var ww = undefined;
	  var wh = undefined;

	  if (isWin) {
	    win = container;
	    wh = util.height(win);
	    ww = util.width(win);
	    winScroll = {
	      left: util.scrollLeft(win),
	      top: util.scrollTop(win)
	    };
	    // elem 相对 container 可视视窗的距离
	    diffTop = {
	      left: elemOffset.left - winScroll.left - offsetLeft,
	      top: elemOffset.top - winScroll.top - offsetTop
	    };
	    diffBottom = {
	      left: elemOffset.left + ew - (winScroll.left + ww) + offsetRight,
	      top: elemOffset.top + eh - (winScroll.top + wh) + offsetBottom
	    };
	    containerScroll = winScroll;
	  } else {
	    containerOffset = util.offset(container);
	    ch = container.clientHeight;
	    cw = container.clientWidth;
	    containerScroll = {
	      left: container.scrollLeft,
	      top: container.scrollTop
	    };
	    // elem 相对 container 可视视窗的距离
	    // 注意边框, offset 是边框到根节点
	    diffTop = {
	      left: elemOffset.left - (containerOffset.left + (parseFloat(util.css(container, 'borderLeftWidth')) || 0)) - offsetLeft,
	      top: elemOffset.top - (containerOffset.top + (parseFloat(util.css(container, 'borderTopWidth')) || 0)) - offsetTop
	    };
	    diffBottom = {
	      left: elemOffset.left + ew - (containerOffset.left + cw + (parseFloat(util.css(container, 'borderRightWidth')) || 0)) + offsetRight,
	      top: elemOffset.top + eh - (containerOffset.top + ch + (parseFloat(util.css(container, 'borderBottomWidth')) || 0)) + offsetBottom
	    };
	  }

	  if (diffTop.top < 0 || diffBottom.top > 0) {
	    // 强制向上
	    if (alignWithTop === true) {
	      util.scrollTop(container, containerScroll.top + diffTop.top);
	    } else if (alignWithTop === false) {
	      util.scrollTop(container, containerScroll.top + diffBottom.top);
	    } else {
	      // 自动调整
	      if (diffTop.top < 0) {
	        util.scrollTop(container, containerScroll.top + diffTop.top);
	      } else {
	        util.scrollTop(container, containerScroll.top + diffBottom.top);
	      }
	    }
	  } else {
	    if (!onlyScrollIfNeeded) {
	      alignWithTop = alignWithTop === undefined ? true : !!alignWithTop;
	      if (alignWithTop) {
	        util.scrollTop(container, containerScroll.top + diffTop.top);
	      } else {
	        util.scrollTop(container, containerScroll.top + diffBottom.top);
	      }
	    }
	  }

	  if (allowHorizontalScroll) {
	    if (diffTop.left < 0 || diffBottom.left > 0) {
	      // 强制向上
	      if (alignWithLeft === true) {
	        util.scrollLeft(container, containerScroll.left + diffTop.left);
	      } else if (alignWithLeft === false) {
	        util.scrollLeft(container, containerScroll.left + diffBottom.left);
	      } else {
	        // 自动调整
	        if (diffTop.left < 0) {
	          util.scrollLeft(container, containerScroll.left + diffTop.left);
	        } else {
	          util.scrollLeft(container, containerScroll.left + diffBottom.left);
	        }
	      }
	    } else {
	      if (!onlyScrollIfNeeded) {
	        alignWithLeft = alignWithLeft === undefined ? true : !!alignWithLeft;
	        if (alignWithLeft) {
	          util.scrollLeft(container, containerScroll.left + diffTop.left);
	        } else {
	          util.scrollLeft(container, containerScroll.left + diffBottom.left);
	        }
	      }
	    }
	  }
	}

		module.exports = scrollIntoView;

/***/ },
/* 848 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _objectAssign = __webpack_require__(__webpack_module_template_argument_0__);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var DOMWrap = _react2['default'].createClass({
	  displayName: 'DOMWrap',

	  propTypes: {
	    tag: _react2['default'].PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      tag: 'div'
	    };
	  },

	  render: function render() {
	    var props = (0, _objectAssign2['default'])({}, this.props);
	    if (!props.visible) {
	      props.className = props.className || '';
	      props.className += ' ' + props.hiddenClassName;
	    }
	    var Tag = props.tag;
	    return _react2['default'].createElement(Tag, props);
	  }
	});

	exports['default'] = DOMWrap;
	module.exports = exports['default'];

/***/ },
/* 849 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var _SubPopupMenu = __webpack_require__(__webpack_module_template_argument_0__);

	var _SubPopupMenu2 = _interopRequireDefault(_SubPopupMenu);

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _rcUtil = __webpack_require__(__webpack_module_template_argument_1__);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _objectAssign = __webpack_require__(__webpack_module_template_argument_2__);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var SubMenu = _react2['default'].createClass({
	  displayName: 'SubMenu',

	  propTypes: {
	    parentMenu: _react2['default'].PropTypes.object,
	    title: _react2['default'].PropTypes.node,
	    onClick: _react2['default'].PropTypes.func,
	    onOpenChange: _react2['default'].PropTypes.func,
	    rootPrefixCls: _react2['default'].PropTypes.string,
	    eventKey: _react2['default'].PropTypes.string,
	    multiple: _react2['default'].PropTypes.bool,
	    active: _react2['default'].PropTypes.bool,
	    open: _react2['default'].PropTypes.bool,
	    onSelect: _react2['default'].PropTypes.func,
	    closeSubMenuOnMouseLeave: _react2['default'].PropTypes.bool,
	    openSubMenuOnMouseEnter: _react2['default'].PropTypes.bool,
	    onDeselect: _react2['default'].PropTypes.func,
	    onDestroy: _react2['default'].PropTypes.func,
	    onItemHover: _react2['default'].PropTypes.func
	  },

	  mixins: [__webpack_require__(__webpack_module_template_argument_3__)],

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onMouseEnter: function onMouseEnter() {},
	      title: ''
	    };
	  },

	  getInitialState: function getInitialState() {
	    this.isSubMenu = 1;
	    return {
	      defaultActiveFirst: false
	    };
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    var props = this.props;
	    if (props.onDestroy) {
	      props.onDestroy(props.eventKey);
	    }
	  },

	  onDestroy: function onDestroy(key) {
	    this.props.onDestroy(key);
	  },

	  onKeyDown: function onKeyDown(e) {
	    var keyCode = e.keyCode;
	    var menu = this.menuInstance;

	    if (keyCode === _rcUtil.KeyCode.ENTER) {
	      this.onClick(e);
	      this.setState({
	        defaultActiveFirst: true
	      });
	      return true;
	    }

	    if (keyCode === _rcUtil.KeyCode.RIGHT) {
	      if (this.props.open) {
	        menu.onKeyDown(e);
	      } else {
	        this.triggerOpenChange(true);
	        this.setState({
	          defaultActiveFirst: true
	        });
	      }
	      return true;
	    }
	    if (keyCode === _rcUtil.KeyCode.LEFT) {
	      var handled = undefined;
	      if (this.props.open) {
	        handled = menu.onKeyDown(e);
	      } else {
	        return undefined;
	      }
	      if (!handled) {
	        this.triggerOpenChange(false);
	        handled = true;
	      }
	      return handled;
	    }

	    if (this.props.open && (keyCode === _rcUtil.KeyCode.UP || keyCode === _rcUtil.KeyCode.DOWN)) {
	      return menu.onKeyDown(e);
	    }
	  },

	  onSubTreeMouseEnter: function onSubTreeMouseEnter() {
	    if (this.leaveTimer) {
	      clearTimeout(this.leaveTimer);
	      this.leaveTimer = null;
	    }
	  },

	  onOpenChange: function onOpenChange(e) {
	    this.props.onOpenChange(this.addKeyPath(e));
	  },

	  onMouseEnter: function onMouseEnter() {
	    if (this.leaveTimer) {
	      clearTimeout(this.leaveTimer);
	      this.leaveTimer = null;
	    }
	    var props = this.props;
	    var parentMenu = props.parentMenu;
	    if (parentMenu.menuItemMouseLeaveTimer) {
	      clearTimeout(parentMenu.menuItemMouseLeaveTimer);
	      parentMenu.menuItemMouseLeaveTimer = null;
	    }
	    props.onItemHover({
	      key: this.props.eventKey,
	      item: this,
	      hover: true,
	      trigger: 'mouseenter'
	    });
	    if (props.openSubMenuOnMouseEnter) {
	      this.triggerOpenChange(true);
	    }
	    this.setState({
	      defaultActiveFirst: false
	    });
	  },

	  onMouseLeave: function onMouseLeave() {
	    var _this = this;

	    // prevent popup menu and submenu gap
	    this.leaveTimer = setTimeout(function () {
	      // leave whole sub tree
	      // still active
	      if (_this.isMounted() && _this.props.active) {
	        _this.props.onItemHover({
	          key: _this.props.eventKey,
	          item: _this,
	          hover: false,
	          trigger: 'mouseleave'
	        });
	      }
	      if (_this.isMounted() && _this.props.open) {
	        if (_this.props.closeSubMenuOnMouseLeave) {
	          _this.triggerOpenChange(false);
	        }
	      }
	    }, 100);
	  },

	  onClick: function onClick() {
	    if (this.props.openSubMenuOnMouseEnter) {
	      return;
	    }
	    this.triggerOpenChange(!this.props.open, 'click');
	    this.setState({
	      defaultActiveFirst: false
	    });
	  },

	  onSubMenuClick: function onSubMenuClick(info) {
	    this.props.onClick(this.addKeyPath(info));
	  },

	  onSelect: function onSelect(info) {
	    this.props.onSelect(info);
	  },

	  onDeselect: function onDeselect(info) {
	    this.props.onDeselect(info);
	  },

	  getPrefixCls: function getPrefixCls() {
	    return this.props.rootPrefixCls + '-submenu';
	  },

	  getActiveClassName: function getActiveClassName() {
	    return this.getPrefixCls() + '-active';
	  },

	  getDisabledClassName: function getDisabledClassName() {
	    return this.getPrefixCls() + '-disabled';
	  },

	  getOpenClassName: function getOpenClassName() {
	    return this.props.rootPrefixCls + '-submenu-open';
	  },

	  saveMenuInstance: function saveMenuInstance(c) {
	    this.menuInstance = c;
	  },

	  addKeyPath: function addKeyPath(info) {
	    return (0, _objectAssign2['default'])({}, info, {
	      keyPath: (info.keyPath || []).concat(this.props.eventKey)
	    });
	  },

	  triggerOpenChange: function triggerOpenChange(open, type) {
	    var key = this.props.eventKey;
	    this.onOpenChange({
	      key: key,
	      item: this,
	      trigger: type,
	      open: open
	    });
	  },

	  renderChildren: function renderChildren(children) {
	    var props = this.props;
	    var baseProps = {
	      mode: props.mode === 'horizontal' ? 'vertical' : props.mode,
	      visible: props.open,
	      level: props.level + 1,
	      inlineIndent: props.inlineIndent,
	      focusable: false,
	      onClick: this.onSubMenuClick,
	      onSelect: this.onSelect,
	      onDeselect: this.onDeselect,
	      onDestroy: this.onDestroy,
	      selectedKeys: props.selectedKeys,
	      eventKey: props.eventKey + '-menu-',
	      openKeys: props.openKeys,
	      openTransitionName: props.openTransitionName,
	      openAnimation: props.openAnimation,
	      onOpenChange: this.onOpenChange,
	      closeSubMenuOnMouseLeave: props.closeSubMenuOnMouseLeave,
	      defaultActiveFirst: this.state.defaultActiveFirst,
	      multiple: props.multiple,
	      prefixCls: props.rootPrefixCls,
	      id: this._menuId,
	      ref: this.saveMenuInstance
	    };
	    return _react2['default'].createElement(_SubPopupMenu2['default'], baseProps, children);
	  },

	  render: function render() {
	    var _classes;

	    this.haveOpen = this.haveOpen || this.props.open;
	    var props = this.props;
	    var prefixCls = this.getPrefixCls();
	    var classes = (_classes = {}, _defineProperty(_classes, props.className, !!props.className), _defineProperty(_classes, prefixCls + '-' + props.mode, 1), _classes);

	    classes[this.getOpenClassName()] = this.props.open;
	    classes[this.getActiveClassName()] = props.active;
	    classes[this.getDisabledClassName()] = props.disabled;
	    this._menuId = this._menuId || (0, _rcUtil.guid)();
	    classes[prefixCls] = true;
	    classes[prefixCls + '-' + props.mode] = 1;
	    var clickEvents = {};
	    var mouseEvents = {};
	    var titleMouseEvents = {};
	    if (!props.disabled) {
	      clickEvents = {
	        onClick: this.onClick
	      };
	      mouseEvents = {
	        onMouseLeave: this.onMouseLeave,
	        onMouseEnter: this.onSubTreeMouseEnter
	      };
	      // only works in title, not outer li
	      titleMouseEvents = {
	        onMouseEnter: this.onMouseEnter
	      };
	    }
	    var style = {};
	    if (props.mode === 'inline') {
	      style.paddingLeft = props.inlineIndent * props.level;
	    }
	    return _react2['default'].createElement('li', _extends({ className: (0, _classnames2['default'])(classes) }, mouseEvents), _react2['default'].createElement('div', _extends({
	      style: style,
	      className: prefixCls + '-title'
	    }, titleMouseEvents, clickEvents, {
	      'aria-open': props.open,
	      'aria-owns': this._menuId,
	      'aria-haspopup': 'true'
	    }), props.title), this.renderChildren(props.children));
	  }
	});

	exports['default'] = SubMenu;
	module.exports = exports['default'];

/***/ },
/* 850 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _MenuMixin = __webpack_require__(__webpack_module_template_argument_0__);

	var _MenuMixin2 = _interopRequireDefault(_MenuMixin);

	var _objectAssign = __webpack_require__(__webpack_module_template_argument_1__);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _util = __webpack_require__(__webpack_module_template_argument_2__);

	var _rcAnimate = __webpack_require__(__webpack_module_template_argument_3__);

	var _rcAnimate2 = _interopRequireDefault(_rcAnimate);

	var SubPopupMenu = _react2['default'].createClass({
	  displayName: 'SubPopupMenu',

	  propTypes: {
	    onSelect: _react2['default'].PropTypes.func,
	    onClick: _react2['default'].PropTypes.func,
	    onDeselect: _react2['default'].PropTypes.func,
	    onOpenChange: _react2['default'].PropTypes.func,
	    onDestroy: _react2['default'].PropTypes.func,
	    openTransitionName: _react2['default'].PropTypes.string,
	    openAnimation: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.object]),
	    openKeys: _react2['default'].PropTypes.arrayOf(_react2['default'].PropTypes.string),
	    closeSubMenuOnMouseLeave: _react2['default'].PropTypes.bool,
	    visible: _react2['default'].PropTypes.bool,
	    children: _react2['default'].PropTypes.any
	  },

	  mixins: [_MenuMixin2['default']],

	  onDeselect: function onDeselect(selectInfo) {
	    this.props.onDeselect(selectInfo);
	  },

	  onSelect: function onSelect(selectInfo) {
	    this.props.onSelect(selectInfo);
	  },

	  onClick: function onClick(e) {
	    this.props.onClick(e);
	  },

	  onOpenChange: function onOpenChange(e) {
	    this.props.onOpenChange(e);
	  },

	  onDestroy: function onDestroy(key) {
	    this.props.onDestroy(key);
	  },

	  onItemHover: function onItemHover(e) {
	    this.onCommonItemHover(e);
	  },

	  getOpenTransitionName: function getOpenTransitionName() {
	    return this.props.openTransitionName;
	  },

	  renderMenuItem: function renderMenuItem(c, i, subIndex) {
	    var props = this.props;
	    var key = (0, _util.getKeyFromChildrenIndex)(c, props.eventKey, i);
	    var extraProps = {
	      openKeys: props.openKeys,
	      selectedKeys: props.selectedKeys,
	      open: props.openKeys.indexOf(key) !== -1,
	      selected: props.selectedKeys.indexOf(key) !== -1,
	      openSubMenuOnMouseEnter: true
	    };
	    return this.renderCommonMenuItem(c, i, subIndex, extraProps);
	  },

	  render: function render() {
	    var renderFirst = this.renderFirst;
	    this.renderFirst = 1;
	    this.haveOpened = this.haveOpened || this.props.visible;
	    if (!this.haveOpened) {
	      return null;
	    }
	    var transitionAppear = true;
	    if (!renderFirst && this.props.visible) {
	      transitionAppear = false;
	    }
	    var props = (0, _objectAssign2['default'])({}, this.props);
	    props.className += ' ' + props.prefixCls + '-sub';
	    var animProps = {};
	    if (props.openTransitionName) {
	      animProps.transitionName = props.openTransitionName;
	    } else if (_typeof(props.openAnimation) === 'object') {
	      animProps.animation = (0, _objectAssign2['default'])({}, props.openAnimation);
	      if (!transitionAppear) {
	        delete animProps.animation.appear;
	      }
	    }
	    return _react2['default'].createElement(_rcAnimate2['default'], _extends({}, animProps, {
	      showProp: 'visible',
	      component: '',
	      transitionAppear: transitionAppear }), this.renderRoot(props));
	  }
	});

	exports['default'] = SubPopupMenu;
	module.exports = exports['default'];

/***/ },
/* 851 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _rcUtil = __webpack_require__(__webpack_module_template_argument_0__);

	var _rcUtil2 = _interopRequireDefault(_rcUtil);

	var _reactDom = __webpack_require__(4);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	exports['default'] = {
	  componentDidMount: function componentDidMount() {
	    this.componentDidUpdate();
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.props.mode !== 'inline') {
	      if (this.props.open) {
	        this.bindRootCloseHandlers();
	      } else {
	        this.unbindRootCloseHandlers();
	      }
	    }
	  },

	  handleDocumentKeyUp: function handleDocumentKeyUp(e) {
	    if (e.keyCode === _rcUtil.KeyCode.ESC) {
	      this.props.onItemHover({
	        key: this.props.eventKey,
	        item: this,
	        hover: false
	      });
	    }
	  },

	  handleDocumentClick: function handleDocumentClick(e) {
	    // If the click originated from within this component
	    // don't do anything.
	    if (_rcUtil2['default'].Dom.contains(_reactDom2['default'].findDOMNode(this), e.target)) {
	      return;
	    }
	    var props = this.props;
	    props.onItemHover({
	      hover: false,
	      item: this,
	      key: this.props.eventKey
	    });
	    this.triggerOpenChange(false);
	  },

	  bindRootCloseHandlers: function bindRootCloseHandlers() {
	    if (!this._onDocumentClickListener) {
	      this._onDocumentClickListener = _rcUtil2['default'].Dom.addEventListener(document, 'click', this.handleDocumentClick);
	      this._onDocumentKeyupListener = _rcUtil2['default'].Dom.addEventListener(document, 'keyup', this.handleDocumentKeyUp);
	    }
	  },

	  unbindRootCloseHandlers: function unbindRootCloseHandlers() {
	    if (this._onDocumentClickListener) {
	      this._onDocumentClickListener.remove();
	      this._onDocumentClickListener = null;
	    }

	    if (this._onDocumentKeyupListener) {
	      this._onDocumentKeyupListener.remove();
	      this._onDocumentKeyupListener = null;
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    this.unbindRootCloseHandlers();
	  }
	};
		module.exports = exports['default'];

/***/ },
/* 852 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _rcUtil = __webpack_require__(__webpack_module_template_argument_0__);

	var _classnames = __webpack_require__(5);

	var _classnames2 = _interopRequireDefault(_classnames);

	var MenuItem = _react2['default'].createClass({
	  displayName: 'MenuItem',

	  propTypes: {
	    rootPrefixCls: _react2['default'].PropTypes.string,
	    eventKey: _react2['default'].PropTypes.string,
	    active: _react2['default'].PropTypes.bool,
	    selected: _react2['default'].PropTypes.bool,
	    disabled: _react2['default'].PropTypes.bool,
	    title: _react2['default'].PropTypes.string,
	    onSelect: _react2['default'].PropTypes.func,
	    onClick: _react2['default'].PropTypes.func,
	    onDeselect: _react2['default'].PropTypes.func,
	    parentMenu: _react2['default'].PropTypes.object,
	    onItemHover: _react2['default'].PropTypes.func,
	    onDestroy: _react2['default'].PropTypes.func
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      onSelect: function onSelect() {},
	      onMouseEnter: function onMouseEnter() {}
	    };
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    var props = this.props;
	    if (props.onDestroy) {
	      props.onDestroy(props.eventKey);
	    }
	  },

	  onKeyDown: function onKeyDown(e) {
	    var keyCode = e.keyCode;
	    if (keyCode === _rcUtil.KeyCode.ENTER) {
	      this.onClick(e);
	      return true;
	    }
	  },

	  onMouseLeave: function onMouseLeave() {
	    var _this = this;

	    var eventKey = this.props.eventKey;
	    var parentMenu = this.props.parentMenu;
	    parentMenu.menuItemMouseLeaveTimer = setTimeout(function () {
	      if (_this.isMounted() && _this.props.active) {
	        _this.props.onItemHover({
	          key: eventKey,
	          item: _this,
	          hover: false,
	          trigger: 'mouseleave'
	        });
	      }
	    }, 30);
	  },

	  onMouseEnter: function onMouseEnter() {
	    var props = this.props;
	    var parentMenu = this.props.parentMenu;
	    if (parentMenu.menuItemMouseLeaveTimer) {
	      clearTimeout(parentMenu.menuItemMouseLeaveTimer);
	      parentMenu.menuItemMouseLeaveTimer = null;
	    }
	    var eventKey = props.eventKey;
	    props.onItemHover({
	      key: eventKey,
	      item: this,
	      hover: true,
	      trigger: 'mouseenter'
	    });
	  },

	  onClick: function onClick(e) {
	    var props = this.props;
	    var eventKey = props.eventKey;
	    var info = {
	      key: eventKey,
	      keyPath: [eventKey],
	      item: this,
	      domEvent: e
	    };
	    props.onClick(info);
	    if (props.multiple) {
	      if (props.selected) {
	        props.onDeselect(info);
	      } else {
	        props.onSelect(info);
	      }
	    } else if (!props.selected) {
	      props.onSelect(info);
	    }
	  },

	  getPrefixCls: function getPrefixCls() {
	    return this.props.rootPrefixCls + '-item';
	  },

	  getActiveClassName: function getActiveClassName() {
	    return this.getPrefixCls() + '-active';
	  },

	  getSelectedClassName: function getSelectedClassName() {
	    return this.getPrefixCls() + '-selected';
	  },

	  getDisabledClassName: function getDisabledClassName() {
	    return this.getPrefixCls() + '-disabled';
	  },

	  render: function render() {
	    var props = this.props;
	    var classes = {};
	    classes[this.getActiveClassName()] = !props.disabled && props.active;
	    classes[this.getSelectedClassName()] = props.selected;
	    classes[this.getDisabledClassName()] = props.disabled;
	    classes[this.getPrefixCls()] = true;
	    classes[props.className] = !!props.className;
	    var attrs = _extends({}, props.attribute, {
	      title: props.title,
	      className: (0, _classnames2['default'])(classes),
	      role: 'menuitem',
	      'aria-selected': props.selected,
	      'aria-disabled': props.disabled
	    });
	    var mouseEvent = {};
	    if (!props.disabled) {
	      mouseEvent = {
	        onClick: this.onClick,
	        onMouseLeave: this.onMouseLeave,
	        onMouseEnter: this.onMouseEnter
	      };
	    }
	    var style = _extends({}, props.style);
	    if (props.mode === 'inline') {
	      style.paddingLeft = props.inlineIndent * props.level;
	    }
	    return _react2['default'].createElement('li', _extends({ style: style
	    }, attrs, mouseEvent), props.children);
	  }
	});

	exports['default'] = MenuItem;
	module.exports = exports['default'];

/***/ },
/* 853 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	/**
	 * Menu Component for uxcore
	 * @author vincent.bian
	 *
	 * Copyright 2014-2015, Uxcore Team, Alinw.
	 * All rights reserved.
	 */

		module.exports = __webpack_require__(__webpack_module_template_argument_0__);

/***/ },
/* 854 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	exports.__esModule = true;

	var _react = __webpack_require__(3);

	var _react2 = _interopRequireDefault(_react);

	var _rcMenu = __webpack_require__(__webpack_module_template_argument_0__);

	var _rcMenu2 = _interopRequireDefault(_rcMenu);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { "default": obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	    }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	} /**
	   * Menu Component for uxcore
	   * @author vincent.bian
	   *
	   * Copyright 2014-2015, Uxcore Team, Alinw.
	   * All rights reserved.
	   */

	var Menu = function (_React$Component) {
	    _inherits(Menu, _React$Component);

	    function Menu() {
	        _classCallCheck(this, Menu);

	        return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	    }

	    Menu.prototype.render = function render() {
	        if (this.props.mode === 'inline') {
	            return _react2["default"].createElement(_rcMenu2["default"], this.props);
	        } else {
	            return _react2["default"].createElement(_rcMenu2["default"], this.props);
	        }
	    };

	    return Menu;
	}(_react2["default"].Component);

	Menu.defaultProps = {
	    prefixCls: 'kuma-menu'
	};
	Menu.propTypes = {
	    prefixCls: _react2["default"].PropTypes.string
	};

	Menu.SubMenu = _rcMenu.SubMenu;
	Menu.Item = _rcMenu.Item;
	Menu.Divider = _rcMenu.Divider;

	exports["default"] = Menu;
	module.exports = exports['default'];

/***/ },
/* 855 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';

	var _Button = __webpack_require__(__webpack_module_template_argument_0__);

	var _Button2 = _interopRequireDefault(_Button);

	function _interopRequireDefault(obj) {
	                                    return obj && obj.__esModule ? obj : { "default": obj };
	}

	module.exports = _Button2["default"]; /**
	                                      * Button Component for uxcore
	                                      * @author
	                                      *
	                                      * Copyright 2014-2015, Uxcore Team, Alinw.
	                                      * All rights reserved.
	                                      */

/***/ }
/******/ ])));
//# sourceMappingURL=data:application/json;base64,